Imports DevExpress.XtraEditors
Imports IBM.Data.DB2

'********************************************************************************
'* ECSL.NET - Ergon Client/Server Library .NET                                  *
'*                                                                              *
'* LIB_DBS: Libreria di gestione basi di dati                                   *
'*                                                                              *
'* AUTORE : Adriano Pozzobon                                                    *
'*                                                                              *
'********************************************************************************

Module lib_dbs

    Public DB_Conn As DB2Connection = Nothing               ' connessione database corrente
    Public DB_ConnectionString As String                    ' stringa di connessione corrente ( stringa ibrida NET / VB6 deve contenere tutti i parametri necessari per connettersi sia in NET che in VB6 )
    Public DB_ConnectionString_NET As String                ' stringa di connessione corrente per programmi standard NET
    Public DB_ConnectionString_VB6 As String                ' stringa di connessione corrente per programmi standard VB6 ( utilizzata per poter lanciare programmi VB6 )
    Public DB_Transaction As DB2Transaction = Nothing       ' transazione
    Public DB_Autoread As Boolean                           ' stato di lettura automatica
    Public DB_Locktimeout As Integer                        ' tempo di attesa per il lock
    Public DB_UpdatePermission As Boolean                   ' autorizzazione alla modifica dei dati
    Public DB_ServerType As String                          ' tipo di sistema operativo del server
    Public DB_FormPrefix As String                          ' prefisso sul titolo delle applicazioni
    Public DB_FormSuffix As String                          ' suffisso sul titolo delle applicazioni
    Public DB_RunUid As String                              ' utente per l'esecuzione dell'applicazione
    Public DB_RunPwd As String                              ' password per l'esecuzione dell'applicazione
    Public DB_WriteUid As String                            ' utente per la modifica dei dati
    Public DB_WritePwd As String                            ' password per la modifica dei dati
    Public DB_MenuUid As String                             ' utente per accedere al menù
    Public DB_MenuPwd As String                             ' password per accedere al menù
    Public DB_MenuParametersCount As Integer                ' numero di parametri utilizzati dalla voce di menù
    Public DB_FlagCheckTaskcli As Boolean                   ' flag per indicare se registrare o meno il processo nel registro dei processi client
    Public DB_TaskcliId As Integer                          ' indentificatore del processo nel registro dei processi client

    Public Enum DB2DataAdapterType
        [ReadOnly] = 0                                      ' il dataadapter è in sola lettura
        Optimistic = 1                                      ' il dataadapter usa il lock ottimistico confrontando tutti i campi della riga
        UseOnlyKeyColumns = 2                               ' il dataadapter usa solo i campi chiave per aggiornare la riga; non viene fatto alcun tipo di lock;
    End Enum
    '
    ' Inizia una transazione ( funzione normalmente utilizzata nei programmi )
    '
    Public Sub DB_BeginTrans()

        If DB_Transaction Is Nothing Then
            DB_Transaction = DB_Conn.BeginTransaction(IsolationLevel.ReadCommitted)
        End If

    End Sub
    '
    ' Inizia una transazione ( funzione da utilizzare se si sta gestendo una transazione che non è quella primaria )
    '
    Public Sub DB_BeginTrans(ByRef Connection As DB2Connection, ByRef Transaction As DB2Transaction, Optional ByVal IsolationLevel As IsolationLevel = IsolationLevel.ReadCommitted)

        If Transaction Is Nothing Then
            Transaction = Connection.BeginTransaction(IsolationLevel)
        End If

    End Sub
    '
    ' Cambia la password dell'utente corrente inviando il comando direttamente al server mediante stored procedure shell
    '
    Public Function DB_ChangeUserPwd(ByVal New_User_Pwd As String) As Boolean
        Dim Server_Type As String = ""
        Dim Command As String
        Dim Sql As String

        DB_ChangeUserPwd = False

        Try
            DB_LookUp("server_type", "server", "", Server_Type)

            Command = ""

            Select Case Server_Type
                Case "A" ' AIX

                    ' sotto AIX 4.3.3 viene usato il comando "chpass" disponibile nel pacchetto "freeware.aix.tools.rte";
                    ' questo comando può essere eseguito solo da root; per tale motivo root deve essere senza password.

                    ' sotto AIX 5.2 si può usare il comando seguente:
                    ' echo "utente:nuovapassword" | /bin/chpasswd -c

                    Command = "su -c """ & "chpass " & DB_GetConnectionInfo("uid") & " " & new_user_pwd & """"

                Case "L" ' LINUX

                    Command = "echo -e """ & DB_GetConnectionInfo("pwd") & "\n" & new_user_pwd & "\n" & new_user_pwd & """ | passwd "

            End Select

            Sql = "execute procedure shell ('" & Command & "')"

            DB_SqlExecute(Sql, DB_Conn, DB_Transaction)

            DB_ChangeUserPwd = True

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Function
    '
    ' Cambia la password dell'utente corrente all'interno della stringa di connessione
    '
    Public Function DB_ChangeUserPwdConnection(ByVal New_User_Pwd As String) As Boolean
        Dim New_Dbconnection As String
        Dim New_Dbconnection_Net As String
        Dim New_Dbconnection_Vb6 As String
        Dim i1 As Integer
        Dim i2 As Integer

        DB_ChangeUserPwdConnection = False

        Try

            If InStr(UCase(DB_ConnectionString), "PWD=") <= 0 Or _
               InStr(UCase(DB_ConnectionString_NET), "PASSWORD=") <= 0 Or _
               InStr(UCase(DB_ConnectionString_VB6), "PWD=") <= 0 Then

                XtraMessageBox.Show("Impossibile modificare la password della connessione corrente.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                Exit Function
            End If

            ' stringa di connessione corrente ( stringa ibrida NET / VB6 contenente tutti i parametri necessari per connettersi sia in NET che in VB6 )

            i1 = InStr(UCase(DB_ConnectionString), "PWD=")

            If i1 > 0 Then

                i1 = i1 + 4
                i2 = InStr(i1, DB_ConnectionString, ";")

                If i2 <= 0 Then
                    i2 = Len(DB_ConnectionString) + 1
                End If

                New_Dbconnection = Mid(DB_ConnectionString, 1, i1 - 1) & new_user_pwd & Mid(DB_ConnectionString, i2)

                DB_ConnectionString = New_Dbconnection
            End If

            ' stringa di connessione corrente per programmi NET

            i1 = InStr(UCase(DB_ConnectionString_NET), "PASSWORD=")

            If i1 > 0 Then

                i1 = i1 + 9
                i2 = InStr(i1, DB_ConnectionString_NET, ";")

                If i2 <= 0 Then
                    i2 = Len(DB_ConnectionString_NET) + 1
                End If

                New_Dbconnection_Net = Mid(DB_ConnectionString_NET, 1, i1 - 1) & new_user_pwd & Mid(DB_ConnectionString_NET, i2)

                DB_ConnectionString_NET = New_Dbconnection_Net
            End If

            ' stringa di connessione corrente per programmi VB6

            i1 = InStr(UCase(DB_ConnectionString_VB6), "PWD=")

            If i1 > 0 Then

                i1 = i1 + 4
                i2 = InStr(i1, DB_ConnectionString_VB6, ";")

                If i2 <= 0 Then
                    i2 = Len(DB_ConnectionString_VB6) + 1
                End If

                New_Dbconnection_Vb6 = Mid(DB_ConnectionString_VB6, 1, i1 - 1) & new_user_pwd & Mid(DB_ConnectionString_VB6, i2)

                DB_ConnectionString_VB6 = New_Dbconnection_Vb6
            End If

            DB_ChangeUserPwdConnection = True

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Function
    '
    ' Controlla il numero di licenze in base al numero di client
    '
    Public Function DB_CheckClientLic() As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim Server_Name1 As Object = ""
        Dim Nr_Lic1 As Object = 0
        Dim Nr_Lic2 As Integer
        Dim Lic_Pwd1 As Object = ""
        Dim Lic_Pwd2 As Object = ""
        Dim Client_Count_Type As Object = ""
        Dim Hostname_Length As Integer
        DB_CheckClientLic = False

        Try

            ' estrae le licenze e la password memorizzate nel server

            DB_LookUp("server_name,nr_lic,lic_pwd", "server", "", Server_Name1, Nr_Lic1, Lic_Pwd1)

            If Field_Null(Nr_Lic1) Then Nr_Lic1 = 0
            If Field_Null(Lic_Pwd1) Then Lic_Pwd1 = ""

            ' ricava la metodologia di conteggio del numero di client ("H"=Hostname; "T"=TTY;)

            Client_Count_Type = ""

            If DB_FieldExists("server", "client_count_type") Then
                DB_LookUp("client_count_type", "server", "", Client_Count_Type)
            End If

            If Field_Null(Client_Count_Type) Then Client_Count_Type = "H"

            ' ricava la lunghezza della colonna hostname nella tabella sysmaster:syssessions
            ' 16 caratteri per Informix 7,9,10 e 256 caratteri per Informix 11;

            Sql = "      SELECT sysmaster:syscolumns.collength " & CrLf
            Sql = Sql & "FROM   sysmaster:systables, sysmaster:syscolumns " & CrLf
            Sql = Sql & "WHERE  sysmaster:systables.tabname  = 'syssessions' " & CrLf
            Sql = Sql & "  AND  sysmaster:systables.tabid    = sysmaster:syscolumns.tabid " & CrLf
            Sql = Sql & "  AND  sysmaster:syscolumns.colname = 'hostname' " & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Hostname_Length = CInt(DB_Dsv(Dr("collength"), 0))
            Else
                Hostname_Length = 16
            End If

            DB_DataReaderClose(Dr, Cmd)

            ' conta il numero di client collegati;
            ' Nota: non viene usata l'espressione count(distinct lower(trim(hostname)))
            '       perchè alcune versioni di Informix non la supportano;
            '       non crea una tabella temporanea di appoggio perchè non migliora affatto la velocità;

            If (Client_Count_Type = "H") Then
                Sql = "SELECT DISTINCT lower(trim(hostname)) AS client_name " & CrLf
            Else
                Sql = "SELECT DISTINCT lower(trim(tty)) AS client_name " & CrLf
            End If

            Sql = Sql & "FROM   sysmaster:syssessions " & CrLf
            Sql = Sql & "WHERE  lower(trim(hostname)) <> '" & LCase(Trim(CStr(Server_Name1))) & "' " & CrLf             ' esclude sempre il server linux
            Sql = Sql & "  AND  hostname <> ' ' " & CrLf

            If (Client_Count_Type = "T") Then
                Sql = Sql & "  AND  tty <> ' ' " & CrLf
            End If

            ' verifica se si devono escludere determinati client dal calcolo delle licenze

            If DB_FieldExists("erglicclient", "client_name") Then

                If (Client_Count_Type = "H") Then

                    If (Hostname_Length <= 16) Then

                        ' Informix 7,9,10

                        Sql = Sql & " AND lower(trim(hostname[1,16])) NOT IN (SELECT lower(trim(client_name[1,16])) " & CrLf
                        Sql = Sql & "                                         FROM   erglicclient " & CrLf
                        Sql = Sql & "                                         WHERE  (flag_check_lic is null) OR (flag_check_lic <> 'S')) " & CrLf

                    Else
                        ' Informix 11

                        Sql = Sql & " AND lower(trim(hostname)) NOT IN (SELECT lower(trim(client_name)) " & CrLf
                        Sql = Sql & "                                   FROM   erglicclient " & CrLf
                        Sql = Sql & "                                   WHERE  (flag_check_lic is null) OR (flag_check_lic <> 'S')) " & CrLf

                    End If

                Else

                    Sql = Sql & " AND lower(trim(tty)) NOT IN (SELECT lower(trim(client_name)) " & CrLf
                    Sql = Sql & "                              FROM   erglicclient " & CrLf
                    Sql = Sql & "                              WHERE  (flag_check_lic is null) OR (flag_check_lic <> 'S')) " & CrLf

                End If

            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            Nr_Lic2 = 0

            While Dr.Read
                Nr_Lic2 = Nr_Lic2 + 1                
            End While

            DB_DataReaderClose(Dr, Cmd)

            ' calcola la password di licenza esatta

            Lic_Pwd2 = DB_CreateLicPwd(CInt(Nr_Lic1), LCase(DB_GetConnectionInfo("db")))

            ' controlla la password di licenza

            If CStr(Lic_Pwd2) <> CStr(Lic_Pwd1) Then
                DB_CheckClientLic = False
                Exit Function
            End If

            ' controlla il numero di licenze in uso

            If Nr_Lic2 > CInt(Nr_Lic1) Then
                DB_CheckClientLic = False
                Exit Function
            End If

            ' OK. Autorizzazione concessa.

            DB_CheckClientLic = True

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Controlla il numero massimo di sessioni permesse sul client
    '
    Public Function DB_CheckClientSes() As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim Valore As Object = ""
        Dim Nr_Ses1 As Integer
        Dim Nr_Ses2 As Integer
        Dim Sid As Integer
        Dim Client_Count_Type As Object = ""
        Dim Client_Name1 As String
        DB_CheckClientSes = False

        Try

            ' estrae il numero massimo di sessioni consentite per il client

            If DB_GetIfxInfParam("MAXSESSIONS", Valore) = False Then
                DB_CheckClientSes = True
                Exit Function
            End If

            Nr_Ses1 = CInt(Valore)

            ' ricava la metodologia di conteggio del numero di client ("H"=Hostname; "T"=TTY;)

            Client_Count_Type = ""

            If DB_FieldExists("server", "client_count_type") Then
                DB_LookUp("client_count_type", "server", "", Client_Count_Type)
            End If

            If Field_Null(Client_Count_Type) Then Client_Count_Type = "H"

            ' estrae il numero della sessione corrente

            Sql = " SELECT dbinfo('sessionid') AS current_sessionid " & CrLf & _
                  "   FROM systables " & CrLf & _
                  "  WHERE tabname = 'systables'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Sid = CInt(DB_Dsv(Dr("current_sessionid"), 0))
            End If

            DB_DataReaderClose(Dr, Cmd)

            ' estrae il nome del client dato il numero di sessione corrente

            If Client_Count_Type = "H" Then
                Sql = " SELECT hostname AS client_name " & CrLf & _
                      "   FROM sysmaster:syssessions " & CrLf & _
                      "  WHERE sid = " & Sid & CrLf
            Else
                Sql = " SELECT tty AS client_name " & CrLf & _
                      "   FROM sysmaster:syssessions " & CrLf & _
                      "  WHERE sid = " & Sid & CrLf
            End If

            Client_Name1 = ""

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Client_Name1 = LCase(Trim(CStr(DB_Dsv(Dr("client_name"), ""))))
            End If

            DB_DataReaderClose(Dr, Cmd)

            ' conta il numero di sessioni per il client corrente

            If Client_Count_Type = "H" Then
                Sql = " SELECT count(*) AS contatore " & CrLf & _
                      "   FROM sysmaster:syssessions " & CrLf & _
                      "  WHERE lower(trim(hostname)) = '" & Client_Name1 & "'" & CrLf
            Else
                Sql = " SELECT count(*) AS contatore " & CrLf & _
                      "   FROM sysmaster:syssessions " & CrLf & _
                      "  WHERE lower(trim(tty)) = '" & Client_Name1 & "'" & CrLf
            End If

            Nr_Ses2 = 0

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Nr_Ses2 = CInt(DB_Dsv(Dr("contatore"), 0))
            End If

            DB_DataReaderClose(Dr, Cmd)

            ' controlla il numero di sessioni in uso

            If Nr_Ses2 > Nr_Ses1 Then
                DB_CheckClientSes = False
                Exit Function
            End If

            ' OK. Autorizzazione concessa.

            DB_CheckClientSes = True

            Exit Function

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Verifica se l'utente possiede la licenza d'uso dell'applicazione
    '
    Public Function DB_CheckModuleLic(ByVal Menu_Id As String) As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_CheckModuleLic = False

        Try

            If DB_FieldExists("erglicmod", "menu_id") = False Then
                DB_CheckModuleLic = True
                Exit Function
            End If

            Sql = " SELECT menu_id, flag_licensed " & CrLf & _
                  "   FROM erglicmod " & CrLf & _
                  "  WHERE menu_id = '" & Menu_Id & "'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                If RTrim(CStr(DB_Dsv(Dr("flag_licensed"), ""))) = "S" Then
                    DB_CheckModuleLic = True
                Else
                    DB_CheckModuleLic = False
                End If
            Else
                DB_CheckModuleLic = True
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Verifica l'integrità referenziale; cerca se esistono dei record nelle
    ' tabelle esterne; se ve ne sono allora ritorna false ad indicare che
    ' non è possibile eliminare il record della tabella primaria; ritorna
    ' invece true se è possibile eliminare il record della tabella primaria
    ' Questa funzione è progettata per essere usata nell'evento "cancella"
    ' delle tabelle ed anagrafiche.
    ' Per definire le relazioni tra le tabelle usare il programma INFQUERY.
    '
    Public Function DB_CheckRefInt(ByVal table1 As String, ByVal keyvalue1 As Object, Optional keyvalue2 As Object = Nothing, Optional keyvalue3 As Object = Nothing, Optional keyvalue4 As Object = Nothing, Optional keyvalue5 As Object = Nothing, Optional keyvalue6 As Object = Nothing, Optional keyvalue7 As Object = Nothing, Optional keyvalue8 As Object = Nothing, Optional keyvalue9 As Object = Nothing, Optional keyvalue10 As Object = Nothing, Optional flag_message As Object = Nothing) As Boolean

        Dim dr As DB2DataReader = Nothing
        Dim dr1 As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim cmd1 As DB2Command = Nothing

        Dim sql As String = ""
        Dim sql1 As String = ""
        Dim pri_table As String = ""
        Dim pri_field As String = ""
        Dim pri_value As String = ""
        Dim ext_table As String = ""
        Dim ext_field As String = ""
        Dim opt_field As String = ""
        Dim opt_value As String = ""
        Dim rel_condition As String = ""
        Dim vet_keyvalue() As String = {}
        Dim i As Integer
        Dim p As Integer
        Dim l As Integer
        Dim tot_rec As Integer
        Dim flag_checkrefint As Object = Nothing
        Dim p_s1 As String
        Dim p_s2 As String
        Dim des_ext_table As String
        Dim StartPos As Integer

        'per la gestione delle eccezioni
        Dim DB2Exc As DB2Exception
        Dim err_code As Integer

        DB_CheckRefInt = False

        Try

            ' verifica se si devono visualizzare i messaggi

            If flag_message Is Nothing Then
                flag_message = True
            End If

            ' controlla se ci sono tutte le condizioni per verificare l'integrità
            ' referenziale

            DB_LookUp("db_checkrefint", "server", "", flag_checkrefint)

            If flag_checkrefint <> "S" Then
                DB_CheckRefInt = True
                Exit Function
            End If

            If Field_Null(table1) Or Field_Null(keyvalue1) Then
                If flag_message Then XtraMessageBox.Show("Condizioni di verifica dell'integrità referenziale non valide.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckRefInt = False
                Exit Function
            End If

            ' imposta i parametri di ricerca della chiave primaria

            pri_table = LCase(Trim(table1))
            p = InStr(keyvalue1, "=")

            If p = 0 Then
                If flag_message Then XtraMessageBox.Show("Condizioni di verifica dell'integrità referenziale non valide.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckRefInt = False
                Exit Function
            End If

            pri_field = LCase(Trim(Mid(keyvalue1, 1, p - 1)))
            pri_value = Trim(Mid(keyvalue1, p + 1))

            If Field_Null(pri_field) Or Field_Null(pri_value) Then
                If flag_message Then XtraMessageBox.Show("Condizioni di verifica dell'integrità referenziale non valide.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckRefInt = False
                Exit Function
            End If

            ' carica in un vettore tutti i campi che compongono la chiave
            ' primaria

            ReDim vet_keyvalue(10)

            vet_keyvalue(0) = keyvalue1

            If Not keyvalue2 Is Nothing Then vet_keyvalue(1) = keyvalue2
            If Not keyvalue3 Is Nothing Then vet_keyvalue(2) = keyvalue3
            If Not keyvalue4 Is Nothing Then vet_keyvalue(3) = keyvalue4
            If Not keyvalue5 Is Nothing Then vet_keyvalue(4) = keyvalue5
            If Not keyvalue6 Is Nothing Then vet_keyvalue(5) = keyvalue6
            If Not keyvalue7 Is Nothing Then vet_keyvalue(6) = keyvalue7
            If Not keyvalue8 Is Nothing Then vet_keyvalue(7) = keyvalue8
            If Not keyvalue9 Is Nothing Then vet_keyvalue(8) = keyvalue9
            If Not keyvalue10 Is Nothing Then vet_keyvalue(9) = keyvalue10

            ' analizza tutte le tabelle esterne che sono collegate alla
            ' tabella primaria mediante il primo campo della chiave primaria;
            ' nell'analisi parte dalle tabelle con meno record fino a raggiungere
            ' quelle con più record;

            sql = "      select infrel.ext_table, infrel.ext_field, infrel.rel_condition, systables.nrows "
            sql = sql & "from   infrel, systables "
            sql = sql & "where  infrel.pri_table       = '" & pri_table & "' and "
            sql = sql & "       infrel.pri_field       = '" & pri_field & "' and "
            sql = sql & "       infrel.rel_checkrefint = 'S'                 and "
            sql = sql & "       trim(infrel.ext_table) = trim(systables.tabname) "
            sql = sql & "order by systables.nrows, infrel.ext_table, infrel.ext_field "

            DB_DataReaderClose(dr, cmd)
            cmd = DB_CommandCreate(sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(dr, cmd)

            While dr.Read

                ext_table = Trim(DB_Dsv(dr("ext_table")))
                ext_field = Trim(DB_Dsv(dr("ext_field")))
                rel_condition = Trim(DB_Dsv(dr("rel_condition")))

                ' compone l'istruzione sql di ricerca dei record nella tabella
                ' esterna che contengono il valore della chiave primaria della
                ' tabella primaria

                sql1 = "       select count(*) "
                sql1 = sql1 & "from  " & ext_table & " "
                sql1 = sql1 & "where " & ext_table & "." & ext_field & " = " & pri_value & " "

                ' imposta i valori di eventuali campi aggiuntivi della chiave primaria

                If rel_condition <> "" Then

                    For i = 0 To 9

                        If vet_keyvalue(i) <> "" Then

                            p = InStr(vet_keyvalue(i), "=")

                            If p = 0 Then
                                DB_DataReaderClose(dr, cmd)
                                If flag_message Then XtraMessageBox.Show("Condizioni di verifica dell'integrità referenziale non valide.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                                DB_CheckRefInt = False
                                Exit Function
                            End If

                            opt_field = LCase(Trim(Mid(vet_keyvalue(i), 1, p - 1)))
                            opt_value = Trim(Mid(vet_keyvalue(i), p + 1))

                            If Field_Null(opt_field) Or Field_Null(opt_value) Then
                                DB_DataReaderClose(dr, cmd)
                                If flag_message Then XtraMessageBox.Show("Condizioni di verifica dell'integrità referenziale non valide.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                                DB_CheckRefInt = False
                                Exit Function
                            End If

                            ' sostituisce il parametro tabella.campo con il valore
                            ' effettivo della chiave primaria

                            opt_field = pri_table & "." & opt_field
                            l = Len(opt_field)
                            p = 1
                            StartPos = 1

                            While (p > 0)

                                p = InStr(StartPos, rel_condition, opt_field)

                                If p > 0 Then

                                    ' estrae il carattere che precede e che segue
                                    ' il nome del campo e verifica che si tratti
                                    ' di un separatore valido

                                    If p > 1 Then
                                        p_s1 = Mid(rel_condition, p - 1, 1)
                                    Else
                                        p_s1 = ""
                                    End If

                                    p_s2 = Mid(rel_condition, p + l, 1)

                                    If (p_s1 = "" Or (InStr(" ()=,;:+-*\/|&%#@<>!?^[]{}", p_s1) > 0)) And _
                                        (p_s2 = "" Or (InStr(" ()=,;:+-*\/|&%#@<>!?^[]{}", p_s2) > 0)) Then
                                        rel_condition = Mid(rel_condition, 1, p - 1) & opt_value & Mid(rel_condition, p + l)
                                    End If

                                    StartPos = p + 1

                                End If

                            End While

                        End If

                    Next i

                End If

                ' aggiunge la condizione all'istruzione sql in fase di costruzione

                If rel_condition <> "" Then
                    sql1 = sql1 & " and (" & rel_condition & ") "
                End If

                ' verifica se ci sono dei record con il valore della chiave
                ' primaria nella tabella esterna

                tot_rec = 0

                DB_DataReaderClose(dr1, cmd1)
                cmd1 = DB_CommandCreate(sql1, DB_Conn, DB_Transaction)
                DB_DataReaderExecute(dr1, cmd1)

                If dr1.Read Then
                    tot_rec = CInt(DB_Dsv(dr1.Item(0), 0))
                End If

                DB_DataReaderClose(dr1, cmd)

er_dbcheckrefint_notable_nofield:

                ' se ci sono dei record allora l'integrità viene violata

                If tot_rec > 0 Then
                    DB_DataReaderClose(dr, cmd)

                    ' estrae il nome della tabella in questione

                    sql1 = "select field_des from infdescr where (tab_name='" & Trim(LCase(ext_table)) & "') and (field_name is null or field_name='') "

                    DB_DataReaderClose(dr1, cmd1)
                    cmd1 = DB_CommandCreate(sql1, DB_Conn, DB_Transaction)
                    DB_DataReaderExecute(dr1, cmd1)

                    If dr1.Read Then
                        des_ext_table = Trim(DB_Dsv(dr1("field_des")))
                    Else
                        des_ext_table = ""
                    End If

                    DB_DataReaderClose(dr1, cmd)

                    If flag_message = True Then
                        Beep()
                        XtraMessageBox.Show("ATTENZIONE !!!" & vbCrLf & vbCrLf & "Violazione dell'Integrità Referenziale sulla seguente Tabella:" & vbCrLf & vbCrLf & UCase(ext_table) & " - " & des_ext_table & vbCrLf & vbCrLf & "Il codice non può essere cancellato perchè in uso !", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    End If

                    DB_CheckRefInt = False
                    Exit Function

                End If

            End While

            DB_DataReaderClose(dr, cmd)

            DB_CheckRefInt = True

        Catch ex As Exception

            If TypeOf ex Is IBM.Data.DB2.DB2Exception Then

                DB_DataReaderClose(dr1, cmd)

                DB2Exc = DirectCast(ex, IBM.Data.DB2.DB2Exception)

                err_code = DB2Exc.Errors(0).NativeError

                If (err_code = -206 Or err_code = -217) Then
                    GoTo er_dbcheckrefint_notable_nofield
                End If

                If flag_message Then
                    MsgErr(ex)
                End If

                DB_DataReaderClose(dr, cmd)

                DB_CheckRefInt = False

            End If

        Finally

            DB_DataReaderClose(dr, cmd)
            DB_DataReaderClose(dr1, cmd)

        End Try

    End Function
    '
    ' Verifica se l'utente è abilitato per accedere ad Ergdis
    '
    Public Function DB_CheckUserEnabled() As Boolean
        Dim Flag_User_Disabled As String = ""

        DB_CheckUserEnabled = False

        Try

            If DB_FieldExists("usertab", "flag_user_disabled") = False Then
                DB_CheckUserEnabled = True
                Exit Function
            End If

            DB_LookUp("flag_user_disabled", "usertab", "user_id='" & DB_GetConnectionInfo("uid") & "'", flag_user_disabled)

            If Trim(flag_user_disabled) = "S" Then
                DB_CheckUserEnabled = False
            Else
                DB_CheckUserEnabled = True
            End If

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Function
    '
    ' Verifica se l'utente può eseguire l'applicazione
    '
    Public Function DB_CheckUserList(ByVal Menu_Id As String) As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim User_Id As String
        Dim User_List As String
        Dim Group_Id As String
        Dim Group_List As String
        Dim Check_Group As Boolean
        Dim k As Integer
        Dim p As Integer
        Dim l1 As Integer
        Dim l2 As Integer

        DB_CheckUserList = False

        Try

            Check_Group = DB_FieldExists("ergmen", "group_list")

            If Check_Group Then
                Sql = " SELECT user_list, group_list " & CrLf & _
                      "   FROM ergmen " & CrLf & _
                      "  WHERE menu_id = '" & Menu_Id & "'" & CrLf
            Else
                Sql = " SELECT user_list, '*' AS group_list " & CrLf & _
                      "   FROM ergmen " & CrLf & _
                      "  WHERE menu_id = '" & Menu_Id & "'" & CrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then

                User_List = Trim(CStr(DB_Dsv(Dr("user_list"), "")))
                Group_List = Trim(CStr(DB_Dsv(Dr("group_list"), "")))

                DB_DataReaderClose(Dr, Cmd)

                If User_List = "" Then User_List = "*"
                If Group_List = "" Then Group_List = "*"

                If User_List = "*" And Group_List = "*" Then
                    DB_CheckUserList = True
                    Exit Function
                End If

                ' cerca lo user name nella user list

                If User_List <> "*" Then

                    User_Id = DB_GetConnectionInfo("uid")

                    l1 = Len(User_Id)
                    l2 = Len(User_List)
                    p = 1

                    Do While p <= l2
                        k = InStr(p, User_List, User_Id)
                        If k > 0 Then
                            If (Mid(User_List, k + l1, 1) = ",") Or (k + l1 > l2) Then

                                If k = 1 Then
                                    DB_CheckUserList = True
                                    Exit Function
                                End If

                                If (Mid(User_List, k - 1, 1) = ",") Then
                                    DB_CheckUserList = True
                                    Exit Function
                                End If
                            End If
                        End If

                        k = InStr(p, User_List, ",")
                        If k > 0 Then
                            p = k + 1
                        Else
                            p = l2 + 1
                        End If
                    Loop

                End If

                ' cerca il nome del gruppo nella group list

                If Group_List <> "*" Then

                    User_Id = DB_GetConnectionInfo("uid")
                    Group_Id = DB_GetGroupUserName(User_Id)

                    l1 = Len(Group_Id)
                    l2 = Len(Group_List)
                    p = 1

                    Do While p <= l2
                        k = InStr(p, Group_List, Group_Id)
                        If k > 0 Then
                            If (Mid(Group_List, k + l1, 1) = ",") Or (k + l1 > l2) Then

                                If k = 1 Then
                                    DB_CheckUserList = True
                                    Exit Function
                                End If

                                If (Mid(Group_List, k - 1, 1) = ",") Then
                                    DB_CheckUserList = True
                                    Exit Function
                                End If
                            End If

                        End If

                        k = InStr(p, Group_List, ",")
                        If k > 0 Then
                            p = k + 1
                        Else
                            p = l2 + 1
                        End If
                    Loop

                End If

                DB_CheckUserList = False
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Verifica se è possibile modificare la password tenendo conto dei giorni minimi di validità
    '
    Public Function DB_CheckUserPwdMinDays() As Boolean
        Dim Flag_Chk_User_Pwd As Object = Nothing
        Dim Min_Days_Pwd_Valid_Server As Object = Nothing
        Dim Date_Last_Pwd_Chg As Object = Nothing
        Dim Min_Days_Pwd_Valid As Object = Nothing
        Dim Current_Date As Object = Nothing

        DB_CheckUserPwdMinDays = False

        Try

            ' ricava i parametri di controllo password a livello di server

            If DB_FieldExists("server", "flag_chk_user_pwd") = False Then
                DB_CheckUserPwdMinDays = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd, min_days_pwd_valid", "server", "", flag_chk_user_pwd, min_days_pwd_valid_server)

            If Trim(flag_chk_user_pwd) <> "S" Then
                DB_CheckUserPwdMinDays = True
                Exit Function
            End If

            ' ricava i parametri di controllo password relativi all'utente

            If DB_FieldExists("usertab", "flag_chk_user_pwd") = False Then
                DB_CheckUserPwdMinDays = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd, date_last_pwd_chg, min_days_pwd_valid", "usertab", "user_id='" & DB_GetConnectionInfo("uid") & "'", flag_chk_user_pwd, date_last_pwd_chg, min_days_pwd_valid)

            If Trim(flag_chk_user_pwd) <> "S" Then
                DB_CheckUserPwdMinDays = True
                Exit Function
            End If

            If Field_Null(min_days_pwd_valid) Then
                If Not Field_Null(min_days_pwd_valid_server) Then
                    min_days_pwd_valid = min_days_pwd_valid_server
                Else
                    min_days_pwd_valid = 0
                End If
            End If

            ' verifica se è possibile modificare la password tenendo conto dei giorni minimi di validità

            If Field_Null(date_last_pwd_chg) Or Val(min_days_pwd_valid) <= 0 Then
                DB_CheckUserPwdMinDays = True
                Exit Function
            End If

            DB_LookUp("today", "server", "", current_date)

            If (DateDiff(DateInterval.Day, DateValue(date_last_pwd_chg), DateValue(current_date))) < Val(min_days_pwd_valid) Then

                Beep()
                XtraMessageBox.Show("Attenzione!!!" & vbLf & vbLf & "Sono trascorsi meno di " & Str(Trim(min_days_pwd_valid)) & " giorni dall'ultima modifica della password." & vbLf & vbLf & "Non è pertanto possibile modificare la password." & vbLf & vbLf & "Contattare l'amministratore di sistema.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)

                DB_CheckUserPwdMinDays = False

                Exit Function
            End If

            DB_CheckUserPwdMinDays = True

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Function
    '
    ' Verifica la validità della nuova password dell'utente
    '
    Public Function DB_CheckUserPwdValidity(ByVal New_User_Pwd As String) As Boolean
        Dim Flag_Chk_User_Pwd As String
        Dim Flag_Chk_Pwd_Comp As String
        Dim Nr_Pwd_Remember As Integer
        Dim Min_Pwd_Length As Integer
        Dim Vet_User_Pwd(0 To 10) As String
        Dim Flag_Pwd_Simple As Boolean
        Dim Prev_Char_Diff As Integer
        Dim i As Integer
        Dim c As String

        DB_CheckUserPwdValidity = False

        Try

            ' controlla se la password non è vuota

            If Trim(new_user_pwd) = "" Then
                XtraMessageBox.Show("Inserire la nuova password.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckUserPwdValidity = False
                Exit Function
            End If

            ' controlla se la password è diversa da quella attuale

            If new_user_pwd = DB_GetConnectionInfo("pwd") Then
                XtraMessageBox.Show("La nuova password deve essere diversa da quella attualmente in uso.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckUserPwdValidity = False
                Exit Function
            End If

            ' estrae i parametri per il controllo delle password a livello di sistema

            flag_chk_user_pwd = "N"
            flag_chk_pwd_comp = "N"
            nr_pwd_remember = 0
            min_pwd_length = 3

            If DB_FieldExists("server", "flag_chk_user_pwd") = True Then

                DB_LookUp("flag_chk_user_pwd, flag_chk_pwd_comp, nr_pwd_remember, min_pwd_length", "server", "", flag_chk_user_pwd, flag_chk_pwd_comp, nr_pwd_remember, min_pwd_length)

                If Trim(flag_chk_user_pwd) = "" Then flag_chk_user_pwd = "N"
                If Trim(flag_chk_pwd_comp) = "" Then flag_chk_pwd_comp = "N"
                If nr_pwd_remember <= 0 Then nr_pwd_remember = 0
                If nr_pwd_remember > 10 Then nr_pwd_remember = 10
                If min_pwd_length <= 0 Then min_pwd_length = 3

                ' estrae i parametri per il controllo delle password a livello di utente

                If flag_chk_user_pwd = "S" Then

                    If DB_FieldExists("usertab", "flag_chk_user_pwd") Then

                        DB_LookUp("flag_chk_user_pwd, last_pwd_used1, last_pwd_used2, last_pwd_used3, last_pwd_used4, last_pwd_used5, last_pwd_used6, last_pwd_used7, last_pwd_used8, last_pwd_used9, last_pwd_used10", "usertab", "user_id='" & DB_GetConnectionInfo("uid") & "'", flag_chk_user_pwd, vet_user_pwd(1), vet_user_pwd(2), vet_user_pwd(3), vet_user_pwd(4), vet_user_pwd(5), vet_user_pwd(6), vet_user_pwd(7), vet_user_pwd(8), vet_user_pwd(9), vet_user_pwd(10))

                        If Trim(flag_chk_user_pwd) = "" Then flag_chk_user_pwd = "N"

                    End If

                End If

            End If

            ' controlla la lunghezza minima della password

            If Len(new_user_pwd) < min_pwd_length Then
                XtraMessageBox.Show("La nuova password deve essere lunga almeno " & Trim(Str(min_pwd_length)) & " caratteri.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckUserPwdValidity = False
                Exit Function
            End If

            ' controlla se la password inizia con una lettera

            c = UCase(Mid(new_user_pwd, 1, 1))

            If InStr("0123456789", c) > 0 Then
                XtraMessageBox.Show("La nuova password deve iniziare con una lettera.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                DB_CheckUserPwdValidity = False
                Exit Function
            End If

            ' controlla se la password contiene solo lettere e numeri

            For i = 1 To Len(new_user_pwd)

                c = UCase(Mid(new_user_pwd, i, 1))

                If InStr("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", c) <= 0 Then
                    XtraMessageBox.Show("La nuova password deve contenere solo lettere e numeri.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    DB_CheckUserPwdValidity = False
                    Exit Function
                End If

            Next i

            ' controlla la complessità della password

            If (flag_chk_user_pwd = "S") And (flag_chk_pwd_comp = "S") Then

                ' controlla se la password è un nome tra quelli spesso usati (non tiene conto del case sensitive)

                If InStr(1, ",ergon,ergdis,erg,informix,root,windows,linux,aix,utente,password,database,login,client,server," & DB_GetConnectionInfo("db") & "," & DB_GetConnectionInfo("uid") & "," & DB_GetClientName() & ",", "," & new_user_pwd & ",", vbTextCompare) >= 1 Then
                    XtraMessageBox.Show("La password è troppo semplice e vulnerabile." & vbLf & vbLf & "Usare una password più complessa.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    DB_CheckUserPwdValidity = False
                    Exit Function
                End If

                ' controlla se la password contiene sempre lo stesso carattere

                If Len(new_user_pwd) >= 2 Then

                    flag_pwd_simple = True

                    For i = 2 To Len(new_user_pwd)

                        If Mid(new_user_pwd, i - 1, 1) <> Mid(new_user_pwd, i, 1) Then
                            flag_pwd_simple = False
                            Exit For
                        End If

                    Next i

                    If flag_pwd_simple = True Then
                        XtraMessageBox.Show("La password è troppo semplice e vulnerabile." & vbLf & vbLf & "Usare una password più complessa.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        DB_CheckUserPwdValidity = False
                        Exit Function
                    End If

                End If

                ' controlla se i caratteri della password sono in una sequenza numerica semplice

                If Len(new_user_pwd) >= 3 Then

                    flag_pwd_simple = True

                    prev_char_diff = 0

                    For i = 2 To Len(new_user_pwd)

                        If i = 2 Then
                            prev_char_diff = (Asc(Mid(new_user_pwd, i, 1)) - Asc(Mid(new_user_pwd, i - 1, 1)))
                        Else
                            If prev_char_diff <> (Asc(Mid(new_user_pwd, i, 1)) - Asc(Mid(new_user_pwd, i - 1, 1))) Then
                                flag_pwd_simple = False
                                Exit For
                            End If
                        End If

                    Next i

                    If flag_pwd_simple = True Then
                        XtraMessageBox.Show("La password è troppo semplice e vulnerabile." & vbLf & vbLf & "Usare una password più complessa.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        DB_CheckUserPwdValidity = False
                        Exit Function
                    End If

                End If

            End If

            ' controlla se la password è tra quelle già usate

            If (flag_chk_user_pwd = "S") And (nr_pwd_remember > 0) Then

                For i = 1 To nr_pwd_remember

                    ' le password memorizzate vengono decriptate e confrontate con la nuova password

                    If DB_DecryptUserPwd(vet_user_pwd(i)) = new_user_pwd Then
                        XtraMessageBox.Show("La password è già stata usata in precedenza.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        DB_CheckUserPwdValidity = False
                        Exit Function
                    End If

                Next i

            End If

            DB_CheckUserPwdValidity = True

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Function
    '
    ' Verifica se l'utente può modificare i dati
    '
    Public Function DB_CheckWriteList(ByVal Menu_Id As String) As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim User_Id As String
        Dim Write_List As String
        Dim Group_Id As String
        Dim Group_Write_List As String
        Dim Check_Group As Boolean
        Dim k As Integer
        Dim p As Integer
        Dim l1 As Integer
        Dim l2 As Integer

        DB_CheckWriteList = False

        Try

            Check_Group = DB_FieldExists("ergmen", "group_write_list")

            If Check_Group Then
                Sql = " SELECT write_list , group_write_list " & CrLf & _
                      "   FROM ergmen " & CrLf & _
                      "  WHERE menu_id = '" & Menu_Id & "'" & CrLf
            Else
                Sql = " SELECT write_list , '*' AS group_write_list " & CrLf & _
                      "   FROM ergmen " & CrLf & _
                      "  WHERE menu_id = '" & Menu_Id & "'" & CrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Write_List = Trim(CStr(DB_Dsv(Dr("write_list"), "")))
                Group_Write_List = Trim(CStr(DB_Dsv(Dr("group_write_list"), "")))

                DB_DataReaderClose(Dr, Cmd)

                If Write_List = "" Then Write_List = "*"
                If Group_Write_List = "" Then Group_Write_List = "*"

                If Write_List = "*" And Group_Write_List = "*" Then
                    DB_CheckWriteList = True
                    Exit Function
                End If

                ' cerca lo user name nella write list

                If Write_List <> "*" Then

                    User_Id = DB_GetConnectionInfo("uid")

                    l1 = Len(User_Id)
                    l2 = Len(Write_List)
                    p = 1

                    Do While p <= l2
                        k = InStr(p, Write_List, User_Id)
                        If k > 0 Then
                            If (Mid(Write_List, k + l1, 1) = ",") Or (k + l1 > l2) Then

                                If k = 1 Then
                                    DB_CheckWriteList = True
                                    Exit Function
                                End If

                                If (Mid(Write_List, k - 1, 1) = ",") Then
                                    DB_CheckWriteList = True
                                    Exit Function
                                End If
                            End If
                        End If

                        k = InStr(p, Write_List, ",")
                        If k > 0 Then
                            p = k + 1
                        Else
                            p = l2 + 1
                        End If
                    Loop

                End If

                ' cerca il nome del gruppo nella group write list

                If Group_Write_List <> "*" Then

                    User_Id = DB_GetConnectionInfo("uid")
                    Group_Id = DB_GetGroupUserName(User_Id)

                    l1 = Len(Group_Id)
                    l2 = Len(Group_Write_List)
                    p = 1

                    Do While p <= l2
                        k = InStr(p, Group_Write_List, Group_Id)
                        If k > 0 Then
                            If (Mid(Group_Write_List, k + l1, 1) = ",") Or (k + l1 > l2) Then

                                If k = 1 Then
                                    DB_CheckWriteList = True
                                    Exit Function
                                End If

                                If (Mid(Group_Write_List, k - 1, 1) = ",") Then
                                    DB_CheckWriteList = True
                                    Exit Function
                                End If
                            End If

                        End If

                        k = InStr(p, Group_Write_List, ",")
                        If k > 0 Then
                            p = k + 1
                        Else
                            p = l2 + 1
                        End If
                    Loop

                End If

                DB_CheckWriteList = False
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function

    '
    ' Chiude un comando
    '
    Public Sub DB_CommandClose(ByRef Cmd As DB2Command)

        Try
            If Not Cmd Is Nothing Then
                Cmd.Dispose()
                Cmd = Nothing
            End If
        Catch ex As Exception
        End Try

    End Sub
    '
    ' Creazione di un comando impostando i parametri necessari
    '
    Public Function DB_CommandCreate(ByVal Sql As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing, Optional ByVal CommandTimeout As Integer = 0) As DB2Command
        Dim Cmd As DB2Command = Nothing

        DB_GetPrimaryDbObject(Connection, Transaction)

        Cmd = New DB2Command(Sql, Connection, Transaction)
        Cmd.CommandTimeout = CommandTimeout

        DB_CommandCreate = Cmd

    End Function
    '
    ' Esegue un comando
    '
    Public Function DB_CommandExecute(ByRef Cmd As DB2Command, Optional ByVal Transaction As DB2Transaction = Nothing, Optional ByVal CommandTimeout As Integer = 0) As Integer

        DB_CommandExecute = -1

        If Transaction Is Nothing AndAlso Not DB_Transaction Is Nothing Then

            If DB_Transaction.Connection Is Cmd.Connection Then

                Transaction = DB_Transaction

            End If

        End If

        Cmd.Transaction = Transaction
        Cmd.CommandTimeout = CommandTimeout

        DB_CommandExecute = Cmd.ExecuteNonQuery()

    End Function
    '
    ' Resetta i parametri di comando
    '
    Public Sub DB_CommandParametersReset(ByRef Cmd As DB2Command, Optional ByVal Connection As DB2Connection = Nothing)
        Dim i As Integer

        If Not Connection Is Nothing Then
            Cmd.Connection = Connection
        End If

        For i = 0 To Cmd.Parameters.Count - 1
            Cmd.Parameters.Item(i).Value = DBNull.Value
        Next

    End Sub
    '
    ' Esegue il commit della transazione ( funzione normalmente utilizzata nei programmi )
    '
    Public Sub DB_CommitTrans()

        If Not DB_Transaction Is Nothing Then
            DB_Transaction.Commit()
            DB_Transaction.Dispose()
            DB_Transaction = Nothing
        End If

    End Sub
    '
    ' Esegue il commit della transazione  ( funzione da utilizzare se si sta gestendo una transazione che non è quella primaria )
    '
    Public Sub DB_CommitTrans(ByRef Transaction As DB2Transaction)

        If Not Transaction Is Nothing Then
            Transaction.Commit()
            Transaction.Dispose()
            Transaction = Nothing
        End If

    End Sub
    '
    ' Crea la stringa con la password di licenza dei moduli di Ergdis
    '
    Public Function DB_CreateLicModPwd() As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim MaskPwd As String
        Dim MaskPwd2 As String
        Dim LicModPwd As String = ""
        Dim c1 As String
        Dim c2 As String
        Dim c3 As String
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim l As Integer

        DB_CreateLicModPwd = ""

        Try

            Sql = " SELECT row_id , module_id , menu_id , flag_licensed " & CrLf & _
                  "   FROM erglicmod " & CrLf & _
                  " ORDER BY row_id " & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            MaskPwd = ""
            MaskPwd2 = ""

            Do While Dr.Read

                MaskPwd = MaskPwd & UCase( _
                                    Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))) & _
                                    Trim(Str(DB_Dsv(Dr("row_id"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("module_id"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("menu_id"), ""))) & _
                                    Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))))

                MaskPwd2 = MaskPwd2 & UCase(Trim(CStr(DB_Dsv(Dr("flag_licensed"), ""))))

            Loop

            DB_DataReaderClose(Dr, Cmd)

            If MaskPwd = "" Then
                DB_CreateLicModPwd = ""
                Exit Function
            End If

            MaskPwd = MaskPwd & MaskPwd2 & UCase(Trim(DB_GetConnectionInfo("db")))

            Do While Len(MaskPwd) < 160
                MaskPwd = MaskPwd & MaskPwd
            Loop

            LicModPwd = LicModPwd.PadLeft(40, CChar("0"))

            l = Len(MaskPwd)
            j = 0

            For i = 1 To l

                j = j + 1
                If j > 40 Then j = 1

                c1 = Mid(MaskPwd, i, 1)
                c2 = Mid(LicModPwd, j, 1)

                k = Asc(c1) + Asc(c2) + j
                k = k Mod 36

                If k < 10 Then
                    c3 = Chr(48 + k)
                Else
                    c3 = Chr(55 + k)
                End If

                Mid(LicModPwd, j, 1) = c3

            Next i

            DB_CreateLicModPwd = LicModPwd

            Exit Function

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Crea la stringa con la password di licenza di Ergdis
    '
    Public Function DB_CreateLicPwd(ByVal Nr_Lic As Integer, ByVal DbName As String) As String
        Dim i As Integer
        Dim l As Integer
        Dim s As String
        Dim s1 As String
        Dim s2 As String
        Dim k As Integer
        Dim k1 As Integer

        DB_CreateLicPwd = ""

        l = Len(DbName)

        s = ""

        s1 = Format(Nr_Lic, "0000")
        k = CInt(Mid(s1, 1, 1)) * 3 + CInt(Mid(s1, 2, 1)) * 5 + CInt(Mid(s1, 3, 1)) * 7 + CInt(Mid(s1, 4, 1))

        For i = l To 1 Step -1

            Select Case i
                Case 1 : k1 = 1
                Case 2 : k1 = 6
                Case 3 : k1 = 1
                Case 5 : k1 = 8
                Case 6 : k1 = 3
                Case 7 : k1 = 4
                Case 8 : k1 = 7
                Case 9 : k1 = 1
                Case Else
                    k1 = k
            End Select

            s = s & Right(Format(Asc(Mid(DbName, i, 1)) + k + k1 + i, "00000000"), 1)

        Next i

        l = Len(s1)

        s1 = ""

        For i = 1 To l + 1 Step 2
            s1 = s1 & Mid(s, i, 1)
        Next i

        For i = 2 To l + 1 Step 2
            s1 = s1 & Mid(s, i, 1)
        Next i

        For i = 1 To l
            s1 = s1 & Mid(s, i, 1)
        Next i

        s2 = s1

        s1 = ""

        For i = 1 To 4
            s1 = s1 & Chr(Asc("A") + CInt(Mid(s2, i, 1)))
        Next i

        DB_CreateLicPwd = Mid(s1, 1, 3) & "#" & Mid(s1, 4, 1) & Mid(s2, 1, 6)

    End Function
    '
    ' Elimina un oggetto command builder
    '
    Public Sub DB_CommandBuilderClose(ByRef Cb As DB2CommandBuilder)

        Try
            If Not Cb Is Nothing Then
                Cb.Dispose()
                Cb = Nothing
            End If

        Catch ex As Exception
        End Try

    End Sub
    '
    ' Chiude un dataadapter
    '
    Public Sub DB_DataAdapterClose(ByRef Da As DB2DataAdapter, Optional ByRef Cmd As DB2Command = Nothing)

        Try
            If Not Da Is Nothing Then
                Da.Dispose()
                Da = Nothing
            End If

            If Not Cmd Is Nothing Then
                DB_CommandClose(Cmd)
            End If

        Catch ex As Exception
        End Try

    End Sub
    '
    ' Genera i comandi insert / update / delete di un dataadapter; questi comandi sono analoghi a quelli generati dall'oggetto commandbuilder;
    '
    Public Sub DB_DataAdapterBuildCommands(ByRef da As DB2DataAdapter, ByVal table_name As String, ByVal key_columns As String, ByVal data_adapter_type As DB2DataAdapterType, Optional ByRef Connection As DB2Connection = Nothing, Optional ByRef Transaction As DB2Transaction = Nothing, Optional ByVal serial_column As String = "")
        Dim dr As DB2DataReader
        Dim dt As DataTable
        Dim sql As String
        Dim row As Integer
        Dim column_name As String
        Dim column_allowdbnull As Boolean
        Dim param As DB2Parameter
        Dim nr_param As Integer
        Dim insert_columns As String
        Dim insert_values As String
        Dim update_columns As String
        Dim update_conditions As String
        Dim delete_conditions As String

        ' verifica se ci sono le condizioni per creare i comandi di insert / update / delete

        If data_adapter_type = DB2DataAdapterType.ReadOnly Then
            Exit Sub
        End If

        If Trim(table_name) = "" Then
            Exit Sub
        End If

        If (Trim(key_columns) = "") And (data_adapter_type = DB2DataAdapterType.UseOnlyKeyColumns) Then
            Exit Sub
        End If

        DB_GetPrimaryDbObject(Connection, Transaction)

        ' ricava il nome e la struttura della tabella

        dr = da.SelectCommand.ExecuteReader(CommandBehavior.SchemaOnly)
        dt = dr.GetSchemaTable
        dr.Close()
        dr.Dispose()
        dr = Nothing

        ' toglie eventuali spazi superflui nel nome della tabella e dei campi chiave

        table_name = Replace(table_name, " ", "")
        key_columns = Replace(key_columns, " ", "")

        ' crea l'elenco dei campi da inserire/aggiornare e le condizioni di aggiornamento/cancellazione

        insert_columns = ""
        insert_values = ""

        update_columns = ""
        update_conditions = ""

        delete_conditions = ""

        For row = 0 To dt.Rows.Count - 1

            column_name = dt.Rows(row).Item("columnname")
            column_allowdbnull = dt.Rows(row).Item("allowdbnull")

            If insert_values = "" Then
                insert_columns = column_name
                insert_values = "?"
            Else
                insert_columns = insert_columns & "," & column_name
                insert_values = insert_values & ",?"
            End If

            '
            'Non è possibile fare update nei campi serial
            '
            If column_name <> serial_column Then
                If update_columns = "" Then
                    update_columns = column_name & "=?"
                Else
                    update_columns = update_columns & "," & column_name & "=?"
                End If
            End If

            If ((InStr("," & key_columns & ",", "," & column_name & ",", CompareMethod.Text) > 0) And (data_adapter_type = DB2DataAdapterType.UseOnlyKeyColumns)) Or _
                (data_adapter_type = DB2DataAdapterType.Optimistic) Then

                If update_conditions = "" Then
                    If column_allowdbnull = True Then
                        update_conditions = "((sysmaster:informix.dotnet_isnull(?)=1 and " & column_name & " is null) or (" & column_name & "=?))"
                    Else
                        update_conditions = "(" & column_name & "=?)"
                    End If
                Else
                    If column_allowdbnull = True Then
                        update_conditions = update_conditions & " and " & "((sysmaster:informix.dotnet_isnull(?)=1 and " & column_name & " is null) or (" & column_name & "=?))"
                    Else
                        update_conditions = update_conditions & " and " & "(" & column_name & "=?)"
                    End If
                End If

            End If

        Next

        delete_conditions = update_conditions

        ' crea il comando insert con i relativi parametri

        sql = "insert into " & table_name & " (" & insert_columns & ") values (" & insert_values & ")"
        da.InsertCommand = DB_CommandCreate(sql, Connection, Transaction)

        nr_param = 0

        For row = 0 To dt.Rows.Count - 1
            nr_param = nr_param + 1
            param = New DB2Parameter
            param.ParameterName = "@p" & Trim(CStr(nr_param))
            param.SourceColumn = dt.Rows(row).Item("columnname")
            param.DB2Type = dt.Rows(row).Item("providertype")
            param.Size = dt.Rows(row).Item("columnsize")
            param.SourceVersion = DataRowVersion.Current
            da.InsertCommand.Parameters.Add(param)
        Next

        ' crea il comando update con i relativi parametri

        sql = "update " & table_name & " set " & update_columns & " where " & update_conditions
        da.UpdateCommand = DB_CommandCreate(sql, Connection, Transaction)

        nr_param = 0

        For row = 0 To dt.Rows.Count - 1

            '
            'Non è possibile fare update nei campi serial
            '
            If dt.Rows(row).Item("columnname") <> serial_column Then
                nr_param = nr_param + 1
                param = New DB2Parameter
                param.ParameterName = "@p" & Trim(CStr(nr_param))
                param.SourceColumn = dt.Rows(row).Item("columnname")
                param.DB2Type = dt.Rows(row).Item("providertype")
                param.Size = dt.Rows(row).Item("columnsize")
                param.SourceVersion = DataRowVersion.Current
                da.UpdateCommand.Parameters.Add(param)
            End If

        Next

        For row = 0 To dt.Rows.Count - 1

            If ((InStr("," & key_columns & ",", "," & dt.Rows(row).Item("columnname") & ",", CompareMethod.Text) > 0) And (data_adapter_type = DB2DataAdapterType.UseOnlyKeyColumns)) Or _
                (data_adapter_type = DB2DataAdapterType.Optimistic) Then

                nr_param = nr_param + 1
                param = New DB2Parameter
                param.ParameterName = "@p" & Trim(CStr(nr_param))
                param.SourceColumn = dt.Rows(row).Item("columnname")
                param.DB2Type = dt.Rows(row).Item("providertype")
                param.Size = dt.Rows(row).Item("columnsize")
                param.SourceVersion = DataRowVersion.Original
                da.UpdateCommand.Parameters.Add(param)

                If dt.Rows(row).Item("allowdbnull") = True Then
                    nr_param = nr_param + 1
                    param = New DB2Parameter
                    param.ParameterName = "@p" & Trim(CStr(nr_param))
                    param.SourceColumn = dt.Rows(row).Item("columnname")
                    param.DB2Type = dt.Rows(row).Item("providertype")
                    param.Size = dt.Rows(row).Item("columnsize")
                    param.SourceVersion = DataRowVersion.Original
                    da.UpdateCommand.Parameters.Add(param)
                End If

            End If

        Next

        ' crea il comando delete con i relativi parametri

        sql = "delete from " & table_name & " where " & delete_conditions
        da.DeleteCommand = DB_CommandCreate(sql, Connection, Transaction)

        nr_param = 0

        For row = 0 To dt.Rows.Count - 1

            If ((InStr("," & key_columns & ",", "," & dt.Rows(row).Item("columnname") & ",", CompareMethod.Text) > 0) And (data_adapter_type = DB2DataAdapterType.UseOnlyKeyColumns)) Or _
                (data_adapter_type = DB2DataAdapterType.Optimistic) Then

                nr_param = nr_param + 1
                param = New DB2Parameter
                param.ParameterName = "@p" & Trim(CStr(nr_param))
                param.SourceColumn = dt.Rows(row).Item("columnname")
                param.DB2Type = dt.Rows(row).Item("providertype")
                param.Size = dt.Rows(row).Item("columnsize")
                param.SourceVersion = DataRowVersion.Original
                da.DeleteCommand.Parameters.Add(param)

                If dt.Rows(row).Item("allowdbnull") = True Then
                    nr_param = nr_param + 1
                    param = New DB2Parameter
                    param.ParameterName = "@p" & Trim(CStr(nr_param))
                    param.SourceColumn = dt.Rows(row).Item("columnname")
                    param.DB2Type = dt.Rows(row).Item("providertype")
                    param.Size = dt.Rows(row).Item("columnsize")
                    param.SourceVersion = DataRowVersion.Original
                    da.DeleteCommand.Parameters.Add(param)
                End If

            End If

        Next

        dt.Dispose()
        dt = Nothing

    End Sub
    '
    ' Apre un dataadapter usando l'istruzione SQL passata come parametro
    '
    Public Sub DB_DataAdapterOpen(ByRef da As DB2DataAdapter, ByVal sql As String, Optional ByVal table_name As String = "", Optional ByVal key_columns As String = "", Optional ByVal data_adapter_type As DB2DataAdapterType = DB2DataAdapterType.ReadOnly, Optional ByRef Connection As DB2Connection = Nothing, Optional ByRef Transaction As DB2Transaction = Nothing, Optional ByVal serial_column As String = "", Optional ByVal CommandTimeout As Integer = 0)

        DB_GetPrimaryDbObject(Connection, Transaction)

        da = New DB2DataAdapter(sql, Connection)
        da.SelectCommand.Transaction = Transaction
        da.SelectCommand.CommandTimeout = CommandTimeout

        If ((data_adapter_type = DB2DataAdapterType.UseOnlyKeyColumns) And (Trim(table_name) <> "") And (Trim(key_columns) <> "")) Or _
           ((data_adapter_type = DB2DataAdapterType.Optimistic) And (Trim(table_name) <> "")) Then

            DB_DataAdapterBuildCommands(da, table_name, key_columns, data_adapter_type, Connection, Transaction, serial_column)

        End If

    End Sub

    '
    ' Esegue un datareader
    '
    Public Function DB_DataReaderExecute(ByRef Dr As DB2DataReader, ByRef Cmd As DB2Command, Optional ByVal Transaction As DB2Transaction = Nothing, Optional ByVal CommandTimeout As Integer = 0) As Integer

        DB_DataReaderExecute = -1

        If Transaction Is Nothing AndAlso Not DB_Transaction Is Nothing Then

            If DB_Transaction.Connection Is Cmd.Connection Then

                Transaction = DB_Transaction

            End If

        End If

        Cmd.Transaction = Transaction
        Cmd.CommandTimeout = CommandTimeout

        Dr = Cmd.ExecuteReader

    End Function

    '
    ' Chiude ed elimina un datareader
    '
    Public Sub DB_DataReaderClose(ByRef Dr As DB2DataReader, Optional ByRef Cmd As DB2Command = Nothing)

        Try
            If Not Dr Is Nothing Then
                Dr.Close()
                Dr.Dispose()
                Dr = Nothing
            End If

            If Not Cmd Is Nothing Then
                DB_CommandClose(Cmd)
            End If

        Catch ex As Exception
        End Try

    End Sub
    '
    ' Verifica se un datareader contiene un campo
    '
    Public Function DB_DataReaderHasField(ByRef Dr As DB2DataReader, ByVal Field_Name As String) As Boolean

        DB_DataReaderHasField = False

        Try
            If Dr.GetOrdinal(Field_Name) >= 0 Then
                DB_DataReaderHasField = True
            End If
        Catch ex As Exception

        End Try

    End Function
    '
    ' Elimina un oggetto dataset togliendo anche tutte le relazioni esistenti tra le tabelle che lo compongono
    '
    Public Sub DB_DataSetClose(ByRef Ds As DataSet)

        Try
            If Not Ds Is Nothing Then

                ' rimuove prima tutte le relazioni tra tabelle

                Dim Drel As DataRelation
                Dim Drel_Name As String
                Dim Rel As Integer
                Dim Rel_Count As Integer

                Rel_Count = Ds.Relations.Count

                For Rel = (Rel_Count - 1) To 0 Step -1

                    Drel = Ds.Relations(Rel)

                    If Ds.Relations.CanRemove(Drel) Then

                        Drel_Name = Drel.RelationName

                        ' rimuove il vincolo di chiave esterna dalla tabella figlia

                        If Drel.ChildTable.Constraints.Contains(Drel_Name) Then
                            Drel.ChildTable.Constraints.Remove(Drel_Name)
                        End If

                        ' rimuove la relazione vera e propria

                        Ds.Relations.Remove(Drel)

                    End If

                Next

                ' elimina dall'insieme tutte le tabelle che compongono il dataset;
                ' da notare che comunque le singole tabelle non vengono eliminate;

                Ds.Tables.Clear()

                ' elimina il dataset

                Ds.Dispose()
                Ds = Nothing

            End If

        Catch ex As Exception

        End Try

    End Sub
    '
    ' Elimina un oggetto datatable
    '
    Public Sub DB_DataTableClose(ByRef Dt As DataTable)

        Try
            If Not Dt Is Nothing Then
                Dt.Dispose()
                Dt = Nothing
            End If

        Catch ex As Exception

        End Try

    End Sub
    '
    ' Data una password criptata con uno speciale algoritmo ritorna la corrispondente versione decriptata;
    ' la password originale contiene solo lettere e numeri e non può essere più lunga di 32 caratteri;
    '
    Public Function DB_DecryptUserPwd(ByVal Encrypted_User_Pwd As String) As String
        Dim Special_String1 As String
        Dim Special_String2 As String
        Dim Special_String3 As String
        Dim User_Pwd As String
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim l As Integer
        Dim m As Integer
        Dim c As String

        If Trim(encrypted_user_pwd) = "" Then
            DB_DecryptUserPwd = ""
            Exit Function
        End If

        special_string1 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        special_string2 = "Jx9afZvMgl0SF2UH4eWDzA6OcYCwikBbpTmV5IPdGos1EqrQR8LyXnN7thuK3j"
        special_string3 = Trim(Len(encrypted_user_pwd)) & "32479135842469135852459135862449135832429135882419135892409135"

        l = Len(encrypted_user_pwd)
        k = Len(special_string2)

        user_pwd = ""

        For i = 1 To l

            m = Val(Mid(special_string3, i, 1))

            special_string2 = Mid(special_string2, k - i - m + 1, k) & Mid(special_string2, 1, k - i - m)

        Next i

        For i = 1 To l

            c = Mid(encrypted_user_pwd, i, 1)

            j = InStr(special_string2, c)

            If j > 0 Then
                c = Mid(special_string1, j, 1)
            End If

            user_pwd = c & user_pwd

            If i < l Then

                special_string2 = Mid(special_string2, l - i + 1 + m + 1, k) & Mid(special_string2, 1, l - i + m + 1)

                m = Val(Mid(special_string3, l - i, 1))

            End If

        Next i

        DB_DecryptUserPwd = user_pwd

    End Function
    '
    ' Copia su una form tutti i campi di un datareader in base alla proprietà datafield
    '
    Public Sub DB_DrToForm(ByRef Dr As DB2DataReader, ByRef Form1 As Form)
        Dim Campo As String
        Dim c As Object

        For Each c In Control_GetChild(Form1)
            If Field_IsDataAware(c) Then

                Campo = Field_GetDatafield(c)

                If Campo <> "" Then

                    If TypeOf c Is DevExpress.XtraEditors.TimeEdit Then

                        If Not IsDBNull(Dr(Campo)) Then
                            c.editvalue = Dr(Campo).ToString
                        Else
                            c.editvalue = Nothing
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.DateEdit Then

                        If Not IsDBNull(Dr(Campo)) Then
                            c.editvalue = CDate(Dr(Campo))
                        Else
                            c.editvalue = Nothing
                        End If


                    ElseIf TypeOf c Is DevExpress.XtraEditors.CheckEdit Then

                        If RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = "" Then
                            c.CheckState = CheckState.Unchecked
                        Else

                            If Not c.Properties.ValueChecked Is Nothing AndAlso RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = c.Properties.ValueChecked.ToString Then
                                c.CheckState = CheckState.Checked
                            ElseIf RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = "S" Then
                                c.CheckState = CheckState.Checked
                            ElseIf Not c.Properties.ValueUnchecked Is Nothing AndAlso RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = c.Properties.ValueUnchecked.ToString Then
                                c.CheckState = CheckState.Unchecked
                            ElseIf RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = "N" Then
                                c.CheckState = CheckState.Unchecked
                            ElseIf Not c.Properties.ValueGrayed Is Nothing AndAlso RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = c.Properties.ValueGrayed.ToString Then
                                c.CheckState = CheckState.Indeterminate
                            ElseIf RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = "_" Then
                                c.CheckState = CheckState.Indeterminate
                            Else
                                c.CheckState = CheckState.Unchecked
                            End If

                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ImageComboBoxEdit Then

                        c.editvalue = CStr(DB_Dsv(Dr(Campo)))

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ButtonEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.SpinEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.TextEdit Then

                        c.editvalue = RTrim(CStr(DB_Dsv(Dr(Campo))))

                    ElseIf TypeOf c Is CheckBox Then

                        If RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = "" Then
                            c.Checked = False
                        Else

                            If RTrim(CStr(DB_Dsv(Dr(Campo), ""))) = "S" Then
                                c.Checked = True
                            Else
                                c.Checked = False
                            End If

                        End If

                    ElseIf TypeOf c Is Label Or _
                           TypeOf c Is TextBox Or _
                           TypeOf c Is RichTextBox Then

                        c.Text = RTrim(CStr(DB_Dsv(Dr(Campo), "")))

                    Else

                        c.Text = RTrim(CStr(DB_Dsv(Dr(Campo), "")))

                    End If

                End If

            End If
        Next

    End Sub
    '
    ' Copia su una form tutti i campi di un datatable in base alla proprietà datafield
    '
    Public Sub DB_DtToForm(ByRef Dt As DataTable, ByRef Form1 As Form)
        Dim Campo As String
        Dim row As DataRow
        Dim c As Object

        row = Dt.Rows(0)

        For Each c In Control_GetChild(Form1)
            If Field_IsDataAware(c) Then

                Campo = Field_GetDatafield(c)

                If Campo <> "" Then

                    If TypeOf c Is DevExpress.XtraEditors.TimeEdit Then

                        If Not IsDBNull(row(Campo)) Then
                            c.editvalue = row(Campo).ToString
                        Else
                            c.editvalue = Nothing
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.DateEdit Then

                        If Not IsDBNull(row(Campo)) Then
                            c.editvalue = CDate(row(Campo))
                        Else
                            c.editvalue = Nothing
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.CheckEdit Then

                        If RTrim(CStr(DB_Dsv(row(Campo), ""))) = "" Then
                            c.CheckState = CheckState.Unchecked
                        Else

                            If Not c.Properties.ValueChecked Is Nothing AndAlso RTrim(CStr(DB_Dsv(row(Campo), ""))) = c.Properties.ValueChecked.ToString Then
                                c.CheckState = CheckState.Checked
                            ElseIf RTrim(CStr(DB_Dsv(row(Campo), ""))) = "S" Then
                                c.CheckState = CheckState.Checked
                            ElseIf Not c.Properties.ValueUnchecked Is Nothing AndAlso RTrim(CStr(DB_Dsv(row(Campo), ""))) = c.Properties.ValueUnchecked.ToString Then
                                c.CheckState = CheckState.Unchecked
                            ElseIf RTrim(CStr(DB_Dsv(row(Campo), ""))) = "N" Then
                                c.CheckState = CheckState.Unchecked
                            ElseIf Not c.Properties.ValueGrayed Is Nothing AndAlso RTrim(CStr(DB_Dsv(row(Campo), ""))) = c.Properties.ValueGrayed.ToString Then
                                c.CheckState = CheckState.Indeterminate
                            ElseIf RTrim(CStr(DB_Dsv(row(Campo), ""))) = "_" Then
                                c.CheckState = CheckState.Indeterminate
                            Else
                                c.CheckState = CheckState.Unchecked
                            End If

                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ImageComboBoxEdit Then

                        c.editvalue = RTrim(CStr(DB_Dsv(row(Campo))))

                        If c.SelectedIndex = -1 Then
                            '
                            'Nel caso non abbia letto nessun valore "valido" allora setto l'eventuale valore di default
                            '
                            c.editvalue = Field_GetDefaultValue(c)
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ButtonEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.SpinEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.TextEdit Then

                        c.editvalue = RTrim(CStr(DB_Dsv(row(Campo))))

                    ElseIf TypeOf c Is CheckBox Then

                        If RTrim(CStr(DB_Dsv(row(Campo), ""))) = "" Then
                            c.Checked = False
                        Else

                            If RTrim(CStr(DB_Dsv(row(Campo), ""))) = "S" Then
                                c.Checked = True
                            Else
                                c.Checked = False
                            End If

                        End If

                    ElseIf TypeOf c Is Label Or _
                           TypeOf c Is TextBox Or _
                           TypeOf c Is RichTextBox Then

                        c.Text = RTrim(CStr(DB_Dsv(row(Campo), "")))

                    Else

                        c.Text = RTrim(CStr(DB_Dsv(row(Campo), "")))

                    End If

                End If

            End If
        Next

    End Sub
    '
    ' Se il campo non è vuoto ritorna il valore del campo altrimenti ritorna il valore passato come secondo parametro
    ' (da notare che il nome DSV è stato scelto come abbreviazione di DataSet Value)
    '
    Public Function DB_Dsv(ByVal Db_Field As Object, Optional ByVal Null_Value As Object = Nothing) As Object

        If Db_Field Is Nothing Then
            DB_Dsv = Null_Value
        ElseIf Not IsDBNull(Db_Field) Then
            If TypeOf Db_Field Is System.TimeSpan Then
                DB_Dsv = RTrim(CStr(Db_Field.ToString))
            Else
                DB_Dsv = RTrim(CStr(Db_Field))
            End If
        Else
            DB_Dsv = Null_Value
        End If

    End Function
    '
    ' Data una password ritorna la corrispondente versione criptata con uno speciale algoritmo;
    ' la password deve contenere solo lettere e numeri e non può essere più lunga di 32 caratteri;
    '
    Public Function DB_EncryptUserPwd(ByVal User_Pwd As String) As String
        Dim Special_String1 As String
        Dim Special_String2 As String
        Dim Special_String3 As String
        Dim Encrypted_User_Pwd As String
        Dim i As Integer
        Dim j As Integer
        Dim k As Integer
        Dim l As Integer
        Dim m As Integer
        Dim c As String

        If Trim(user_pwd) = "" Then
            DB_EncryptUserPwd = ""
            Exit Function
        End If

        special_string1 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        special_string2 = "Jx9afZvMgl0SF2UH4eWDzA6OcYCwikBbpTmV5IPdGos1EqrQR8LyXnN7thuK3j"
        special_string3 = Trim(Len(user_pwd)) & "32479135842469135852459135862449135832429135882419135892409135"

        l = Len(user_pwd)
        k = Len(special_string2)

        encrypted_user_pwd = ""

        For i = 1 To l

            m = Val(Mid(special_string3, i, 1))

            special_string2 = Mid(special_string2, k - i - m + 1, k) & Mid(special_string2, 1, k - i - m)

            c = Mid(user_pwd, i, 1)

            j = InStr(special_string1, c)

            If j > 0 Then
                c = Mid(special_string2, j, 1)
            End If

            encrypted_user_pwd = c & encrypted_user_pwd

        Next i

        DB_EncryptUserPwd = encrypted_user_pwd

    End Function
    '
    ' Termina l'applicazione corrente
    '
    Public Function DB_EndApp(ByRef Form1 As Form) As Boolean
        Dim sql As String

        Try

            ' chiude tutte le form figlie della form principale

            If Not Form1 Is Nothing Then Form_CloseAllSubforms(Form1)

            ' annulla la transazione

            DB_RollbackTrans()

            If Not DB_Conn Is Nothing Then
                ' imposta nel registro dei processi client lo stato del processo uguale ad 'E' (eseguito)

                If (DB_FlagCheckTaskcli = True) Then

                    sql = " UPDATE taskcli " & CrLf & _
                          "    SET flag_result = 'E' " & CrLf & _
                          "      , end_date    = '" & DB_Sql_Date(Now) & "'" & CrLf & _
                          "      , end_time    =  " & Replace(Now.ToString("HH:mm", Globalization.CultureInfo.InvariantCulture), ":", ".") & CrLf & _
                          "  WHERE task_id     =  " & DB_TaskcliId & CrLf & _
                          "    AND flag_result = 'A' " & CrLf

                    DB_SqlExecute(sql, DB_Conn, DB_Transaction)
                End If

                ' chiude la connessione al database

                DB_Conn.Close()
                DB_Conn.Dispose()
                DB_Conn = Nothing
            End If

            DB_EndApp = True

            ' termina l'applicazione definitivamente

            Application.DoEvents()
            End

            Exit Function

        Catch ex As Exception

            MsgErr(ex)

            DB_EndApp = False

            Application.DoEvents()
            End

        End Try

    End Function
    '
    ' Ritorna true se il campo esiste nella tabella (gestisce tabelle normali, viste e sinonimi)
    '
    Public Function DB_FieldExists(ByVal TableName As String, ByVal FieldName As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing) As Boolean
        Dim Sql As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim TableID As Integer
        Dim TableType As String
        Dim SynServerName As String
        Dim SynDbName As String
        Dim SynTableName As String
        Dim SynTableID As Integer

        DB_FieldExists = False

        Try

            DB_GetPrimaryDbObject(Connection, Transaction)

            Sql = " SELECT tabid, tabtype " & CrLf & _
                  "   FROM systables " & CrLf & _
                  "  WHERE tabname = '" & Trim(TableName) & "'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            If Dr.Read Then

                TableID = CInt(DB_Dsv(Dr("tabid"), -1))
                TableType = Trim(CStr(DB_Dsv(Dr("tabtype"), "")))

                DB_DataReaderClose(Dr, Cmd)

                If (TableType = "T") Or (TableType = "V") Then

                    ' tabella normale o vista

                    ' verifica se esiste la colonna nella tabella normale o vista

                    Sql = " SELECT colname " & CrLf & _
                          "   FROM syscolumns " & CrLf & _
                          "  WHERE colname = '" & Trim(FieldName) & "'" & CrLf & _
                          "    AND tabid   = " & CStr(TableID)

                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                    DB_DataReaderExecute(Dr, Cmd, Transaction)

                    DB_FieldExists = Dr.Read

                    DB_DataReaderClose(Dr, Cmd)

                ElseIf (TableType = "S") Or (TableType = "P") Then

                    ' tabella sinonimo pubblico o privato

                    ' ricava il percorso della tabella originale

                    Sql = " SELECT servername, dbname, tabname, btabid " & CrLf & _
                          "   FROM syssyntable " & CrLf & _
                          "  WHERE tabid = " & CStr(TableID)

                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                    DB_DataReaderExecute(Dr, Cmd, Transaction)

                    If Dr.Read Then
                        SynServerName = Trim(CStr(DB_Dsv(Dr("servername"), "")))
                        SynDbName = Trim(CStr(DB_Dsv(Dr("dbname"), "")))
                        SynTableName = Trim(CStr(DB_Dsv(Dr("tabname"), "")))
                        SynTableID = CInt(DB_Dsv(Dr("btabid"), -1))
                    Else
                        SynServerName = ""
                        SynDbName = ""
                        SynTableName = ""
                        SynTableID = -1
                    End If

                    DB_DataReaderClose(Dr, Cmd)

                    ' ricava il tabid della tabella originale se questa risiede su un altro database

                    If (SynServerName <> "") Or (SynDbName <> "") Or (SynTableName <> "") Then

                        Sql = " SELECT tabid " & CrLf & _
                              "   FROM "

                        If (SynDbName <> "") Then Sql = Sql & SynDbName
                        If (SynDbName <> "") And (SynServerName <> "") Then Sql = Sql & "@" & SynServerName
                        If (SynDbName <> "") Or (SynServerName <> "") Then Sql = Sql & ":"

                        Sql = Sql & "systables " & CrLf & _
                                    "WHERE tabname = '" & SynTableName & "'"

                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                        DB_DataReaderExecute(Dr, Cmd, Transaction)

                        If Dr.Read Then
                            SynTableID = CInt(DB_Dsv(Dr("tabid"), -1))
                        Else
                            SynTableID = -1
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    End If

                    ' verifica se esiste la colonna nella tabella originale

                    Sql = " SELECT colname " & CrLf & _
                          "   FROM "

                    If (SynDbName <> "") Then Sql = Sql & SynDbName
                    If (SynDbName <> "") And (SynServerName <> "") Then Sql = Sql & "@" & SynServerName
                    If (SynDbName <> "") Or (SynServerName <> "") Then Sql = Sql & ":"

                    Sql = Sql & "syscolumns " & CrLf & _
                                "  WHERE colname = '" & Trim(FieldName) & "'" & CrLf & _
                                "    AND tabid   = " & CStr(SynTableID)

                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                    DB_DataReaderExecute(Dr, Cmd, Transaction)

                    DB_FieldExists = Dr.Read

                    DB_DataReaderClose(Dr, Cmd)

                Else
                    DB_FieldExists = False
                End If

            Else
                DB_DataReaderClose(Dr, Cmd)

                DB_FieldExists = False
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Ritorna l'elenco dei campi dataaware di una finestra
    '
    Public Function DB_FormFields(ByRef Form1 As Form) As String
        Dim c As Object
        Dim Campo As String
        Dim s As String

        s = ""

        For Each c In Control_GetChild(Form1)

            If Field_IsDataAware(c) Then

                Campo = Field_GetDatafield(c)

                If Campo <> "" Then
                    s = s & "," & Campo
                End If

            End If
        Next

        DB_FormFields = " " & Mid(s, 2) & " "

    End Function
    '
    ' Copia tutti i campi dataaware di una finestra su un datatable
    '
    Public Sub DB_FormToDt(ByRef Form1 As Form, ByRef Dt As DataTable)
        Dim Campo As String
        Dim c As Object
        Dim row As DataRow

        row = Dt.Rows(0)


        For Each c In Control_GetChild(Form1)

            If Field_IsDataAware(c) Then

                Campo = Field_GetDatafield(c)

                If Campo <> "" Then

                    If TypeOf c Is DevExpress.XtraEditors.TimeEdit Then

                        If Not Field_Null(c) Then
                            row(Campo) = Replace(c.Text, ".", ":")
                        Else
                            row(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.CheckEdit Then

                        If c.CheckState = CheckState.Checked Then
                            If Not c.Properties.ValueChecked Is Nothing AndAlso Len(c.Properties.ValueChecked.ToString) = 1 Then
                                row(Campo) = c.Properties.ValueChecked.ToString
                            Else
                                row(Campo) = "S"
                            End If
                        ElseIf Not c.Properties.ValueUnchecked Is Nothing AndAlso c.CheckState = CheckState.Unchecked Then
                            If Len(c.Properties.ValueUnchecked.ToString) = 1 Then
                                row(Campo) = c.Properties.ValueUnchecked.ToString
                            Else
                                row(Campo) = "N"
                            End If
                        ElseIf c.CheckState = CheckState.Indeterminate Then
                            If Not c.Properties.ValueGrayed Is Nothing AndAlso Len(c.Properties.ValueGrayed.ToString) = 1 Then
                                row(Campo) = c.Properties.ValueGrayed.ToString
                            Else
                                row(Campo) = "_"
                            End If
                        Else
                            row(Campo) = "N"
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.DateEdit Then
                        If Not Field_Null(c) Then
                            row(Campo) = c.Text
                        Else
                            row(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ImageComboBoxEdit Then

                        If Not Field_Null(c) Then
                            row(Campo) = c.editvalue
                        Else
                            row(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ButtonEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.SpinEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.TextEdit Then

                        If Not Field_Null(c) Then
                            row(Campo) = RTrim(Replace(c.text.ToString, Field_GetMaskSeparator(c), ""))

                            '
                            'Quando si usano le regular expression il valore .text non è
                            'formattato correttamente
                            '
                            If c.Properties.CharacterCasing = CharacterCasing.Upper Then
                                row(Campo) = UCase(row(Campo))
                            ElseIf c.Properties.CharacterCasing = CharacterCasing.Lower Then
                                row(Campo) = LCase(row(Campo))
                            End If

                        Else
                            row(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is TextBox Or _
                            TypeOf c Is Label Or _
                            TypeOf c Is RichTextBox Then

                        If Not Field_Null(c) Then
                            row(Campo) = c.Text
                        Else
                            row(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is CheckBox Then

                        If c.checked = True Then
                            row(Campo) = "S"
                        Else
                            row(Campo) = "N"
                        End If
                    End If

                End If

            End If

        Next

    End Sub
    '
    ' Copia tutti i campi dataaware di una finestra su una hash table
    '
    Public Sub DB_FormToHT(ByRef Form1 As Form, ByRef HT As Hashtable)
        Dim Campo As String
        Dim c As Object

        For Each c In Control_GetChild(Form1)

            If Field_IsDataAware(c) Then

                Campo = Field_GetDatafield(c)

                If Campo <> "" Then

                    If TypeOf c Is DevExpress.XtraEditors.TimeEdit Then

                        If Not Field_Null(c) Then
                            HT(Campo) = Replace(c.Text, ".", ":")
                        Else
                            HT(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.CheckEdit Then

                        If c.CheckState = CheckState.Checked Then
                            If Not c.Properties.ValueChecked Is Nothing AndAlso Len(c.Properties.ValueChecked.ToString) = 1 Then
                                HT(Campo) = c.Properties.ValueChecked.ToString
                            Else
                                HT(Campo) = "S"
                            End If
                        ElseIf c.CheckState = CheckState.Unchecked Then
                            If Not c.Properties.ValueUnchecked Is Nothing AndAlso Len(c.Properties.ValueUnchecked.ToString) = 1 Then
                                HT(Campo) = c.Properties.ValueUnchecked.ToString
                            Else
                                HT(Campo) = "N"
                            End If
                        ElseIf c.CheckState = CheckState.Indeterminate Then
                            If Not c.Properties.ValueGrayed Is Nothing AndAlso Len(c.Properties.ValueGrayed.ToString) = 1 Then
                                HT(Campo) = c.Properties.ValueGrayed.ToString
                            Else
                                HT(Campo) = "_"
                            End If
                        Else
                            HT(Campo) = "N"
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.DateEdit Then

                        If Not Field_Null(c) Then
                            HT(Campo) = c.text
                        Else
                            HT(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ImageComboBoxEdit Then

                        If Not Field_Null(c) Then
                            HT(Campo) = c.editvalue
                        Else
                            HT(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is DevExpress.XtraEditors.ButtonEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.SpinEdit Or _
                           TypeOf c Is DevExpress.XtraEditors.TextEdit Then

                        If Not Field_Null(c) Then
                            HT(Campo) = RTrim(Replace(c.text.ToString, Field_GetMaskSeparator(c), ""))
                        Else
                            HT(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is TextBox Or _
                           TypeOf c Is Label Or _
                           TypeOf c Is RichTextBox Then

                        If Not Field_Null(c) Then
                            HT(Campo) = c.Text
                        Else
                            HT(Campo) = DBNull.Value
                        End If

                    ElseIf TypeOf c Is CheckBox Then

                        If c.checked = True Then
                            HT(Campo) = "S"
                        Else
                            HT(Campo) = "N"
                        End If

                    End If
                End If
            End If
        Next

    End Sub
    '
    ' Ritorna il nome del client
    '
    Public Function DB_GetClientName() As String
        Dim l As Integer
        Dim s As String

        DB_GetClientName = ""

        Try

            s = My.Computer.Name

            l = Len(s)

            DB_GetClientName = UCase(Mid(s, 1, 1)) & LCase(Mid(s, 2, l - 1))

        Catch ex As Exception

        End Try

    End Function
    '
    ' Estrae i valori dei path per l'esecuzione dei programmi da un file
    ' server diverso da quello primario (è il caso di esecuzione remota)
    '
    Public Function DB_GetClientPathNetProc(ByRef Cli_Path_Net As Object, ByRef Cli_Path_Net_Std As Object, ByRef Cli_Path_Proc As Object, ByRef Cli_Path_Proc_Std As Object) As Boolean
        Dim File_In As System.IO.StreamReader = Nothing
        Dim NomeFile As String
        Dim s1 As String
        Dim p As Integer
        Dim FlagStop As Integer

        DB_GetClientPathNetProc = False

        Cli_Path_Net = ""
        Cli_Path_Net_Std = ""
        Cli_Path_Proc = ""
        Cli_Path_Proc_Std = ""

        Try

            NomeFile = App_WinPath() & "\ifxinf.def"

            If System.IO.File.Exists(NomeFile) Then

                File_In = New System.IO.StreamReader(NomeFile, System.Text.Encoding.Default)

                FlagStop = 0

                Do While File_In.Peek >= 0 And FlagStop < 4

                    s1 = File_In.ReadLine()

                    If InStr(LCase(s1), "cli_path_net=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Net = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_net_std=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Net_Std = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_proc=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Proc = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_proc_std=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Proc_Std = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                Loop

                File_StreamReaderClose(File_In)

                If FlagStop = 4 Then
                    DB_GetClientPathNetProc = True
                Else
                    Cli_Path_Net = ""
                    Cli_Path_Net_Std = ""
                    Cli_Path_Proc = ""
                    Cli_Path_Proc_Std = ""
                    DB_GetClientPathNetProc = False
                End If

            End If

        Catch ex As Exception

            File_StreamReaderClose(File_In)

        End Try

    End Function
    '
    ' Estrae i valori dei path per l'esecuzione dei programmi da un file
    ' server diverso da quello primario (è il caso di esecuzione remota);
    ' gestisce anche i percorsi di gruppo;
    '
    Public Function DB_GetClientPathNetProc2(ByRef Cli_Path_Net As Object, ByRef Cli_Path_Net_Grp As Object, ByRef Cli_Path_Net_Std As Object, ByRef Cli_Path_Proc As Object, ByRef Cli_Path_Proc_Grp As Object, ByRef Cli_Path_Proc_Std As Object) As Boolean
        Dim File_In As System.IO.StreamReader = Nothing
        Dim NomeFile As String
        Dim s1 As String
        Dim p As Integer
        Dim FlagStop As Integer

        DB_GetClientPathNetProc2 = False

        Cli_Path_Net = ""
        Cli_Path_Net_Grp = ""
        Cli_Path_Net_Std = ""

        Cli_Path_Proc = ""
        Cli_Path_Proc_Grp = ""
        Cli_Path_Proc_Std = ""

        Try

            NomeFile = App_WinPath() & "\ifxinf.def"

            If System.IO.File.Exists(NomeFile) Then

                File_In = New System.IO.StreamReader(NomeFile, System.Text.Encoding.Default)

                FlagStop = 0

                Do While File_In.Peek >= 0 And FlagStop < 6

                    s1 = File_In.ReadLine()

                    If InStr(LCase(s1), "cli_path_net=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Net = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_net_grp=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Net_Grp = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_net_std=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Net_Std = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_proc=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Proc = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_proc_grp=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Proc_Grp = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                    If InStr(LCase(s1), "cli_path_proc_std=") > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Cli_Path_Proc_Std = Mid(s1, p + 1)
                            FlagStop = FlagStop + 1
                        End If
                    End If

                Loop

                File_StreamReaderClose(File_In)

                If FlagStop >= 4 Then
                    DB_GetClientPathNetProc2 = True
                Else
                    Cli_Path_Net = ""
                    Cli_Path_Net_Grp = ""
                    Cli_Path_Net_Std = ""

                    Cli_Path_Proc = ""
                    Cli_Path_Proc_Grp = ""
                    Cli_Path_Proc_Std = ""

                    DB_GetClientPathNetProc2 = False
                End If

            End If

        Catch ex As Exception

            File_StreamReaderClose(File_In)

        End Try

    End Function
    '
    ' Ritorna il nome della della stampante di default sul client
    ' Il Ifxinf_Parameter da passare rappresenta la stringa da ricercare all'interno del file ifxinf.def
    '  CLIENTPRT=                   Per ricercare la stampante generica di default del client
    '  CLIENTPRT_<nome_funzione>    Per ricercare la stampante di default del client per una funzione / programma specifico
    ' 
    '
    Public Function DB_GetClientPrt(ByVal Ifxinf_Parameter As String) As String
        Dim Nome_Stampante As String = ""

        DB_GetClientPrt = ""

        If Trim(Ifxinf_Parameter) = "" Then
            Ifxinf_Parameter = "CLIENTPRT="
        End If

        If DB_GetIfxInfParam(Ifxinf_Parameter, Nome_Stampante) = False Then
            Nome_Stampante = ""
        End If

        DB_GetClientPrt = Getv(Nome_Stampante)

    End Function

    '
    ' Ritorna il tipoinfo richiesto dalla stringa di connessione  
    '
    ' ConnectionString_Source       Parametro opzionale per estrarre informazioni di connessione da una stringa specificata
    '
    Public Function DB_GetConnectionInfo(ByVal TipoInfo As String, Optional ByVal Flag_Remove_Domain As Boolean = True, Optional ByVal ConnectionString_Source As String = "") As String
        Dim i1 As Integer
        Dim i2 As Integer
        Dim s1 As String

        DB_GetConnectionInfo = ""

        If ConnectionString_Source = "" Then
            ConnectionString_Source = DB_ConnectionString
        End If

        Try
            Select Case UCase(TipoInfo)

                Case "DB"
                    i1 = InStr(ConnectionString_Source, "DB=", CompareMethod.Text)

                    If i1 <> 0 Then
                        i1 = i1 + 3
                    End If

                Case "UID"
                    i1 = InStr(ConnectionString_Source, "UID=", CompareMethod.Text)

                    If i1 <> 0 Then
                        i1 = i1 + 4
                    End If

                Case "PWD"
                    i1 = InStr(ConnectionString_Source, "PWD=", CompareMethod.Text)

                    If i1 <> 0 Then
                        i1 = i1 + 4
                    End If

                Case "HOST"
                    i1 = InStr(ConnectionString_Source, "HOST=", CompareMethod.Text)

                    If i1 <> 0 Then
                        i1 = i1 + 5
                    End If

                Case "PORT"
                    i1 = InStr(ConnectionString_Source, "PORT=", CompareMethod.Text)

                    If i1 <> 0 Then
                        i1 = i1 + 5
                    End If

                Case "DSN"
                    i1 = InStr(ConnectionString_Source, "DSN=", CompareMethod.Text)

                    If i1 <> 0 Then
                        i1 = i1 + 4
                    End If

            End Select

            If i1 <> 0 Then

                i2 = InStr(i1, ConnectionString_Source, ";")

                If i2 <> 0 Then
                    s1 = Trim(Mid(ConnectionString_Source, i1, i2 - i1))
                Else
                    s1 = Trim(Mid(ConnectionString_Source, i1))
                End If

                If (UCase(TipoInfo) = "UID") And Flag_Remove_Domain Then

                    i1 = InStrRev(s1, "\")

                    If i1 > 0 Then
                        s1 = Mid(s1, i1 + 1)
                    Else
                        i1 = InStr(s1, "@")

                        If i1 > 0 Then
                            s1 = Mid(s1, 1, i1 - 1)
                        End If

                    End If

                End If

                DB_GetConnectionInfo = s1

            End If

        Catch ex As Exception
        End Try

    End Function
    '
    ' Ricava la stringa di connessione di default
    '
    Public Function DB_GetDefCon() As String
        Dim File_In As System.IO.StreamReader = Nothing
        Dim NomeFile As String

        DB_GetDefCon = ""

        Try
            NomeFile = App_WinPath() & "\ifxinf.def"

            If System.IO.File.Exists(NomeFile) Then

                File_In = New System.IO.StreamReader(NomeFile, System.Text.Encoding.Default)

                If File_In.Peek >= 0 Then
                    DB_GetDefCon = File_In.ReadLine()
                End If

            End If

        Catch ex As Exception

            MsgErr(ex)

        Finally

            File_StreamReaderClose(File_In)

        End Try

    End Function
    '
    ' Ritorna il nome del gruppo di un certo utente
    '
    Public Function DB_GetGroupUserName(ByVal User_Id As String) As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_GetGroupUserName = ""

        Try

            If Trim(User_Id) = "" Then
                DB_GetGroupUserName = ""
                Exit Function
            End If

            Sql = " SELECT group_id " & CrLf & _
                  "   FROM usertab " & CrLf & _
                  "  WHERE user_id = '" & User_Id & "'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                DB_GetGroupUserName = RTrim(CStr(DB_Dsv(Dr("group_id"), "")))
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Estrae il valore di un parametro definito nel file ifxinf.def
    '
    Public Function DB_GetIfxInfParam(ByVal Ifxinf_Parameter As String, ByRef Valore As Object) As Boolean
        Dim File_In As System.IO.StreamReader = Nothing
        Dim NomeFile As String
        Dim s1 As String
        Dim p As Integer

        DB_GetIfxInfParam = False

        Ifxinf_Parameter = LCase(Trim(Ifxinf_Parameter))
        Valore = ""

        Try
            NomeFile = App_WinPath() & "\ifxinf.def"

            If System.IO.File.Exists(NomeFile) Then

                File_In = New System.IO.StreamReader(NomeFile, System.Text.Encoding.Default)

                Do While File_In.Peek >= 0
                    s1 = File_In.ReadLine()

                    If InStr(LCase(s1), Ifxinf_Parameter) > 0 Then
                        p = InStr(s1, "=")
                        If p > 0 Then
                            Valore = Mid(s1, p + 1)
                        End If
                    End If
                Loop

                File_StreamReaderClose(File_In)

                If CStr(Valore) <> "" Then
                    DB_GetIfxInfParam = True
                Else
                    DB_GetIfxInfParam = False
                End If

                Exit Function

            End If

        Catch ex As Exception

        Finally

            File_StreamReaderClose(File_In)

        End Try

        Exit Function

    End Function
    '
    ' Ritorna l'ultimo valore seriale inserito in una tabella
    '
    Public Function DB_GetLastSerialValue(Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing) As Integer
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_GetLastSerialValue = 0

        Try

            DB_GetPrimaryDbObject(Connection, Transaction)

            Sql = " SELECT dbinfo('sqlca.sqlerrd1') AS last_serial " & CrLf & _
                  "   FROM systables " & CrLf & _
                  "  WHERE tabname = 'systables' " & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            If Dr.Read Then
                DB_GetLastSerialValue = CInt(DB_Dsv(Dr("last_serial"), 0))
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Ritorna il codice di menù dell'applicazione corrente
    '
    Public Function DB_GetMenuId(Optional ByVal ParametersCount As Integer = -1) As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim App_Name As String
        Dim Parameters As String
        Dim i As Integer

        DB_GetMenuId = ""

        Try

            If ParametersCount = -1 Then
                ' Se non specificato utilizzo il parametro passato alla db_startapp
                ParametersCount = DB_MenuParametersCount
            End If

            App_Name = LCase(My.Application.Info.AssemblyName)

            Parameters = ""

            For i = 1 To ParametersCount
                If App_GetArgument(i) = "" Then Exit For

                If Parameters <> "" Then
                    Parameters = Parameters & " "
                End If
                Parameters = Parameters & App_GetArgument(i)
            Next

            If Parameters <> "" Then
                Sql = " SELECT menu_id " & CrLf & _
                      "   FROM ergmen " & CrLf & _
                      "  WHERE app_cli    = '" & App_Name & "'" & CrLf & _
                      "    AND parameters = '" & Parameters & "'" & CrLf
            Else
                Sql = " SELECT menu_id " & CrLf & _
                      "   FROM ergmen " & CrLf & _
                      "  WHERE app_cli = '" & App_Name & "'" & CrLf & _
                      "    AND (parameters IS NULL OR parameters = '') " & CrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                DB_GetMenuId = RTrim(CStr(DB_Dsv(Dr("menu_id"), "")))
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Ritorna il nome del server
    '
    Public Function DB_GetServerName() As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_GetServerName = ""

        Try

            Sql = " SELECT server_name " & CrLf & _
                  "   FROM server " & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                DB_GetServerName = RTrim(CStr(DB_Dsv(Dr("server_name"), "")))
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Ritorna il codice della stampante di default sul server
    '
    Public Function DB_GetServerPrt() As Integer
        Dim Nr_Printer As String = ""

        DB_GetServerPrt = 0

        If DB_GetIfxInfParam("SERVERPRT", Nr_Printer) = False Then
            Nr_Printer = "0"
        End If

        DB_GetServerPrt = CInt(Object_Val(Nr_Printer))

    End Function
    '
    ' Ritorna il numero della sessione corrente
    '
    Public Function DB_GetSessionId() As Integer
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_GetSessionId = 0

        Try

            Sql = " SELECT dbinfo('sessionid') AS current_sessionid " & CrLf & _
                  "   FROM systables " & CrLf & _
                  "  WHERE tabname = 'systables' " & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                DB_GetSessionId = CInt(DB_Dsv(Dr("current_sessionid"), 0))
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

        Exit Function

    End Function
    '
    ' Crea nome indice temporaneo composto dalle seguenti stringhe:
    ' "z" + nome_client(1..4) + "_" + nome_indice(1..5) + "_" + numero_random(6 cifre)
    '
    Public Function DB_GetTempIndexName(ByVal nome_indice As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing) As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim sql As String
        Dim s As String
        Dim idxn As String
        Dim i As Integer
        Dim n As Integer
        Dim ok As Boolean

        DB_GetTempIndexName = ""

        Try

            DB_GetPrimaryDbObject(Connection, Transaction)

            idxn = ""

            s = "z" & Left(LCase((DB_GetClientName()) & "xxxx"), 4) & "_" & Left(LCase(nome_indice) & "xxxxx", 5) & "_"

            For i = 1 To Len(s)
                If Mid(s, i, 1) = " " Or Mid(s, i, 1) = "-" Then
                    Mid(s, i, 1) = "_"
                End If
            Next i

            Randomize()

            ok = False

            While Not ok

                n = Int(999999 * Rnd())
                idxn = s & Format(n, "000000")

                sql = "SELECT idxname FROM sysindexes " & CrLf & _
                      "WHERE  idxname = '" & idxn & "'" & CrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                If Not Dr.Read Then
                    ok = True
                End If

                DB_DataReaderClose(Dr, Cmd)

            End While

            DB_GetTempIndexName = LCase(idxn)

        Catch ex As Exception
        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try


    End Function
    '
    ' Crea nome tabella temporanea composto dalle seguenti stringhe:
    ' "z" + nome_client(1..4) + "_" + nome_tabella(1..5) + "_" + numero_random(6 cifre)
    '
    Public Function DB_GetTempTableName(ByVal Nome_Tabella As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing) As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim s As String
        Dim tn As String
        Dim i As Integer
        Dim n As Integer
        Dim sql As String
        Dim ok As Boolean

        DB_GetTempTableName = ""

        Try

            DB_GetPrimaryDbObject(Connection, Transaction)

            tn = ""

            s = "z" & Left(LCase((DB_GetClientName()) & "xxxx"), 4) & "_" & Left(LCase(Nome_Tabella) & "xxxxx", 5) & "_"

            For i = 1 To Len(s)
                If Mid(s, i, 1) = " " Or Mid(s, i, 1) = "-" Then
                    Mid(s, i, 1) = "_"
                End If
            Next i

            Randomize()

            ok = False

            While Not ok

                n = Int(999999 * Rnd())
                tn = s & Format(n, "000000")

                sql = " SELECT tabname FROM systables " & CrLf & _
                      "  WHERE tabname = '" & tn & "'" & CrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                If Not Dr.Read Then
                    ok = True
                End If

                DB_DataReaderClose(Dr, Cmd)

            End While

            DB_GetTempTableName = LCase(tn)

            Exit Function

        Catch ex As Exception

            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Ritorna i permessi dettagliati e le password di accesso al programma per l'utente corrente dell'applicazione
    '
    Public Sub DB_GetUserMen(ByVal Menu_Id As String, ByRef Run_Pwd As String, ByRef Write_Pwd As String, ByRef Flag_Run As Boolean, ByRef Flag_Write As Boolean)
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim User_Id As String
        Dim Group_Id As String
        Dim Check_Group As Boolean
        Dim Tot_Users As Integer
        Dim Tot_Groups As Integer

        Run_Pwd = ""
        Write_Pwd = ""

        Flag_Run = False
        Flag_Write = False

        Tot_Users = -1
        Tot_Groups = -1

        Try

            Check_Group = DB_TableExists("groupmen")

            ' verifica se ci sono i permessi dettagliati e le password per il programma

            Sql = " SELECT menu_id FROM usermen WHERE menu_id = '" & Menu_Id & "'" & CrLf

            If Check_Group Then
                Sql = Sql & " UNION ALL " & CrLf & _
                            " SELECT menu_id FROM groupmen where menu_id = '" & Menu_Id & "'" & CrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                DB_DataReaderClose(Dr, Cmd)
            Else
                DB_DataReaderClose(Dr, Cmd)

                Flag_Run = True
                Flag_Write = True
                Exit Sub
            End If

            ' ritorna i permessi dettagliati e le password per l'utente

            User_Id = DB_GetConnectionInfo("uid")

            Sql = " SELECT * FROM usermen " & CrLf & _
                  "  WHERE menu_id = '" & Menu_Id & "'" & CrLf & _
                  "    AND user_id = '" & User_Id & "'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then

                Run_Pwd = RTrim(CStr(DB_Dsv(Dr("run_pwd"), "")))
                Write_Pwd = RTrim(CStr(DB_Dsv(Dr("write_pwd"), "")))

                If DB_DataReaderHasField(Dr, "flag_run") Then
                    If Trim(CStr(DB_Dsv(Dr("flag_run"), ""))) = "" Or Trim(CStr(DB_Dsv(Dr("flag_run"), ""))) = "S" Then
                        Flag_Run = True
                    Else
                        Flag_Run = False
                    End If
                Else
                    Flag_Run = True
                End If

                If DB_DataReaderHasField(Dr, "flag_write") Then
                    If Trim(CStr(DB_Dsv(Dr("flag_write"), ""))) = "" Or Trim(CStr(DB_Dsv(Dr("flag_write"), ""))) = "S" Then
                        Flag_Write = True
                    Else
                        Flag_Write = False
                    End If
                Else
                    Flag_Write = True
                End If

                ' se c'è il permesso in scrittura allora implicitamente c'è anche il permesso in esecuzione

                If Flag_Write = True Then
                    Flag_Run = True
                End If

                DB_DataReaderClose(Dr, Cmd)

                Exit Sub
            Else
                Flag_Run = False
                Flag_Write = False
            End If

            DB_DataReaderClose(Dr, Cmd)

            ' se la lista degli utenti è vuota allora l'utente ha i permessi a livello di utente;
            ' se la lista degli utenti contiene almeno un utente con il flag di esecuzione uguale a 'S'
            ' allora l'utente non ha i permessi a livello di utente;
            ' se la lista degli utenti contiene solo utenti senza il flag di esecuzione uguale a 'S'
            ' allora l'utente ha i permessi a livello di utente;

            If DB_FieldExists("usermen", "flag_run") = True Then

                Sql = " SELECT SUM(CASE WHEN NVL(flag_run,' ') = 'S' THEN 1 ELSE 0 END) AS tot_users " & CrLf & _
                      "   FROM usermen " & CrLf & _
                      "  WHERE menu_id = '" & Menu_Id & "'" & CrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    Tot_Users = CInt(DB_Dsv(Dr("tot_users"), -1))
                Else
                    Tot_Users = -1
                End If

                DB_DataReaderClose(Dr, Cmd)

                If Tot_Users <= 0 Then
                    Flag_Run = True
                    Flag_Write = True
                Else
                    Flag_Run = False
                    Flag_Write = False
                End If

            End If

            If Not Check_Group Then Exit Sub

            ' ritorna i permessi dettagliati e le password per il gruppo

            Group_Id = DB_GetGroupUserName(User_Id)

            Sql = " SELECT * FROM groupmen " & CrLf & _
                  "  WHERE menu_id  = '" & Menu_Id & "'" & CrLf & _
                  "    AND group_id = '" & Group_Id & "'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then

                Run_Pwd = RTrim(CStr(DB_Dsv(Dr("run_pwd"), "")))
                Write_Pwd = RTrim(CStr(DB_Dsv(Dr("write_pwd"), "")))

                If DB_DataReaderHasField(Dr, "flag_run") Then
                    If Trim(CStr(DB_Dsv(Dr("flag_run"), ""))) = "" Or Trim(CStr(DB_Dsv(Dr("flag_run"), ""))) = "S" Then
                        Flag_Run = True
                    Else
                        Flag_Run = False
                    End If
                Else
                    Flag_Run = True
                End If

                If DB_DataReaderHasField(Dr, "flag_write") Then
                    If Trim(CStr(DB_Dsv(Dr("flag_write"), ""))) = "" Or Trim(CStr(DB_Dsv(Dr("flag_write"), ""))) = "S" Then
                        Flag_Write = True
                    Else
                        Flag_Write = False
                    End If
                Else
                    Flag_Write = True
                End If

                ' se c'è il permesso in scrittura allora implicitamente c'è anche il permesso in esecuzione

                If Flag_Write = True Then
                    Flag_Run = True
                End If

                DB_DataReaderClose(Dr, Cmd)

                Exit Sub
            Else
                Flag_Run = False
                Flag_Write = False
            End If

            DB_DataReaderClose(Dr, Cmd)

            ' se la lista dei gruppi è vuota allora contano i permessi a livello di utente;
            ' se la lista dei gruppi contiene almeno un gruppo con il flag di esecuzione uguale a 'S'
            ' allora l'utente non ha i permessi;
            ' se la lista dei gruppi contiene solo gruppi senza il flag di esecuzione uguale a 'S'
            ' allora l'utente ha i permessi;

            If DB_FieldExists("groupmen", "flag_run") = True Then

                Sql = " SELECT SUM(CASE WHEN NVL(flag_run,' ') = 'S' THEN 1 ELSE 0 END) AS tot_groups " & CrLf & _
                      "   FROM groupmen " & CrLf & _
                      "  WHERE menu_id = '" & Menu_Id & "'" & CrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    Tot_Groups = CInt(DB_Dsv(Dr("tot_groups"), -1))
                Else
                    Tot_Groups = -1
                End If

                DB_DataReaderClose(Dr, Cmd)

                If (Tot_Groups < 0 And Tot_Users <= 0) Or (Tot_Groups = 0) Then
                    Flag_Run = True
                    Flag_Write = True
                Else
                    Flag_Run = False
                    Flag_Write = False
                End If

            End If

            Exit Sub

        Catch ex As Exception

            Run_Pwd = ""
            Write_Pwd = ""

            Flag_Run = True
            Flag_Write = True

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Sub
    '
    ' Ritorna il valore di un qualsiasi oggetto verificando il valore nullo.
    ' Da utilizzare per l'esecuzione di query ( imposta i valori come la funzione DB_FormToDt)
    ' 
    Public Function DB_Getv(ByVal f As Object, Optional ByVal Null_Value As Object = Nothing) As Object

        DB_Getv = Getv(f)

        If Field_Null(DB_Getv) Then
            If Not Null_Value Is Nothing Then
                DB_Getv = Null_Value
            Else
                DB_Getv = DBNull.Value
            End If
        End If

    End Function
    '
    ' Ritorna true se l'indice esiste
    '
    Public Function DB_IndexExists(ByVal IndexName As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing) As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_IndexExists = False

        Try

            If Trim(IndexName) = "" Then
                DB_IndexExists = False
                Exit Function
            End If

            DB_GetPrimaryDbObject(Connection, Transaction)

            Sql = "SELECT idxname FROM sysindexes WHERE idxname = '" & IndexName & "' "

            Sql = " SELECT idxname " & CrLf & _
                  "   FROM sysindexes " & CrLf & _
                  "  WHERE idxname = '" & IndexName & "'" & CrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            If Dr.Read Then
                DB_IndexExists = True
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Effettua il lock dei records specificati dai parametri passati
    '
    Public Function DB_Lock(ByVal sqlTable As String, ByVal sqlField As String, ByVal sqlWhere As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing, Optional ByVal Show_Message As Boolean = True, Optional ByRef Error_Message As String = "", Optional ByRef Owner_Form As Form = Nothing, Optional ByVal Splash_Screen_Manager As DevExpress.XtraSplashScreen.SplashScreenManager = Nothing) As Boolean
        Dim Sql As String = ""
        Dim Cmd As DB2Command = Nothing
        Dim Dr As DB2DataReader = Nothing
        Dim RowId As Integer = 0
        Dim LockEseguito As Boolean
        Dim IdSessione As Integer = 0
        Dim DB2Exc As IBM.Data.DB2.DB2Exception
        Dim Messaggio As String = ""
        Dim i As Integer
        Dim Origin_TabId As Integer
        Dim Origin_TabName As String = ""
        Dim Origin_Db As String = ""

        DB_Lock = False

        Try

            Error_Message = ""

            DB_GetPrimaryDbObject(Connection, Transaction)

            '
            'Eseguo il lock senza aspettare
            '
            Sql = "set lock mode to not wait"
            DB_SqlExecute(Sql, Connection, Transaction)

            Sql = ""
            Sql = Sql & " UPDATE " & sqlTable & vbCrLf
            Sql = Sql & "    SET " & sqlField & " = " & sqlField & vbCrLf
            Sql = Sql & "  WHERE " & sqlWhere & vbCrLf

            Cmd = DB_CommandCreate(Sql, Connection, Transaction, 0)

            LockEseguito = False

            Try

                DB_CommandExecute(Cmd, Transaction)
                LockEseguito = True

            Catch ex As Exception

                If TypeOf ex Is IBM.Data.DB2.DB2Exception Then

                    DB2Exc = DirectCast(ex, IBM.Data.DB2.DB2Exception)

                    Messaggio = ""

                    For i = 0 To DB2Exc.Errors.Count - 1

                        If (DB2Exc.Errors(i).NativeError = -243) And (InStr(LCase(DB2Exc.Errors(i).Message), "lock timeout expired") > 0) Or _
                           (DB2Exc.Errors(i).NativeError = -244) And (InStr(LCase(DB2Exc.Errors(i).Message), "record is locked") > 0) Then

                            Messaggio = DB2Exc.Message.ToString
                            Messaggio = Messaggio & CrLf & CrLf

                            Exit For
                        End If

                    Next i

                End If

            Finally

                Select Case DB_Locktimeout
                    Case -1
                        Sql = "set lock mode to wait"
                    Case 0
                        Sql = "set lock mode to not wait"
                    Case Else
                        Sql = "set lock mode to wait " & Str(DB_Locktimeout)
                End Select

                DB_SqlExecute(Sql, Connection, Transaction)

                DB_CommandClose(Cmd)

            End Try

            If LockEseguito = False Then
                '
                'Seleziono il rowid del primo record per controllare chi blocca il record 
                'ma anche per controllare se i parametri passati sono corretti
                '
                Sql = ""
                Sql = Sql & " SELECT rowid , " & sqlField & vbCrLf
                Sql = Sql & "   FROM " & sqlTable & vbCrLf
                Sql = Sql & "  WHERE " & sqlWhere & vbCrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                RowId = 0

                If Dr.Read Then
                    RowId = CInt(DB_Dsv(Dr("rowid"), 0))
                End If

                DB_DataReaderClose(Dr, Cmd)

                If RowId > 0 Then

                    '
                    'Nel caso di sinonimi il lock è registrato nel database di origine della tabella
                    '
                    DB_TableOrigin(sqlTable, Origin_TabId, Origin_TabName, Origin_Db)

                    Sql = ""
                    Sql = Sql & " SELECT * " & vbCrLf
                    Sql = Sql & "   FROM sysmaster:syslocks " & vbCrLf
                    Sql = Sql & "  WHERE dbsname = '" & Getv(Origin_Db) & "'" & vbCrLf
                    Sql = Sql & "    AND tabname = '" & Getv(Origin_TabName) & "'" & vbCrLf
                    Sql = Sql & "    AND rowidlk = " & RowId & vbCrLf

                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                    DB_DataReaderExecute(Dr, Cmd, Transaction)

                    IdSessione = 0

                    If Dr.Read Then
                        IdSessione = CInt(DB_Dsv(Dr("Owner"), 0))
                    End If

                    DB_DataReaderClose(Dr, Cmd)

                    If IdSessione > 0 Then

                        Sql = ""
                        Sql = Sql & " SELECT * " & vbCrLf
                        Sql = Sql & "   FROM sysmaster:syssessions " & vbCrLf
                        Sql = Sql & "  WHERE sysmaster:syssessions.sid = " & IdSessione & vbCrLf

                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                        DB_DataReaderExecute(Dr, Cmd, Transaction)

                        If Dr.Read Then

                            Messaggio = Messaggio &
                                      "Id Sessione = " & RTrim(Dr("sid").ToString) & vbCrLf &
                                      "Utente = " & RTrim(Dr("UserName").ToString) & vbCrLf &
                                      "Client = " & RTrim(Dr("HostName").ToString) & vbCrLf &
                                      "Tty = " & RTrim(Dr("tty").ToString) & vbCrLf & vbCrLf &
                                      "sta modificando gli stessi dati." & vbCrLf & vbCrLf &
                                      "Attendere che l'altro utente completi le operazioni e quindi riprovare."

                            Error_Message = Messaggio

                            If Show_Message = True Then
                                WaitForm_Close(Owner_Form, Splash_Screen_Manager)
                                DevExpress.XtraEditors.XtraMessageBox.Show(Messaggio, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                            End If

                        Else
                            Messaggio = Messaggio & _
                                      "Qualcuno sta modificando gli stessi dati." & vbCrLf & vbCrLf & _
                                      "Attendere che l'altro utente completi le operazioni e quindi riprovare."

                            Error_Message = Messaggio

                            If Show_Message = True Then
                                WaitForm_Close(Owner_Form, Splash_Screen_Manager)
                                DevExpress.XtraEditors.XtraMessageBox.Show(Messaggio, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                            End If
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    Else
                        Messaggio = Messaggio & _
                                  "Qualcuno sta modificando gli stessi dati." & vbCrLf & vbCrLf & _
                                  "Attendere che l'altro utente completi le operazioni e quindi riprovare."

                        Error_Message = Messaggio

                        If Show_Message = True Then
                            WaitForm_Close(Owner_Form, Splash_Screen_Manager)
                            DevExpress.XtraEditors.XtraMessageBox.Show(Messaggio, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                        End If
                    End If

                End If

            Else
                DB_Lock = True
            End If

        Catch ex As Exception

            If Show_Message = True Then
                WaitForm_Close(Owner_Form, Splash_Screen_Manager)
                MsgErr(ex)
            End If

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Legge i campi di una tabella in base a certi criteri e ritorna i valori in un array di oggetti
    ' non obbligatori; ritorna inoltre True oppure False a seconda che sia stato trovato o meno il record
    ' che soddisfa i criteri.
    '
    Public Function DB_LookUp(ByVal Fields_List As String, ByVal Table_Name As String, Optional ByVal Criteria As String = "" _
                    , Optional ByRef Object1 As Object = Nothing _
                    , Optional ByRef Object2 As Object = Nothing _
                    , Optional ByRef Object3 As Object = Nothing _
                    , Optional ByRef Object4 As Object = Nothing _
                    , Optional ByRef Object5 As Object = Nothing _
                    , Optional ByRef Object6 As Object = Nothing _
                    , Optional ByRef Object7 As Object = Nothing _
                    , Optional ByRef Object8 As Object = Nothing _
                    , Optional ByRef Object9 As Object = Nothing _
                    , Optional ByRef Object10 As Object = Nothing _
                    , Optional ByRef Object11 As Object = Nothing _
                    , Optional ByRef Object12 As Object = Nothing _
                    , Optional ByRef Object13 As Object = Nothing _
                    , Optional ByRef Object14 As Object = Nothing _
                    , Optional ByRef Object15 As Object = Nothing _
                    , Optional ByRef Object16 As Object = Nothing _
                    , Optional ByRef Object17 As Object = Nothing _
                    , Optional ByRef Object18 As Object = Nothing _
                    , Optional ByRef Object19 As Object = Nothing _
                    , Optional ByRef Object20 As Object = Nothing _
                    , Optional ByRef Object21 As Object = Nothing _
                    , Optional ByRef Object22 As Object = Nothing _
                    , Optional ByRef Object23 As Object = Nothing _
                    , Optional ByRef Object24 As Object = Nothing _
                    , Optional ByRef Object25 As Object = Nothing _
                    , Optional ByRef Object26 As Object = Nothing _
                    , Optional ByRef Object27 As Object = Nothing _
                    , Optional ByRef Object28 As Object = Nothing _
                    , Optional ByRef Object29 As Object = Nothing _
                    , Optional ByRef Object30 As Object = Nothing) As Boolean

        Dim DrLookup As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim Cols As Integer

        DB_LookUp = False

        Try

            If Trim(Criteria) <> "" Then
                Sql = "SELECT " & Fields_List & " FROM " & Table_Name & " WHERE " & Criteria
            Else
                Sql = "SELECT " & Fields_List & " FROM " & Table_Name
            End If

            Cmd = DB_CommandCreate(Sql, DB_Conn, DB_Transaction)
            DB_DataReaderExecute(DrLookup, Cmd)

            Cols = DrLookup.FieldCount

            If DrLookup.Read Then
                If Cols > 0 Then Setv(Object1, DB_Dsv(DrLookup(0), Nothing))
                If Cols > 1 Then Setv(Object2, DB_Dsv(DrLookup(1), Nothing))
                If Cols > 2 Then Setv(Object3, DB_Dsv(DrLookup(2), Nothing))
                If Cols > 3 Then Setv(Object4, DB_Dsv(DrLookup(3), Nothing))
                If Cols > 4 Then Setv(Object5, DB_Dsv(DrLookup(4), Nothing))
                If Cols > 5 Then Setv(Object6, DB_Dsv(DrLookup(5), Nothing))
                If Cols > 6 Then Setv(Object7, DB_Dsv(DrLookup(6), Nothing))
                If Cols > 7 Then Setv(Object8, DB_Dsv(DrLookup(7), Nothing))
                If Cols > 8 Then Setv(Object9, DB_Dsv(DrLookup(8), Nothing))
                If Cols > 9 Then Setv(Object10, DB_Dsv(DrLookup(9), Nothing))
                If Cols > 10 Then Setv(Object11, DB_Dsv(DrLookup(10), Nothing))
                If Cols > 11 Then Setv(Object12, DB_Dsv(DrLookup(11), Nothing))
                If Cols > 12 Then Setv(Object13, DB_Dsv(DrLookup(12), Nothing))
                If Cols > 13 Then Setv(Object14, DB_Dsv(DrLookup(13), Nothing))
                If Cols > 14 Then Setv(Object15, DB_Dsv(DrLookup(14), Nothing))
                If Cols > 15 Then Setv(Object16, DB_Dsv(DrLookup(15), Nothing))
                If Cols > 16 Then Setv(Object17, DB_Dsv(DrLookup(16), Nothing))
                If Cols > 17 Then Setv(Object18, DB_Dsv(DrLookup(17), Nothing))
                If Cols > 18 Then Setv(Object19, DB_Dsv(DrLookup(18), Nothing))
                If Cols > 19 Then Setv(Object20, DB_Dsv(DrLookup(19), Nothing))
                If Cols > 20 Then Setv(Object21, DB_Dsv(DrLookup(20), Nothing))
                If Cols > 21 Then Setv(Object22, DB_Dsv(DrLookup(21), Nothing))
                If Cols > 22 Then Setv(Object23, DB_Dsv(DrLookup(22), Nothing))
                If Cols > 23 Then Setv(Object24, DB_Dsv(DrLookup(23), Nothing))
                If Cols > 24 Then Setv(Object25, DB_Dsv(DrLookup(24), Nothing))
                If Cols > 25 Then Setv(Object26, DB_Dsv(DrLookup(25), Nothing))
                If Cols > 26 Then Setv(Object27, DB_Dsv(DrLookup(26), Nothing))
                If Cols > 27 Then Setv(Object28, DB_Dsv(DrLookup(27), Nothing))
                If Cols > 28 Then Setv(Object29, DB_Dsv(DrLookup(28), Nothing))
                If Cols > 29 Then Setv(Object30, DB_Dsv(DrLookup(29), Nothing))

                DB_LookUp = True
            Else
                If Cols > 0 Then Setv(Object1, Nothing)
                If Cols > 1 Then Setv(Object2, Nothing)
                If Cols > 2 Then Setv(Object3, Nothing)
                If Cols > 3 Then Setv(Object4, Nothing)
                If Cols > 4 Then Setv(Object5, Nothing)
                If Cols > 5 Then Setv(Object6, Nothing)
                If Cols > 6 Then Setv(Object7, Nothing)
                If Cols > 7 Then Setv(Object8, Nothing)
                If Cols > 8 Then Setv(Object9, Nothing)
                If Cols > 9 Then Setv(Object10, Nothing)
                If Cols > 10 Then Setv(Object11, Nothing)
                If Cols > 11 Then Setv(Object12, Nothing)
                If Cols > 12 Then Setv(Object13, Nothing)
                If Cols > 13 Then Setv(Object14, Nothing)
                If Cols > 14 Then Setv(Object15, Nothing)
                If Cols > 15 Then Setv(Object16, Nothing)
                If Cols > 16 Then Setv(Object17, Nothing)
                If Cols > 17 Then Setv(Object18, Nothing)
                If Cols > 18 Then Setv(Object19, Nothing)
                If Cols > 19 Then Setv(Object20, Nothing)
                If Cols > 20 Then Setv(Object21, Nothing)
                If Cols > 21 Then Setv(Object22, Nothing)
                If Cols > 22 Then Setv(Object23, Nothing)
                If Cols > 23 Then Setv(Object24, Nothing)
                If Cols > 24 Then Setv(Object25, Nothing)
                If Cols > 25 Then Setv(Object26, Nothing)
                If Cols > 26 Then Setv(Object27, Nothing)
                If Cols > 27 Then Setv(Object28, Nothing)
                If Cols > 28 Then Setv(Object29, Nothing)
                If Cols > 29 Then Setv(Object30, Nothing)

                DB_LookUp = False
            End If

        Finally

            DB_DataReaderClose(DrLookup, Cmd)

        End Try


    End Function
    '
    ' Legge i campi di una tabella in base a certi criteri e ritorna i valori in un array di oggetti
    ' non obbligatori; ritorna inoltre True oppure False a seconda che sia stato trovato o meno il record
    ' che soddisfa i criteri.
    '
    ' ( funzione da utilizzare se si sta gestendo una connessione che non è quella primaria )
    '
    Public Function DB_LookUp(ByRef Connection As DB2Connection, ByRef Transaction As DB2Transaction, ByVal Fields_List As String, ByVal Table_Name As String, Optional ByVal Criteria As String = "" _
                    , Optional ByRef Object1 As Object = Nothing _
                    , Optional ByRef Object2 As Object = Nothing _
                    , Optional ByRef Object3 As Object = Nothing _
                    , Optional ByRef Object4 As Object = Nothing _
                    , Optional ByRef Object5 As Object = Nothing _
                    , Optional ByRef Object6 As Object = Nothing _
                    , Optional ByRef Object7 As Object = Nothing _
                    , Optional ByRef Object8 As Object = Nothing _
                    , Optional ByRef Object9 As Object = Nothing _
                    , Optional ByRef Object10 As Object = Nothing _
                    , Optional ByRef Object11 As Object = Nothing _
                    , Optional ByRef Object12 As Object = Nothing _
                    , Optional ByRef Object13 As Object = Nothing _
                    , Optional ByRef Object14 As Object = Nothing _
                    , Optional ByRef Object15 As Object = Nothing _
                    , Optional ByRef Object16 As Object = Nothing _
                    , Optional ByRef Object17 As Object = Nothing _
                    , Optional ByRef Object18 As Object = Nothing _
                    , Optional ByRef Object19 As Object = Nothing _
                    , Optional ByRef Object20 As Object = Nothing _
                    , Optional ByRef Object21 As Object = Nothing _
                    , Optional ByRef Object22 As Object = Nothing _
                    , Optional ByRef Object23 As Object = Nothing _
                    , Optional ByRef Object24 As Object = Nothing _
                    , Optional ByRef Object25 As Object = Nothing _
                    , Optional ByRef Object26 As Object = Nothing _
                    , Optional ByRef Object27 As Object = Nothing _
                    , Optional ByRef Object28 As Object = Nothing _
                    , Optional ByRef Object29 As Object = Nothing _
                    , Optional ByRef Object30 As Object = Nothing) As Boolean

        Dim DrLookup As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim Cols As Integer

        DB_LookUp = False

        Try

            DB_GetPrimaryDbObject(Connection, Transaction)

            If Trim(Criteria) <> "" Then
                Sql = "SELECT " & Fields_List & " FROM " & Table_Name & " WHERE " & Criteria
            Else
                Sql = "SELECT " & Fields_List & " FROM " & Table_Name
            End If

            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(DrLookup, Cmd, Transaction)

            Cols = DrLookup.FieldCount

            If DrLookup.Read Then
                If Cols > 0 Then Setv(Object1, DB_Dsv(DrLookup(0), Nothing))
                If Cols > 1 Then Setv(Object2, DB_Dsv(DrLookup(1), Nothing))
                If Cols > 2 Then Setv(Object3, DB_Dsv(DrLookup(2), Nothing))
                If Cols > 3 Then Setv(Object4, DB_Dsv(DrLookup(3), Nothing))
                If Cols > 4 Then Setv(Object5, DB_Dsv(DrLookup(4), Nothing))
                If Cols > 5 Then Setv(Object6, DB_Dsv(DrLookup(5), Nothing))
                If Cols > 6 Then Setv(Object7, DB_Dsv(DrLookup(6), Nothing))
                If Cols > 7 Then Setv(Object8, DB_Dsv(DrLookup(7), Nothing))
                If Cols > 8 Then Setv(Object9, DB_Dsv(DrLookup(8), Nothing))
                If Cols > 9 Then Setv(Object10, DB_Dsv(DrLookup(9), Nothing))
                If Cols > 10 Then Setv(Object11, DB_Dsv(DrLookup(10), Nothing))
                If Cols > 11 Then Setv(Object12, DB_Dsv(DrLookup(11), Nothing))
                If Cols > 12 Then Setv(Object13, DB_Dsv(DrLookup(12), Nothing))
                If Cols > 13 Then Setv(Object14, DB_Dsv(DrLookup(13), Nothing))
                If Cols > 14 Then Setv(Object15, DB_Dsv(DrLookup(14), Nothing))
                If Cols > 15 Then Setv(Object16, DB_Dsv(DrLookup(15), Nothing))
                If Cols > 16 Then Setv(Object17, DB_Dsv(DrLookup(16), Nothing))
                If Cols > 17 Then Setv(Object18, DB_Dsv(DrLookup(17), Nothing))
                If Cols > 18 Then Setv(Object19, DB_Dsv(DrLookup(18), Nothing))
                If Cols > 19 Then Setv(Object20, DB_Dsv(DrLookup(19), Nothing))
                If Cols > 20 Then Setv(Object21, DB_Dsv(DrLookup(20), Nothing))
                If Cols > 21 Then Setv(Object22, DB_Dsv(DrLookup(21), Nothing))
                If Cols > 22 Then Setv(Object23, DB_Dsv(DrLookup(22), Nothing))
                If Cols > 23 Then Setv(Object24, DB_Dsv(DrLookup(23), Nothing))
                If Cols > 24 Then Setv(Object25, DB_Dsv(DrLookup(24), Nothing))
                If Cols > 25 Then Setv(Object26, DB_Dsv(DrLookup(25), Nothing))
                If Cols > 26 Then Setv(Object27, DB_Dsv(DrLookup(26), Nothing))
                If Cols > 27 Then Setv(Object28, DB_Dsv(DrLookup(27), Nothing))
                If Cols > 28 Then Setv(Object29, DB_Dsv(DrLookup(28), Nothing))
                If Cols > 29 Then Setv(Object30, DB_Dsv(DrLookup(29), Nothing))

                DB_LookUp = True
            Else
                If Cols > 0 Then Setv(Object1, Nothing)
                If Cols > 1 Then Setv(Object2, Nothing)
                If Cols > 2 Then Setv(Object3, Nothing)
                If Cols > 3 Then Setv(Object4, Nothing)
                If Cols > 4 Then Setv(Object5, Nothing)
                If Cols > 5 Then Setv(Object6, Nothing)
                If Cols > 6 Then Setv(Object7, Nothing)
                If Cols > 7 Then Setv(Object8, Nothing)
                If Cols > 8 Then Setv(Object9, Nothing)
                If Cols > 9 Then Setv(Object10, Nothing)
                If Cols > 10 Then Setv(Object11, Nothing)
                If Cols > 11 Then Setv(Object12, Nothing)
                If Cols > 12 Then Setv(Object13, Nothing)
                If Cols > 13 Then Setv(Object14, Nothing)
                If Cols > 14 Then Setv(Object15, Nothing)
                If Cols > 15 Then Setv(Object16, Nothing)
                If Cols > 16 Then Setv(Object17, Nothing)
                If Cols > 17 Then Setv(Object18, Nothing)
                If Cols > 18 Then Setv(Object19, Nothing)
                If Cols > 19 Then Setv(Object20, Nothing)
                If Cols > 20 Then Setv(Object21, Nothing)
                If Cols > 21 Then Setv(Object22, Nothing)
                If Cols > 22 Then Setv(Object23, Nothing)
                If Cols > 23 Then Setv(Object24, Nothing)
                If Cols > 24 Then Setv(Object25, Nothing)
                If Cols > 25 Then Setv(Object26, Nothing)
                If Cols > 26 Then Setv(Object27, Nothing)
                If Cols > 27 Then Setv(Object28, Nothing)
                If Cols > 28 Then Setv(Object29, Nothing)
                If Cols > 29 Then Setv(Object30, Nothing)

                DB_LookUp = False
            End If

        Finally

            DB_DataReaderClose(DrLookup, Cmd)

        End Try

    End Function
    '
    ' Ritorna gli oggetti connessione e transazione primari se non impostati
    ' 
    Public Sub DB_GetPrimaryDbObject(ByRef Connection As DB2Connection, ByRef Transaction As DB2Transaction)

        If Connection Is Nothing Then

            Connection = DB_Conn
            Transaction = DB_Transaction

        End If

    End Sub

    '
    ' Esegue il rollback della transazione ( funzione normalmente utilizzata nei programmi )
    '
    Public Sub DB_RollbackTrans()

        Try
            If Not DB_Transaction Is Nothing Then
                DB_Transaction.Rollback()
                DB_Transaction.Dispose()
                DB_Transaction = Nothing
            End If
        Catch ex As Exception
        End Try

    End Sub
    '
    ' Esegue il rollback della transazione ( funzione da utilizzare se si sta gestendo una transazione che non è quella primaria )
    '
    Public Sub DB_RollbackTrans(ByRef Transaction As DB2Transaction)

        Try
            If Not Transaction Is Nothing Then
                Transaction.Rollback()
                Transaction.Dispose()
                Transaction = Nothing
            End If
        Catch ex As Exception
        End Try

    End Sub
    '
    ' Imposta il codice della stampante di default sul client
    '
    Public Function DB_SetClientPrt(ByVal Ifxinf_Parameter As String, ByVal Printer_Name As String) As Boolean
        Dim File_In As System.IO.StreamReader = Nothing
        Dim File_Out As System.IO.StreamWriter = Nothing
        Dim Nome_File_In As String
        Dim Nome_File_Out As String
        Dim s1 As String
        Dim Flag_Found As Boolean

        DB_SetClientPrt = False
        Flag_Found = False

        Try
            Nome_File_In = App_WinPath() & "\ifxinf.def"

            If Not System.IO.File.Exists(Nome_File_In) Then
                DB_SetClientPrt = False
                Exit Function
            End If

            If Trim(Ifxinf_Parameter) = "" Then
                Ifxinf_Parameter = "CLIENTPRT="
            End If

            Nome_File_Out = App_WinPath() & "\ifxinf.tmp"
            System.IO.File.Delete(Nome_File_Out)

            File_In = New System.IO.StreamReader(Nome_File_In, System.Text.Encoding.Default)
            File_Out = New System.IO.StreamWriter(Nome_File_Out)

            Do While File_In.Peek >= 0
                s1 = File_In.ReadLine()

                If InStr(UCase(s1), Ifxinf_Parameter) > 0 Then
                    s1 = Ifxinf_Parameter & Printer_Name
                    Flag_Found = True
                End If

                File_Out.WriteLine(s1)

            Loop

            If Not Flag_Found Then
                s1 = Ifxinf_Parameter & Printer_Name
                File_Out.WriteLine(s1)
            End If

            File_StreamReaderClose(File_In)
            File_StreamWriterClose(File_Out)

            System.IO.File.Copy(Nome_File_Out, Nome_File_In, True)
            System.IO.File.Delete(Nome_File_Out)

            DB_SetClientPrt = False

        Catch ex As Exception

        Finally

            File_StreamReaderClose(File_In)
            File_StreamWriterClose(File_Out)

        End Try

    End Function
    '
    ' Imposta il codice della stampante di default sul server
    '
    Public Function DB_SetServerPrt(ByVal Printer_id As Integer) As Boolean
        Dim File_In As System.IO.StreamReader = Nothing
        Dim File_Out As System.IO.StreamWriter = Nothing
        Dim Nome_File_In As String
        Dim Nome_File_Out As String
        Dim s1 As String
        Dim Flag_Found As Boolean

        DB_SetServerPrt = False
        Flag_Found = False

        Try
            Nome_File_In = App_WinPath() & "\ifxinf.def"

            If Not System.IO.File.Exists(Nome_File_In) Then
                DB_SetServerPrt = False
                Exit Function
            End If

            Nome_File_Out = App_WinPath() & "\ifxinf.tmp"
            System.IO.File.Delete(Nome_File_Out)

            File_In = New System.IO.StreamReader(Nome_File_In, System.Text.Encoding.Default)
            File_Out = New System.IO.StreamWriter(Nome_File_Out)

            Do While File_In.Peek >= 0
                s1 = File_In.ReadLine()

                If InStr(UCase(s1), "SERVERPRT=") > 0 Then
                    s1 = "SERVERPRT=" & Trim(Format(Printer_id, "###0"))
                    Flag_Found = True
                End If

                File_Out.WriteLine(s1)

            Loop

            If Not Flag_Found Then
                s1 = "SERVERPRT=" & Trim(Format(Printer_id, "###0"))
                File_Out.WriteLine(s1)
            End If

            File_StreamReaderClose(File_In)
            File_StreamWriterClose(File_Out)

            System.IO.File.Copy(Nome_File_Out, Nome_File_In, True)
            System.IO.File.Delete(Nome_File_Out)

            DB_SetServerPrt = False

        Catch ex As Exception

        Finally

            File_StreamReaderClose(File_In)
            File_StreamWriterClose(File_Out)

        End Try

    End Function

    '
    'Imposta il titolo di una form ( come avviene nella Db_StartApp ) aggiungendo prefisso e suffisso
    '
    Public Sub DB_SetFormTitle(ByRef Form1 As Form)

        If Not Form1 Is Nothing Then
            If DB_FormPrefix <> "" Then
                Form1.Text = DB_FormPrefix & " - " & Form1.Text & DB_FormSuffix
            Else
                Form1.Text = Form1.Text & DB_FormSuffix
            End If
        End If

    End Sub

    '
    ' Ritorna una data opportunamente formattata per essere usata nelle istruzioni SQL
    ' Viene ignorata la formattazione della data presente nelle impostazioni internazionali di sistema
    '
    Public Function DB_Sql_Date(f As Object) As String
        Dim Data As String

        Data = ""

        Try

            If Getv(f) <> "" Then
                If IsDate(Getv(f)) Then
                    Data = CDate(Getv(f)).ToString("dd/MM/yyyy", Globalization.CultureInfo.InvariantCulture)
                End If
            End If

            DB_Sql_Date = Data

        Catch ex As Exception

            DB_Sql_Date = ""

        End Try

    End Function

    '
    ' Ritorna una data opportunamente formattata per essere usata nelle istruzioni SQL
    ' Viene ignorata la formattazione della data presente nelle impostazioni internazionali di sistema
    '
    Public Function DB_Sql_Date(f As Object, Null_Value As Object) As Object
        Dim Data As Object = Nothing

        Try

            Data = Null_Value

            If Getv(f) <> "" Then
                If IsDate(Getv(f)) Then
                    Data = CDate(Getv(f)).ToString("dd/MM/yyyy", Globalization.CultureInfo.InvariantCulture)
                End If
            End If

            DB_Sql_Date = Data

        Catch ex As Exception

            DB_Sql_Date = Null_Value

        End Try

    End Function

    '
    ' Ritorna un datetime opportunamente formattato per essere usato nelle istruzioni SQL
    ' Viene ignorata la formattazione della data e dell'ora presente nelle impostazioni internazionali di sistema
    '
    Public Function DB_Sql_Datetime(f As Object) As String
        Dim Dataora As String

        Dataora = ""

        Try

            If Getv(f) <> "" Then
                If IsDate(Getv(f)) Then
                    Dataora = CDate(Getv(f)).ToString("yyyy-MM-dd HH:mm:ss", Globalization.CultureInfo.InvariantCulture)
                End If
            End If

            DB_Sql_Datetime = Dataora

        Catch ex As Exception

            DB_Sql_Datetime = ""

        End Try

    End Function

    '
    ' Ritorna un datetime opportunamente formattato per essere usato nelle istruzioni SQL
    ' Viene ignorata la formattazione della data e dell'ora presente nelle impostazioni internazionali di sistema
    '
    Public Function DB_Sql_Datetime(f As Object, Null_Value As Object) As Object
        Dim Dataora As Object = Nothing

        Try

            Dataora = Null_Value

            If Getv(f) <> "" Then
                If IsDate(Getv(f)) Then
                    Dataora = CDate(Getv(f)).ToString("yyyy-MM-dd HH:mm:ss", Globalization.CultureInfo.InvariantCulture)
                End If
            End If

            DB_Sql_Datetime = Dataora

        Catch ex As Exception

            DB_Sql_Datetime = Null_Value

        End Try

    End Function

    '
    ' Ritorna una stringa opportunamente formattata per essere usata nelle istruzioni SQL
    '
    Public Function DB_Sql_Getv(f As Object) As String

        DB_Sql_Getv = Getv(f).Replace("'", "''")

    End Function

    '
    ' Ritorna un numero opportunamente formattato per essere usato nelle istruzioni SQL
    '
    Public Function DB_Sql_Number(f As Object) As String
        Dim Number As String

        Number = ""

        Try

            If Getv(f) <> "" Then
                If IsNumeric(Getv(f)) Then
                    Number = f.ToString.Replace(",", ".")
                End If
            End If

            DB_Sql_Number = Number

        Catch ex As Exception

            DB_Sql_Number = ""

        End Try

    End Function
    '
    ' Esegue una istruzione SQL diretta sul database 
    '
    Public Function DB_SqlExecute(ByVal Sql As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing) As Integer
        Dim Cmd As DB2Command = Nothing

        DB_GetPrimaryDbObject(Connection, Transaction)

        Cmd = DB_CommandCreate(Sql, Connection, Transaction)

        DB_SqlExecute = DB_CommandExecute(Cmd, Transaction)

        DB_CommandClose(Cmd)

    End Function
    '
    ' Inizializza un'applicazione Client/Server Ergdis
    '
    ' A) Si connette al server.
    ' B) Controlla le licenze Ergdis.
    ' C) Controlla la validità della password.
    ' D) Verifica i permessi di esecuzione/modifica.
    ' E) Registra l'applicazione nel log dei processi sui client.
    '
    Public Function DB_StartApp(ByRef Form1 As Form, Optional ByRef splash_form As Form = Nothing, Optional ByVal DB_ConnectionName As String = "", Optional ByVal MenuParametersCount As Integer = 1) As Boolean
        Dim Flag_File As Boolean
        Dim Flag_Dbconnection As Boolean
        Dim Nome_Server As Object = Nothing
        Dim Tipo_Server As Object = Nothing
        Dim Lock_Time As Object = Nothing
        Dim Prefisso_Form As Object = Nothing
        Dim App_Name As String
        Dim Run_Pwd As String = ""
        Dim Write_Pwd As String = ""
        Dim Flag_Run As Boolean
        Dim Flag_Write As Boolean
        Dim Menu_Id As String
        Dim Flag_Taskcli As Object = Nothing
        Dim Flag_Ergmen_Lic As Object = Nothing
        Dim Sql As String
        Dim CurrentProcess As Process = Process.GetCurrentProcess()
        Dim Parameters As String
        Dim i As Integer

        Try

            DB_StartApp = False

            ' imposta lo stile dei controlli DevExpress

            DevExpress.UserSkins.BonusSkins.Register()

            Dim devx_style_conf As New Devx_Style_Configuration
            devx_style_conf.LoadConfiguration()

            DevExpress.LookAndFeel.UserLookAndFeel.Default.SkinName = devx_style_conf.SkinName
            DevExpress.LookAndFeel.UserLookAndFeel.Default.Style = devx_style_conf.SkinStyle

            ' estrae i parametri dalla stringa passata o dalla riga di comando o dal file ifxinf.def

            If Trim(DB_ConnectionName) = "" Then
                DB_ConnectionString = App_GetArgument(0)
            Else
                DB_ConnectionString = Trim(DB_ConnectionName)
            End If

            If DB_ConnectionString = "" Then
                DB_ConnectionString = DB_GetDefCon()
                If (DB_ConnectionString = "") Then
                    Beep()
                    DevExpress.XtraEditors.XtraMessageBox.Show("Impossibile trovare il file ifxinf.def nella cartella " & App_WinPath(), My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    End
                End If
                Flag_File = True
            Else
                Flag_File = False
            End If

            ' controlla se vi sono tutti i parametri di connessione

            If (InStr(DB_ConnectionString, "DB=", CompareMethod.Text) > 0 And _
                InStr(DB_ConnectionString, "UID=", CompareMethod.Text) > 0 And _
                InStr(DB_ConnectionString, "PWD=", CompareMethod.Text) > 0 And _
                InStr(DB_ConnectionString, "HOST=", CompareMethod.Text) > 0 And _
                InStr(DB_ConnectionString, "PORT=", CompareMethod.Text) > 0 And _
                InStr(DB_ConnectionString, "DSN=", CompareMethod.Text) > 0) Then

                Flag_Dbconnection = True
            Else
                Flag_Dbconnection = False
            End If

            ' mostra la form di login se necessario e controlla la stringa

            If Flag_Dbconnection = False Then
                r_login.Login_Type = 1
                r_login.ShowDialog(Form1)
                r_login.Dispose()
                If DB_ConnectionString = "" Then
                    Application.DoEvents()
                    End
                End If
            End If

            ' con Pooling = false le connessioni vengono chiuse immediatamente dopo aver fatto .close e .dispose

            DB_ConnectionString_NET = "Database=" & DB_GetConnectionInfo("db") & ";" & _
                                      "User ID=" & DB_GetConnectionInfo("uid", False) & ";" & _
                                      "Password=" & DB_GetConnectionInfo("pwd") & ";" & _
                                      "Server=" & DB_GetConnectionInfo("host") & ":" & DB_GetConnectionInfo("port") & ";" & _
                                      "IsolationLevel=ReadCommitted;" & _
                                      "Pooling=false;"

            DB_ConnectionString_VB6 = "DSN=" & DB_GetConnectionInfo("dsn") & ";" & _
                                      "DB=" & DB_GetConnectionInfo("db") & ";" & _
                                      "UID=" & DB_GetConnectionInfo("uid", False) & ";" & _
                                      "PWD=" & DB_GetConnectionInfo("pwd") & ";"

            ' visualizza la splash form (opzionale)

            If Not (splash_form Is Nothing) Then
                splash_form.Show()
                Application.DoEvents()
            End If

            ' effettua la connessione al database

            DB_Conn = New DB2Connection(DB_ConnectionString_NET)
            DB_Conn.Open()

            DB_Autoread = False

            ' setta il livello di isolamento della connessione

            DB_SqlExecute("SET ISOLATION TO COMMITTED READ", DB_Conn, DB_Transaction)

            ' estrae i parametri del server

            DB_LookUp("server_name, server_type, db_locktimeout, form_prefix ", "server", "", Nome_Server, Tipo_Server, Lock_Time, Prefisso_Form)

            ' imposta il tipo di sistema operativo del server

            If Not Tipo_Server Is Nothing Then
                DB_ServerType = CStr(Tipo_Server)
            Else
                DB_ServerType = "A"
            End If

            ' setta il timeout di lock sui record

            If Not Lock_Time Is Nothing Then
                DB_Locktimeout = CInt(Lock_Time)
            Else
                DB_Locktimeout = 0
            End If

            Sql = ""

            Select Case DB_Locktimeout
                Case -1
                    Sql = "set lock mode to wait"
                Case 0
                    Sql = "set lock mode to not wait"
                Case Else
                    Sql = "set lock mode to wait " & Str(DB_Locktimeout)
            End Select

            If Sql <> "" Then
                DB_SqlExecute(Sql, DB_Conn, DB_Transaction)
            End If

            ' imposta il prefisso sul titolo delle form

            If Not Prefisso_Form Is Nothing Then
                DB_FormPrefix = CStr(Prefisso_Form)
            Else
                DB_FormPrefix = ""
            End If

            ' verifica se registrare il processo nel registro dei processi client

            DB_FlagCheckTaskcli = False
            DB_TaskcliId = -1

            If DB_FieldExists("server", "db_checktaskcli", DB_Conn, DB_Transaction) = True Then
                DB_LookUp("db_checktaskcli", "server", "", Flag_Taskcli)

                If Trim(CStr(Flag_Taskcli)) = "S" Then
                    DB_FlagCheckTaskcli = True
                End If
            End If

            DB_MenuParametersCount = MenuParametersCount

            ' registra il processo nel registro dei processi client con lo stato = 'N' (non ancora attivato)

            If DB_FlagCheckTaskcli = True Then

                Parameters = ""

                i = 0
                Do While True
                    i = i + 1
                    If App_GetArgument(i) = "" Then
                        Exit Do
                    End If
                    If Parameters <> "" Then
                        Parameters = Parameters & " "
                    End If
                    Parameters = Parameters & App_GetArgument(i)
                Loop

                Sql = " INSERT INTO taskcli " & CrLf & _
                      " ( task_name     , task_des      , flag_result   , " & CrLf & _
                      "   pid           , sid           , task_user     , " & CrLf & _
                      "   client_name   , server_name   , start_date    , " & CrLf & _
                      "   start_time    , parameters    ) " & CrLf & _
                      " VALUES ( " & CrLf & _
                      "'" & Replace(LCase(My.Application.Info.AssemblyName), "'", "''") & "'," & CrLf & _
                      "'" & Replace(My.Application.Info.Title, "'", "''") & "'," & CrLf & _
                      "'N'," & CrLf & _
                      Trim(Str(CurrentProcess.Id)) & "," & CrLf & _
                      Trim(Str(DB_GetSessionId)) & "," & CrLf & _
                      "'" & Replace(DB_GetConnectionInfo("uid"), "'", "''") & "'," & CrLf & _
                      "'" & Replace(DB_GetClientName, "'", "''") & "'," & CrLf & _
                      "'" & Replace(DB_GetServerName, "'", "''") & "'," & CrLf & _
                      "'" & DB_Sql_Date(Now) & "'," & CrLf & _
                      Replace(Now.ToString("HH:mm", Globalization.CultureInfo.InvariantCulture), ":", ".") & "," & CrLf & _
                      "'" & Replace(Trim(Parameters), "'", "''") & "' ) " & CrLf

                DB_SqlExecute(Sql, DB_Conn, DB_Transaction)

                ' ricava l'indentificatore del processo nel registro dei processi client

                DB_TaskcliId = DB_GetLastSerialValue()

            End If

            ' verifica se includere i programmi "ergmen" e "ergmen2" ossia i menù nel controllo del numero di licenze

            Flag_Ergmen_Lic = ""

            If DB_FieldExists("server", "flag_ergmen_lic") Then
                DB_LookUp("flag_ergmen_lic", "server", "", Flag_Ergmen_Lic)
            End If

            If Field_Null(Flag_Ergmen_Lic) Then Flag_Ergmen_Lic = "N"

            ' controlla le licenze di uso di Ergdis ed il numero di sessioni consentite per il client;
            ' per i programmi "ergmen" e "ergmen2" il controllo viene fatto solo se è attiva l'apposita opzione nei parametri del server;
            ' per i programmi "server" ed "erglicgen" non viene mai fatto questo controllo;

            App_Name = LCase(My.Application.Info.AssemblyName)

            If ((App_Name <> "ergmen") Or (Flag_Ergmen_Lic = "S")) And ((App_Name <> "ergmen2") Or (Flag_Ergmen_Lic = "S")) And (App_Name <> "server") And (App_Name <> "erglicgen") Then

                ' controlla le licenze di uso di Ergdis (definite nella tabella server)

                If DB_CheckClientLic() = False Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Beep()
                    XtraMessageBox.Show("Attenzione." & Chr(10) & Chr(10) & "Licenza d'uso di ERGDIS non valida.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    If Not Form1 Is Nothing Then Form1.Close()
                    Application.DoEvents()
                    End
                    Exit Function
                End If

                ' controlla il numero di sessioni consentite per il client (definite in IFXINF.DEF col parametro MAXSESSIONS=n)

                If DB_CheckClientSes() = False Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Beep()
                    XtraMessageBox.Show("Attenzione." & Chr(10) & Chr(10) & "Superato il numero massimo di sessioni consentite per il client.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    If Not Form1 Is Nothing Then Form1.Close()
                    Application.DoEvents()
                    End
                    Exit Function
                End If

            End If

            ' verifica se l'utente è abilitato per accedere ad Ergdis

            If DB_CheckUserEnabled() = False Then

                If Not (splash_form Is Nothing) Then
                    splash_form.Close()
                End If

                Beep()
                XtraMessageBox.Show("Attenzione." & Chr(10) & Chr(10) & "L'utente è disattivato e non può accedere ad ERGDIS.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                Application.DoEvents()
                If Not Form1 Is Nothing Then Form1.Close()
                Application.DoEvents()
                End
                Exit Function
            End If

            ' effettua la validazione della password dell'utente verificando che non stia per scadere o sia già scaduta;
            ' in caso affermativo attiva la form per modificare la password;

            If DB_ValidateUserPwd(splash_form) = False Then
                Application.DoEvents()
                If Not Form1 Is Nothing Then Form1.Close()
                Application.DoEvents()
                End
                Exit Function
            End If

            ' verifica le autorizzazioni sull'applicazione (tranne per Ergmen, Ergmen2 ed RWI)

            DB_RunUid = ""
            DB_RunPwd = ""
            DB_WriteUid = ""
            DB_WritePwd = ""
            DB_UpdatePermission = False

            App_Name = LCase(My.Application.Info.AssemblyName)

            If (App_Name <> "ergmen") And (App_Name <> "ergmen2") And (App_Name <> "rwi") Then

                ' estrae il codice del menù associato all'applicazione

                Menu_Id = DB_GetMenuId()

                If Menu_Id = "" Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Beep()
                    XtraMessageBox.Show("L'applicazione non è inserita a menù.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    If Not Form1 Is Nothing Then Form1.Close()
                    Application.DoEvents()
                    End
                    Exit Function
                End If

                ' verifica la licenza d'uso dell'applicazione

                If DB_CheckModuleLic(Menu_Id) = False Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Beep()
                    XtraMessageBox.Show("L'utente non possiede la licenza d'uso per questa applicazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    If Not Form1 Is Nothing Then Form1.Close()
                    Application.DoEvents()
                    End
                    Exit Function
                End If

                ' verifica i permessi generali di esecuzione dell'applicazione

                If DB_CheckUserList(Menu_Id) = False Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Beep()
                    XtraMessageBox.Show("L'utente non possiede i diritti di esecuzione su questa applicazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    If Not Form1 Is Nothing Then Form1.Close()
                    Application.DoEvents()
                    End
                    Exit Function
                End If

                ' verifica i permessi generali di modifica dei dati

                DB_UpdatePermission = DB_CheckWriteList(Menu_Id)

                ' verifica i permessi dettagliati e le password di accesso dell'utente all'applicazione

                Call DB_GetUserMen(Menu_Id, Run_Pwd, Write_Pwd, Flag_Run, Flag_Write)

                If Not Flag_Run Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Beep()
                    XtraMessageBox.Show("L'utente non possiede i diritti di esecuzione su questa applicazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Application.DoEvents()
                    If Not Form1 Is Nothing Then Form1.Close()
                    Application.DoEvents()
                    End
                    Exit Function
                End If

                If Not Flag_Write Then
                    DB_UpdatePermission = False
                End If

                ' verifica la password di accesso all'applicazione

                If Run_Pwd <> "" Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    r_login.Login_Type = 2
                    r_login.ShowDialog(Form1)
                    r_login.Dispose()

                    If DB_RunPwd = "" Then
                        If Not Form1 Is Nothing Then Form1.Close()
                        Application.DoEvents()
                        End
                        Exit Function
                    End If

                    If Run_Pwd <> DB_RunPwd Then
                        Beep()
                        XtraMessageBox.Show("La password per l'accesso all'applicazione non è valida.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        Application.DoEvents()
                        If Not Form1 Is Nothing Then Form1.Close()
                        Application.DoEvents()
                        End
                        Exit Function
                    End If

                End If

                ' verifica la password per la modifica dei dati

                If Write_Pwd <> "" Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    r_login.Login_Type = 3
                    r_login.ShowDialog(Form1)
                    r_login.Dispose()

                    If (DB_WritePwd = "") Or (Write_Pwd <> DB_WritePwd) Then
                        Beep()
                        XtraMessageBox.Show("La password per la modifica dei dati non è valida." & CrLf & CrLf & "Non sarà pertanto possibile modificare i dati.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                        DB_UpdatePermission = False
                    Else
                        DB_UpdatePermission = True
                    End If

                End If

            End If

            ' imposta nel registro dei processi client lo stato del processo uguale ad 'A' (attivato)

            If (DB_FlagCheckTaskcli = True) Then

                Sql = " UPDATE taskcli " & CrLf & _
                      "    SET flag_result = 'A' " & CrLf & _
                      "  WHERE task_id     = " & DB_TaskcliId & CrLf & _
                      "    AND flag_result = 'N' " & CrLf

                DB_SqlExecute(Sql, DB_Conn, DB_Transaction)

            End If

            ' mostra il nome dell'utente, del database, del client e del server

            DB_FormSuffix = " - Utente: " & DB_GetConnectionInfo("uid") & " di " & DB_GetConnectionInfo("db") & " - Client: " & DB_GetClientName() & " - Server: " & CStr(Nome_Server)

            If Not Form1 Is Nothing Then
                If DB_FormPrefix <> "" Then
                    Form1.Text = DB_FormPrefix & " - " & Form1.Text & DB_FormSuffix
                Else
                    Form1.Text = Form1.Text & DB_FormSuffix
                End If
            End If

            DB_StartApp = True

        Catch ex As Exception

            DB_StartApp = False

            If Not (splash_form Is Nothing) Then
                splash_form.Close()
            End If

            Mouse_Default()
            Beep()
            MsgErr(ex)

            Application.DoEvents()
            End

        End Try

    End Function

    '
    ' Data una tabella di origine crea una nuova tabella copia con lo stesso tracciato record;
    ' il nome della tabella copia viene di solito ricavato con la funzione db_gettemptablename
    '
    ' Connection_Clone / Transaction_Clone servono per creare la tabella clonata in un'altro database
    ' Clone_Indexes = true permette di clonare anche gli indici esistenti
    '
    Public Sub DB_TableClone(ByVal table_source As String, ByVal table_clone As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing, Optional ByVal Connection_Clone As DB2Connection = Nothing, Optional ByVal Transaction_Clone As DB2Transaction = Nothing, Optional ByVal Clone_Indexes As Boolean = False)
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Dr2 As DB2DataReader = Nothing
        Dim Cmd2 As DB2Command = Nothing
        Dim Sql As String = ""
        Dim Sql_Clone As String = ""
        Dim Tabid As Integer
        Dim Tabtype As String = ""
        Dim Colname As String = ""
        Dim Coltype As Integer
        Dim Collength As Integer
        Dim dec_prec As Integer
        Dim dec_scale As Integer
        Dim dtime_max As Integer
        Dim dtime_min As Integer
        Dim datetime_max As String = ""
        Dim datetime_min As String = ""
        Dim varchar_max As Integer
        Dim varchar_min As Integer
        Dim flag_not_null As Boolean
        Dim Dborigine As String = ""
        Dim Tborigine As String = ""
        Dim p As Integer
        Dim Idx_Fields As String = ""
        Dim Idx_Unique As String = ""
        Dim Idx_Name As String = ""
        Dim Idx_Suffix As String = ""

        Try

            If Trim(table_source) = "" Or Trim(table_clone) = "" Then
                Exit Sub
            End If

            DB_GetPrimaryDbObject(Connection, Transaction)

            ' legge il tabid della tabella sorgente

            Sql = ""
            Sql = Sql & " SELECT tabid, tabtype " & vbCrLf
            Sql = Sql & "   FROM systables " & vbCrLf
            Sql = Sql & "  WHERE tabname = '" & Trim(table_source) & "' " & vbCrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            If Dr.Read Then
                Tabid = Trim(DB_Dsv(Dr("tabid"), 0))
                Tabtype = Trim(DB_Dsv(Dr("tabtype"), ""))
                DB_DataReaderClose(Dr, Cmd)
            Else
                DB_DataReaderClose(Dr, Cmd)
                Exit Sub
            End If

            ' estrae l'elenco dei campi e crea l'istruzione SQL corrispondente

            ' se la tabella è una tabella fisica allora estraggo i dati dal database corrente
            ' altrimenti se è un sinonimo mi estraggo i dati relativi al collegamento alla tabella reale

            If Trim(Tabtype) = "T" Then

                Sql = ""
                Sql = Sql & " SELECT * " & vbCrLf
                Sql = Sql & "   FROM syscolumns " & vbCrLf
                Sql = Sql & "  WHERE tabid = " & Tabid & vbCrLf
                Sql = Sql & " ORDER BY colno " & vbCrLf

                Dborigine = DB_GetConnectionInfo("DB") & ":"

            ElseIf Trim(Tabtype) = "S" Then

                Sql = ""
                Sql = Sql & " SELECT * " & vbCrLf
                Sql = Sql & "   FROM syssyntable " & vbCrLf
                Sql = Sql & "  WHERE tabid = " & Tabid & vbCrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                If Not Dr.Read Then
                    DB_DataReaderClose(Dr, Cmd)
                    Exit Sub
                End If

                Dborigine = ""
                Dborigine = Dborigine & Trim(DB_Dsv(Dr("dbname"), ""))

                If Trim(DB_Dsv(Dr("servername"), "")) <> "" Then
                    Dborigine = Dborigine & "@" & Trim(DB_Dsv(Dr("servername"), ""))
                End If

                Dborigine = Dborigine & ":"

                Tborigine = Trim(DB_Dsv(Dr("tabname"), ""))

                DB_DataReaderClose(Dr, Cmd)

                ' estraggo lista campi dalla tabella reale

                Sql = ""
                Sql = Sql & " SELECT tabid, tabtype " & vbCrLf
                Sql = Sql & "   FROM " & Trim(Dborigine) & "systables AS systables " & vbCrLf
                Sql = Sql & "  WHERE tabname = '" & Trim(Tborigine) & "' " & vbCrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                If Dr.Read Then
                    Tabid = Trim(DB_Dsv(Dr("tabid"), 0))
                    Tabtype = Trim(DB_Dsv(Dr("tabtype"), ""))
                    DB_DataReaderClose(Dr, Cmd)
                Else
                    DB_DataReaderClose(Dr, Cmd)
                    Exit Sub
                End If

                If Trim(Tabtype) = "T" Then

                    Sql = ""
                    Sql = Sql & " SELECT * " & vbCrLf
                    Sql = Sql & "   FROM " & Trim(Dborigine) & "syscolumns AS syscolumns " & vbCrLf
                    Sql = Sql & "  WHERE tabid = " & Tabid & vbCrLf
                    Sql = Sql & "  ORDER BY colno " & vbCrLf

                Else
                    Exit Sub
                End If
            Else
                Exit Sub
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            Sql_Clone = "CREATE TABLE " & Trim(table_clone) & " ( " & vbCrLf

            While Dr.Read

                Colname = Trim(DB_Dsv(Dr("colname"), ""))
                Coltype = DB_Dsv(Dr("coltype"), 0)
                Collength = DB_Dsv(Dr("collength"), 0)

                If (Coltype >= 256) Then
                    Coltype = Coltype - 256
                    flag_not_null = True
                Else
                    flag_not_null = False
                End If

                Sql_Clone = Sql_Clone & Colname & " "

                Select Case Coltype
                    Case 0 : Sql_Clone = Sql_Clone & "CHAR(" & Trim(Str(Collength)) & ")"
                    Case 1 : Sql_Clone = Sql_Clone & "SMALLINT"
                    Case 2 : Sql_Clone = Sql_Clone & "INTEGER"
                    Case 3 : Sql_Clone = Sql_Clone & "FLOAT"
                    Case 4 : Sql_Clone = Sql_Clone & "SMALLFLOAT"
                    Case 5, 8
                        dec_prec = Collength \ 256
                        dec_scale = Collength Mod 256

                        If Coltype = 5 Then
                            If dec_scale <> 255 Then
                                Sql_Clone = Sql_Clone & "DECIMAL(" & Trim(Str(dec_prec)) & "," & Trim(Str(dec_scale)) & ")"
                            Else
                                Sql_Clone = Sql_Clone & "DECIMAL(" & Trim(Str(dec_prec)) & ")"
                            End If
                        Else
                            If dec_scale <> 255 Then
                                Sql_Clone = Sql_Clone & "MONEY(" & Trim(Str(dec_prec)) & "," & Trim(Str(dec_scale)) & ")"
                            Else
                                Sql_Clone = Sql_Clone & "MONEY(" & Trim(Str(dec_prec)) & ")"
                            End If
                        End If

                    Case 6 : Sql_Clone = Sql_Clone & "SERIAL"
                    Case 7 : Sql_Clone = Sql_Clone & "DATE"

                    Case 10, 14

                        dtime_min = Collength Mod 16
                        dtime_max = Collength - dtime_min
                        dtime_max = (dtime_max Mod 256) \ 16

                        Select Case dtime_max
                            Case 0 : datetime_max = "YEAR"
                            Case 2 : datetime_max = "MONTH"
                            Case 4 : datetime_max = "DAY"
                            Case 6 : datetime_max = "HOUR"
                            Case 8 : datetime_max = "MINUTE"
                            Case 10 : datetime_max = "SECOND"
                            Case 11, 12, 13, 14, 15 : datetime_max = "FRACTION(" & Trim(Str(dtime_max - 10)) & ")"
                            Case Else
                                datetime_max = ""
                        End Select

                        Select Case dtime_min
                            Case 0 : datetime_min = "YEAR"
                            Case 2 : datetime_min = "MONTH"
                            Case 4 : datetime_min = "DAY"
                            Case 6 : datetime_min = "HOUR"
                            Case 8 : datetime_min = "MINUTE"
                            Case 10 : datetime_min = "SECOND"
                            Case 11, 12, 13, 14, 15 : datetime_min = "FRACTION(" & Trim(Str(dtime_min - 10)) & ")"
                            Case Else
                                datetime_min = ""
                        End Select

                        If Coltype = 10 Then
                            Sql_Clone = Sql_Clone & "DATETIME " & datetime_max & " to " & datetime_min & ""
                        Else
                            Sql_Clone = Sql_Clone & "INTERVAL " & datetime_max & " to " & datetime_min & ""
                        End If

                    Case 11 : Sql_Clone = Sql_Clone & "BYTE"
                    Case 12 : Sql_Clone = Sql_Clone & "TEXT"
                    Case 13, 16

                        If Collength >= 0 Then
                            varchar_min = Collength \ 256
                            varchar_max = Collength Mod 256
                        Else
                            varchar_min = (Collength + 65536) \ 256
                            varchar_max = (Collength + 65536) Mod 256
                        End If

                        If Coltype = 13 Then
                            Sql_Clone = Sql_Clone & "VARCHAR("
                        Else
                            Sql_Clone = Sql_Clone & "NVARCHAR("
                        End If

                        If varchar_min <> 0 Then
                            Sql_Clone = Sql_Clone & Trim(Str(varchar_max)) & "," & Trim(Str(varchar_min)) & ")"
                        Else
                            Sql_Clone = Sql_Clone & Trim(Str(varchar_max)) & ")"
                        End If

                    Case 15 : Sql_Clone = Sql_Clone & "NCHAR(" & Trim(Str(Collength)) & ")"

                End Select

                If flag_not_null Then
                    Sql_Clone = Sql_Clone & " NOT NULL"
                End If

                Sql_Clone = Sql_Clone & "," & vbCrLf

            End While

            p = InStrRev(Sql_Clone, ",")

            If p > 0 Then
                Sql_Clone = Mid(Sql_Clone, 1, p - 1)
            End If

            DB_DataReaderClose(Dr, Cmd)

            Sql_Clone = Sql_Clone & ")" & vbCrLf

            ' crea la tabella

            If Connection_Clone Is Nothing Then
                DB_SqlExecute(Sql_Clone, Connection, Transaction)
            Else
                DB_SqlExecute(Sql_Clone, Connection_Clone, Transaction_Clone)
            End If

            If Clone_Indexes = True Then

                Sql = ""
                Sql = Sql & " SELECT idxname    , idxtype   , clustered     " & vbCrLf
                Sql = Sql & "      , part1      , part2     , part3         " & vbCrLf
                Sql = Sql & "      , part4      , part5     , part6         " & vbCrLf
                Sql = Sql & "      , part7      , part8     , part9         " & vbCrLf
                Sql = Sql & "      , part10     , part11    , part12        " & vbCrLf
                Sql = Sql & "      , part13     , part14    , part15        " & vbCrLf
                Sql = Sql & "      , part16     " & vbCrLf
                Sql = Sql & "   FROM " & Trim(Dborigine) & "sysindexes AS sysindexes " & vbCrLf
                Sql = Sql & "  WHERE tabid = " & Tabid & vbCrLf
                Sql = Sql & " ORDER BY idxname " & vbCrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                Do While Dr.Read

                    Idx_Fields = ""

                    For p = 3 To 18

                        If Math.Abs(Dr(p)) > 0 Then

                            Sql = ""
                            Sql = Sql & " SELECT colname " & vbCrLf
                            Sql = Sql & "   FROM " & Trim(Dborigine) & "syscolumns AS syscolumns " & vbCrLf
                            Sql = Sql & "  WHERE syscolumns.tabid = " & Tabid & vbCrLf
                            Sql = Sql & "    AND syscolumns.colno = " & Math.Abs(Dr(p)) & vbCrLf

                            DB_DataReaderClose(Dr2, Cmd2)
                            Cmd2 = DB_CommandCreate(Sql, Connection, Transaction)
                            DB_DataReaderExecute(Dr2, Cmd2, Transaction)

                            If Dr2.Read Then

                                If Idx_Fields <> "" Then
                                    Idx_Fields = Idx_Fields & " , "
                                End If

                                Idx_Fields = Idx_Fields & RTrim(Dr2("colname"))

                                If Object_Val(Dr(p)) < 0 Then
                                    Idx_Fields = Idx_Fields & " DESC " & vbCrLf
                                End If
                            End If

                            DB_DataReaderClose(Dr2, Cmd2)

                        End If
                    Next

                    If Idx_Fields <> "" Then

                        Idx_Unique = ""

                        Select Case (DB_Dsv(Dr("idxtype")))
                            Case "U"
                                Idx_Unique = "UNIQUE"
                        End Select

                        Idx_Name = DB_Dsv(Dr("idxname"), "")
                        Idx_Name = Idx_Name.Replace(table_source, table_clone)

                        If Idx_Name.Length > 18 Then
                            Idx_Name = DB_Dsv(Dr("idxname"), "")

                            If InStrRev(Idx_Name, "_") > 0 Then
                                Idx_Suffix = Mid(Idx_Name, InStrRev(Idx_Name, "_"))
                            Else
                                Idx_Suffix = Idx_Name.Replace(table_source, "")
                            End If

                            Idx_Suffix = System.Text.RegularExpressions.Regex.Replace(Idx_Suffix, "[^\d]", "")

                            If Idx_Suffix <> "" Then
                                Idx_Name = Mid(table_clone, 1, 18 - (Idx_Suffix.Length + 1)) & "_" & Idx_Suffix
                            End If

                            If Connection_Clone Is Nothing Then
                                If DB_IndexExists(Idx_Name, Connection, Transaction) Then
                                    Idx_Name = DB_GetTempIndexName(table_clone, Connection, Transaction)
                                End If
                            Else
                                If DB_IndexExists(Idx_Name, Connection_Clone, Transaction_Clone) Then
                                    Idx_Name = DB_GetTempIndexName(table_clone, Connection_Clone, Transaction_Clone)
                                End If
                            End If
                        End If

                        Sql_Clone = ""
                        Sql_Clone = Sql_Clone & " CREATE " & Idx_Unique & " INDEX " & Idx_Name & vbCrLf
                        Sql_Clone = Sql_Clone & " ON " & Trim(table_clone) & vbCrLf
                        Sql_Clone = Sql_Clone & " ( " & vbCrLf
                        Sql_Clone = Sql_Clone & Idx_Fields & vbCrLf
                        Sql_Clone = Sql_Clone & " ) " & vbCrLf

                        If Connection_Clone Is Nothing Then
                            DB_SqlExecute(Sql_Clone, Connection, Transaction)
                        Else
                            DB_SqlExecute(Sql_Clone, Connection_Clone, Transaction_Clone)
                        End If

                    End If

                Loop

                DB_DataReaderClose(Dr, Cmd)

            End If

        Finally

            DB_DataReaderClose(Dr, Cmd)
            DB_DataReaderClose(Dr2, Cmd2)

        End Try

    End Sub

    '
    ' Data una tabella in ingresso ricava i riferimenti alla tabella di origine
    ' La tabella di ingresso infatti potrebbe essere una vista oppue un sinonimo
    '
    Public Sub DB_TableOrigin(ByVal Source_Tab As String, ByRef Origin_TabId As Integer, ByRef Origin_TabName As String, ByRef Origin_Db As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing)
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim TabId As Integer
        Dim TabType As String

        Try

            Origin_TabId = -1
            Origin_TabName = ""
            Origin_Db = ""

            If Trim(Source_Tab) = "" Then
                Exit Sub
            End If

            DB_GetPrimaryDbObject(Connection, Transaction)

            ' legge il tabid della tabella sorgente

            Sql = ""
            Sql = Sql & " SELECT tabid, tabtype " & vbCrLf
            Sql = Sql & "   FROM systables " & vbCrLf
            Sql = Sql & "  WHERE tabname = '" & Trim(Source_Tab) & "'" & vbCrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            If Dr.Read Then
                TabId = DB_Dsv(Dr("tabid"), -1)
                TabType = Trim(DB_Dsv(Dr("tabtype"), ""))
            Else
                Exit Sub
            End If

            DB_DataReaderClose(Dr, Cmd)

            If Trim(TabType) = "T" Or Trim(TabType) = "V" Then

                Origin_TabId = TabId
                Origin_TabName = Source_Tab
                Origin_Db = DB_GetConnectionInfo("DB")

            ElseIf Trim(TabType) = "S" Then

                Sql = ""
                Sql = Sql & " SELECT * " & vbCrLf
                Sql = Sql & "   FROM syssyntable " & vbCrLf
                Sql = Sql & "  WHERE tabid = " & TabId & vbCrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                DB_DataReaderExecute(Dr, Cmd, Transaction)

                If Dr.Read Then

                    If DB_Dsv(Dr("btabid"), "") <> "" Then
                        '
                        'Riferimento ad una tabella dello stesso database
                        '
                        TabId = DB_Dsv(Dr("btabid"), 0)

                        Sql = ""
                        Sql = Sql & " SELECT * " & vbCrLf
                        Sql = Sql & "   FROM systables " & vbCrLf
                        Sql = Sql & "  WHERE tabid = " & TabId & vbCrLf

                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                        DB_DataReaderExecute(Dr, Cmd, Transaction)

                        If Dr.Read Then
                            Origin_TabId = DB_Dsv(Dr("tabid"), -1)
                            Origin_TabName = Trim(DB_Dsv(Dr("tabname"), ""))
                            Origin_Db = DB_GetConnectionInfo("DB")
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                        Exit Sub

                    Else

                        Origin_TabName = Trim(DB_Dsv(Dr("tabname"), ""))

                        Origin_Db = Trim(DB_Dsv(Dr("dbname"), ""))

                        If Trim(DB_Dsv(Dr("servername"), "")) <> "" Then
                            Origin_Db = Origin_Db & "@" & Trim(DB_Dsv(Dr("servername"), ""))
                        End If

                        Sql = ""
                        Sql = Sql & " SELECT * " & vbCrLf
                        Sql = Sql & "   FROM " & Origin_Db & ":systables " & vbCrLf
                        Sql = Sql & "  WHERE tabname = '" & Getv(Origin_TabName) & "'" & vbCrLf

                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql, Connection, Transaction)
                        DB_DataReaderExecute(Dr, Cmd, Transaction)

                        If Dr.Read Then
                            Origin_TabId = DB_Dsv(Dr("tabid"), -1)
                        Else
                            Origin_TabId = -1
                            Origin_TabName = ""
                            Origin_Db = ""
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                        Exit Sub

                    End If

                End If

                DB_DataReaderClose(Dr, Cmd)

            End If

        Catch ex As Exception

            Origin_TabId = -1
            Origin_TabName = ""
            Origin_Db = ""

            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Sub

    '
    ' Data una tabella di riferimento controlla che una tabella confrontata abbia gli stessi campi , dello stesso tipo
    ' e nella stessa posizione
    '
    Public Function DB_TablesCompare(ByVal Nome_Tabella_Rif As String, ByVal Nome_Tabella_Conf As String, Optional ByVal Db_Conf As String = "", Optional ByVal Order_Colname As Boolean = False) As Boolean
        Dim CmdTabella As DB2Command = Nothing
        Dim DrTabella As DB2DataReader = Nothing
        Dim Sql As String
        Dim NrFields As Integer
        Dim Rif_Systables As String = ""
        Dim Rif_Syscolumns As String = ""
        Dim Conf_Systables As String = ""
        Dim Conf_Syscolumns As String = ""
        Dim Rif_Origin_Tabid As Integer
        Dim Rif_Origin_Tabname As String = ""
        Dim Rif_Origin_Db As String = ""

        DB_TablesCompare = True

        Try

            DB_TableOrigin(Nome_Tabella_Rif, Rif_Origin_Tabid, Rif_Origin_Tabname, Rif_Origin_Db)

            If Getv(Rif_Origin_Db) <> "" Then
                Rif_Systables = Trim(Getv(Rif_Origin_Db)) & ":"
                Rif_Syscolumns = Trim(Getv(Rif_Origin_Db)) & ":"
            End If

            Rif_Systables = Rif_Systables & "systables"
            Rif_Syscolumns = Rif_Syscolumns & "syscolumns"

            If Getv(Db_Conf) <> "" Then
                Conf_Systables = Db_Conf & ":"
                Conf_Syscolumns = Db_Conf & ":"
            End If
            Conf_Systables = Conf_Systables & "systables"
            Conf_Syscolumns = Conf_Syscolumns & "syscolumns"

            Sql = ""
            Sql = Sql & " SELECT c1.colname AS nome1, c1.colno AS nrcol1, c1.coltype AS tipo1, c1.collength AS lun1 " & vbCrLf
            Sql = Sql & "      , c2.colname AS nome2, c2.colno AS nrcol2, c2.coltype AS tipo2, c2.collength as lun2 " & vbCrLf
            Sql = Sql & "   FROM " & Rif_Systables & " AS t1 " & vbCrLf
            Sql = Sql & "      , " & Rif_Syscolumns & " AS c1 " & vbCrLf
            Sql = Sql & "      , " & Conf_Systables & " AS t2 " & vbCrLf
            Sql = Sql & "      , " & Conf_Syscolumns & " AS c2 " & vbCrLf
            Sql = Sql & "  WHERE t1.tabname = '" & Rif_Origin_Tabname & "' " & vbCrLf
            Sql = Sql & "    AND t1.tabid   = c1.tabid " & vbCrLf
            Sql = Sql & "    AND t2.tabname = '" & Nome_Tabella_Conf & "' " & vbCrLf
            Sql = Sql & "    AND t2.tabid   = c2.tabid " & vbCrLf

            If Order_Colname = True Then
                Sql = Sql & "    AND c1.colname = c2.colname " & vbCrLf
                Sql = Sql & "  ORDER BY c1.colname ASC " & vbCrLf
            Else
                Sql = Sql & "    AND c1.colno   = c2.colno " & vbCrLf
                Sql = Sql & "  ORDER BY c1.colno ASC " & vbCrLf
            End If

            DB_DataReaderClose(DrTabella, CmdTabella)
            CmdTabella = DB_CommandCreate(Sql)
            DB_DataReaderExecute(DrTabella, CmdTabella)

            NrFields = 0

            Do While DrTabella.Read

                NrFields = NrFields + 1

                If RTrim(DB_Dsv(DrTabella("nome1"))) <> RTrim(DB_Dsv(DrTabella("nome2"))) Then
                    DB_TablesCompare = False
                    Exit Do
                End If

                If Object_Val(DB_Dsv(DrTabella("tipo1"))) <> Object_Val(DB_Dsv(DrTabella("tipo2"))) Then
                    DB_TablesCompare = False
                    Exit Do
                End If

                If Object_Val(DB_Dsv(DrTabella("lun1"))) <> Object_Val(DB_Dsv(DrTabella("lun2"))) Then
                    DB_TablesCompare = False
                    Exit Do
                End If

            Loop

            DB_DataReaderClose(DrTabella, CmdTabella)

            If NrFields = 0 Then
                DB_TablesCompare = False
            End If

        Catch ex As Exception

            MsgErr(ex)

        Finally

            DB_DataReaderClose(DrTabella, CmdTabella)

        End Try

    End Function
    '
    ' Elimina una tabella dal database; questa funzione viene usata per eliminare le tabelle temporanee
    '
    Public Sub DB_TableDrop(ByVal Tablename As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing)

        Try
            DB_GetPrimaryDbObject(Connection, Transaction)

            If DB_TableExists(Tablename, Connection, Transaction) Then
                DB_SqlExecute("DROP TABLE " & Trim(Tablename), Connection, Transaction)
            End If
        Catch ex As Exception
        End Try

    End Sub
    '
    ' Ritorna true se la tabella esiste
    '
    Public Function DB_TableExists(ByVal Tablename As String, Optional ByVal Connection As DB2Connection = Nothing, Optional ByVal Transaction As DB2Transaction = Nothing, Optional ByVal Tabtype As String = "") As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String

        DB_TableExists = False

        Try

            If Trim(Tablename) = "" Then
                DB_TableExists = False
                Exit Function
            End If

            DB_GetPrimaryDbObject(Connection, Transaction)

            Sql = ""
            Sql = Sql & " SELECT tabname " & vbCrLf
            Sql = Sql & "   FROM systables " & vbCrLf
            Sql = Sql & "  WHERE tabname = '" & Tablename & "'" & vbCrLf

            If Tabtype <> "" Then
                Sql = Sql & "  AND tabtype = '" & Tabtype & "'" & vbCrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql, Connection, Transaction)
            DB_DataReaderExecute(Dr, Cmd, Transaction)

            If Dr.Read Then
                DB_TableExists = True
            End If

        Catch ex As Exception

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Restituisce una stringa con la lista dei campi presenti in una tabella, separati da ","
    '
    Public Function DB_TableFields(Tablename As String) As String
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim sql As String
        Dim s As String
        Dim Origin_Tabid As Integer
        Dim Origin_Tabname As String = ""
        Dim Origin_Db As String = ""

        Try

            DB_TableFields = ""

            If RTrim(Tablename) = "" Then
                Exit Function
            End If

            DB_TableOrigin(Tablename, Origin_Tabid, Origin_Tabname, Origin_Db)

            If Origin_Tabid > -1 Then

                sql = ""
                sql = sql & "SELECT syscolumns.colname, syscolumns.colno " & vbCrLf
                sql = sql & "  FROM " & Origin_Db & ":syscolumns AS syscolumns " & vbCrLf
                sql = sql & "     , " & Origin_Db & ":systables AS systables " & vbCrLf
                sql = sql & " WHERE systables.tabname   = '" & Origin_Tabname & "' " & vbCrLf
                sql = sql & "   AND  syscolumns.tabid   = systables.tabid " & vbCrLf
                sql = sql & " ORDER BY syscolumns.colno " & vbCrLf

                DB_DataReaderClose(Dr, Cmd)
                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                s = ""

                While Dr.Read
                    If s <> "" Then s &= ","
                    s &= RTrim(DB_Dsv(Dr("colname")))
                End While

                DB_TableFields = s
            End If

        Catch ex As Exception

            MsgErr(ex)
            DB_TableFields = ""

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function
    '
    ' Aggiorna la data dell'ultimo login usata per il controllo password memorizzata nella tabella usertab
    '
    Public Function DB_UpdateUserPwdLoginDate(Optional ByRef splash_form As Form = Nothing) As Boolean
        Dim Sql As String
        Dim Flag_Chk_User_Pwd As String = ""

        DB_UpdateUserPwdLoginDate = False

        Try

            ' verifica se si deve aggiornare la data dell'ultimo login per il controllo della password dell'utente

            If DB_FieldExists("server", "flag_chk_user_pwd") = False Then
                DB_UpdateUserPwdLoginDate = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd", "server", "", Flag_Chk_User_Pwd)

            If Trim(Flag_Chk_User_Pwd) <> "S" Then
                DB_UpdateUserPwdLoginDate = True
                Exit Function
            End If

            If DB_FieldExists("usertab", "flag_chk_user_pwd") = False Then
                DB_UpdateUserPwdLoginDate = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd", "usertab", "user_id='" & DB_GetConnectionInfo("uid") & "'", Flag_Chk_User_Pwd)

            If Trim(Flag_Chk_User_Pwd) <> "S" Then
                DB_UpdateUserPwdLoginDate = True
                Exit Function
            End If

            ' aggiorna la data dell'ultimo login per il controllo della password dell'utente

            Sql = ""
            Sql = Sql & "update usertab "
            Sql = Sql & "set    date_last_login = today "
            Sql = Sql & "where  user_id = '" & DB_GetConnectionInfo("uid") & "'"

            DB_SqlExecute(Sql, DB_Conn, DB_Transaction)

            DB_UpdateUserPwdLoginDate = True

        Catch ex As Exception

            If Not (splash_form Is Nothing) Then
                splash_form.Close()
            End If

            MsgErr(ex)

        End Try

    End Function
    '
    ' Aggiorna lo stato della password dell'utente corrente memorizzato nella tabella usertab
    '
    Public Function DB_UpdateUserPwdStatus(ByVal New_User_Pwd As String) As Boolean
        Dim Sql As String
        Dim Flag_Chk_User_Pwd As String = ""

        DB_UpdateUserPwdStatus = False

        Try

            ' verifica se si deve aggiornare lo stato della password dell'utente

            If DB_FieldExists("server", "flag_chk_user_pwd") = False Then
                DB_UpdateUserPwdStatus = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd", "server", "", Flag_Chk_User_Pwd)

            If Trim(Flag_Chk_User_Pwd) <> "S" Then
                DB_UpdateUserPwdStatus = True
                Exit Function
            End If

            If DB_FieldExists("usertab", "flag_chk_user_pwd") = False Then
                DB_UpdateUserPwdStatus = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd", "usertab", "user_id='" & DB_GetConnectionInfo("uid") & "'", Flag_Chk_User_Pwd)

            If Trim(Flag_Chk_User_Pwd) <> "S" Then
                DB_UpdateUserPwdStatus = True
                Exit Function
            End If

            ' aggiorna lo stato della password dell'utente e memorizza la nuova password criptata

            Sql = ""
            Sql = Sql & "update usertab "
            Sql = Sql & "set    date_last_login    = today, "
            Sql = Sql & "       date_last_pwd_chg  = today, "
            Sql = Sql & "       flag_force_pwd_chg = 'N', "
            Sql = Sql & "       exp_date_pwd       = Null, "
            Sql = Sql & "       last_pwd_used10    = last_pwd_used9, "
            Sql = Sql & "       last_pwd_used9     = last_pwd_used8, "
            Sql = Sql & "       last_pwd_used8     = last_pwd_used7, "
            Sql = Sql & "       last_pwd_used7     = last_pwd_used6, "
            Sql = Sql & "       last_pwd_used6     = last_pwd_used5, "
            Sql = Sql & "       last_pwd_used5     = last_pwd_used4, "
            Sql = Sql & "       last_pwd_used4     = last_pwd_used3, "
            Sql = Sql & "       last_pwd_used3     = last_pwd_used2, "
            Sql = Sql & "       last_pwd_used2     = last_pwd_used1, "
            Sql = Sql & "       last_pwd_used1     = '" & DB_EncryptUserPwd(New_User_Pwd) & "' "
            Sql = Sql & "where  user_id            = '" & DB_GetConnectionInfo("uid") & "' "

            DB_SqlExecute(Sql, DB_Conn, DB_Transaction)

            DB_UpdateUserPwdStatus = True

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Function
    '
    ' Effettua la validazione della password dell'utente verificando che non stia per scadere o sia già scaduta;
    ' in caso affermativo attiva la form per modificare la password;
    '
    Public Function DB_ValidateUserPwd(Optional ByRef splash_form As Form = Nothing) As Boolean
        Dim Flag_Chk_User_Pwd As Object = Nothing
        Dim Min_Days_Pwd_Valid_Server As Object = Nothing
        Dim Max_Days_Pwd_Valid_Server As Object = Nothing
        Dim Days_Notice_Pwd_Ex_Server As Object = Nothing
        Dim Date_Last_Login As Object = Nothing
        Dim Date_Last_Pwd_Chg As Object = Nothing
        Dim Flag_Force_Pwd_Chg As Object = Nothing
        Dim Days_Notice_Pwd_Ex As Object = Nothing
        Dim Days_After_Exp_Log As Object = Nothing
        Dim Min_Days_Pwd_Valid As Object = Nothing
        Dim Max_Days_Pwd_Valid As Object = Nothing
        Dim Exp_Date_Pwd As Object = Nothing
        Dim Current_Date As Object = Nothing
        Dim Expiration_Date As Object = Nothing
        Dim App_Name As String
        Dim Flag_First_Login_Today As Boolean
        Dim Message As String

        DB_ValidateUserPwd = False

        Try

            ' ricava i parametri di controllo password a livello di server

            If DB_FieldExists("server", "flag_chk_user_pwd") = False Then
                DB_ValidateUserPwd = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd, min_days_pwd_valid, max_days_pwd_valid, days_notice_pwd_ex", "server", "", Flag_Chk_User_Pwd, Min_Days_Pwd_Valid_Server, Max_Days_Pwd_Valid_Server, Days_Notice_Pwd_Ex_Server)

            If Trim(Flag_Chk_User_Pwd) <> "S" Then
                DB_ValidateUserPwd = True
                Exit Function
            End If

            ' ricava i parametri di controllo password relativi all'utente

            If DB_FieldExists("usertab", "flag_chk_user_pwd") = False Then
                DB_ValidateUserPwd = True
                Exit Function
            End If

            DB_LookUp("flag_chk_user_pwd, date_last_login, date_last_pwd_chg, flag_force_pwd_chg, days_notice_pwd_ex, days_after_exp_log, min_days_pwd_valid, max_days_pwd_valid, exp_date_pwd", "usertab", "user_id='" & DB_GetConnectionInfo("uid") & "'", Flag_Chk_User_Pwd, Date_Last_Login, Date_Last_Pwd_Chg, Flag_Force_Pwd_Chg, Days_Notice_Pwd_Ex, Days_After_Exp_Log, Min_Days_Pwd_Valid, Max_Days_Pwd_Valid, Exp_Date_Pwd)

            If Trim(Flag_Chk_User_Pwd) <> "S" Then
                DB_ValidateUserPwd = True
                Exit Function
            End If

            If Field_Null(Days_Notice_Pwd_Ex) Then
                If Not Field_Null(Days_Notice_Pwd_Ex_Server) Then
                    Days_Notice_Pwd_Ex = Days_Notice_Pwd_Ex_Server
                Else
                    Days_Notice_Pwd_Ex = 0
                End If
            End If

            If Field_Null(Days_After_Exp_Log) Then
                Days_After_Exp_Log = 0
            End If

            If Field_Null(Min_Days_Pwd_Valid) Then
                If Not Field_Null(Min_Days_Pwd_Valid_Server) Then
                    Min_Days_Pwd_Valid = Min_Days_Pwd_Valid_Server
                Else
                    Min_Days_Pwd_Valid = 0
                End If
            End If

            If Field_Null(Max_Days_Pwd_Valid) Then
                If Not Field_Null(Max_Days_Pwd_Valid_Server) Then
                    Max_Days_Pwd_Valid = Max_Days_Pwd_Valid_Server
                Else
                    Max_Days_Pwd_Valid = 0
                End If
            End If

            ' ricava il nome dell'applicazione

            App_Name = LCase(My.Application.Info.AssemblyName)

            ' ricava la data corrente

            DB_LookUp("today", "server", "", Current_Date)

            ' ricava la data di scadenza della password

            Expiration_Date = DBNull.Value

            If Not Field_Null(Exp_Date_Pwd) Then
                Expiration_Date = Exp_Date_Pwd
            Else
                If Not Field_Null(Date_Last_Pwd_Chg) Then
                    Expiration_Date = DB_Sql_Date(DateAdd(DateInterval.Day, Val(Max_Days_Pwd_Valid), DateValue(Date_Last_Pwd_Chg)))
                End If
            End If

            ' verifica se si tratta del primo login del giorno

            Flag_First_Login_Today = True

            If Not Field_Null(Date_Last_Login) Then
                If DateValue(Date_Last_Login) = DateValue(Current_Date) Then
                    Flag_First_Login_Today = False
                End If
            End If

            ' controlla se la password deve essere cambiata perchè richiesto esplicitamente dall'amministratore di sistema;
            ' in caso affermativo visualizza la finestra per il cambio obbligatorio della password;

            If Trim(Flag_Force_Pwd_Chg) = "S" Then

                If Not (splash_form Is Nothing) Then
                    splash_form.Close()
                End If

                r_login.Login_Type = 7
                r_login.Text_Mod_Pwd = "E' necessario modificare la password."
                r_login.ShowDialog()

                DB_ValidateUserPwd = r_login.Flag_Mod_Pwd

                r_login.Dispose()

                Exit Function

            End If

            ' controlla se la password è scaduta oltre i giorni massimi ammessi;
            ' in caso affermativo informa l'utente ed impedisce l'accesso ad Ergdis;

            If Not Field_Null(Expiration_Date) Then

                If (DateAdd(DateInterval.Day, Val(Days_After_Exp_Log), DateValue(Expiration_Date))) < DateValue(Current_Date) Then

                    If Not (splash_form Is Nothing) Then
                        splash_form.Close()
                    End If

                    Message = ""
                    Message = Message & "Attenzione!!!" & vbLf & vbLf & "La password è scaduta il " & DB_Sql_Date(Getv(Expiration_Date)) & "." & vbLf & vbLf

                    If Val(Days_After_Exp_Log) > 0 Then
                        Message = Message & "Sono trascorsi più di " & Str(Trim(Days_After_Exp_Log)) & " giorni dalla scadenza." & vbLf & vbLf
                    End If

                    Message = Message & "Non è pertanto possibile accedere ad ERGDIS." & vbLf & vbLf
                    Message = Message & "Contattare l'amministratore di sistema."

                    Beep()
                    XtraMessageBox.Show(Message, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)

                    DB_ValidateUserPwd = False

                    Exit Function
                End If

            End If

            ' controlla se la password è scaduta ma non è ancora stato superato il limite massimo di giorni;
            ' in caso affermativo visualizza la finestra per il cambio facoltativo della password;
            ' questo controllo viene sempre fatto se l'applicazione è ergmen o ergmen2 oppure se si tratta del primo
            ' login del giorno;

            If (App_Name = "ergmen") Or (App_Name = "ergmen2") Or (Flag_First_Login_Today = True) Then

                If Not Field_Null(Expiration_Date) Then

                    If DateValue(Expiration_Date) <= DateValue(Current_Date) Then

                        If Not (splash_form Is Nothing) Then
                            splash_form.Close()
                        End If

                        r_login.Login_Type = 6

                        If DateValue(Expiration_Date) < DateValue(Current_Date) Then
                            r_login.Text_Mod_Pwd = "La password è scaduta il " & DB_Sql_Date(Getv(Expiration_Date)) & "."
                        Else
                            r_login.Text_Mod_Pwd = "La password scade oggi."
                        End If

                        r_login.ShowDialog()

                        DB_ValidateUserPwd = r_login.Flag_Mod_Pwd

                        r_login.Dispose()

                        Exit Function

                    End If

                End If

            End If

            ' controlla se, in base ai giorni di preavviso, la password sta per scadere;
            ' in caso affermativo visualizza la finestra per il cambio facoltativo della password;
            ' questo controllo viene sempre fatto se l'applicazione è ergmen o ergmen2 oppure se si tratta del primo
            ' login del giorno;

            If (App_Name = "ergmen") Or (App_Name = "ergmen2") Or (Flag_First_Login_Today = True) Then

                If Not Field_Null(Expiration_Date) Then

                    If (DateAdd(DateInterval.Day, -Val(Days_Notice_Pwd_Ex), DateValue(Expiration_Date))) <= DateValue(Current_Date) Then

                        If Not (splash_form Is Nothing) Then
                            splash_form.Close()
                        End If

                        r_login.Login_Type = 6
                        r_login.Text_Mod_Pwd = "La password scadrà il " & DB_Sql_Date(Getv(Expiration_Date)) & "."
                        r_login.ShowDialog()

                        DB_ValidateUserPwd = r_login.Flag_Mod_Pwd

                        r_login.Dispose()

                        Exit Function

                    End If

                End If

            End If

            ' aggiorna la data dell'ultimo login

            If Flag_First_Login_Today = True Then

                If DB_UpdateUserPwdLoginDate(splash_form) = False Then
                    DB_ValidateUserPwd = False
                    Exit Function
                End If

            End If

            DB_ValidateUserPwd = True

        Catch ex As Exception

            If Not (splash_form Is Nothing) Then
                splash_form.Close()
            End If

            MsgErr(ex)

        End Try

    End Function

End Module
