Imports DevExpress.XtraEditors
Imports DevExpress.XtraGrid.Views.Grid
Imports DevExpress.Utils.Menu
Imports DevExpress.Utils
Imports DevExpress.XtraGrid
Imports DevExpress.XtraGrid.Menu
Imports DevExpress.XtraGrid.Views.Base.ViewInfo
Imports DevExpress.XtraGrid.Views.Grid.ViewInfo
Imports DevExpress.XtraGrid.Columns
Imports System.IO
Imports pp_pianprod.lib_pianprod_elab
Imports System.Threading.Tasks

Public Class f_pianmrp

    Dim Sql As String = ""
    Dim EditMask As String = ""

    Dim Cmd_Sel_Qta_Ordforn_Data As DB2Command
    Dim Dr_Sel_Qta_Ordforn_Data As DB2DataReader

    Dim Cmd_Sel_Qta_Ordc_Data As DB2Command
    Dim Dr_Sel_Qta_Ordc_Data As DB2DataReader

    Dim Cmd_Sel_Qta_Prod_Data As DB2Command
    Dim Dr_Sel_Qta_Prod_Data As DB2DataReader

    Dim Cmd_Sel_Qta_Pora_Data As DB2Command
    Dim Dr_Sel_Qta_Pora_Data As DB2DataReader

    Dim Tipo_Art_Prod_Testata As String = ""
    Dim Ragg_Prod_Testata As String = ""
    Dim index_selezione As Integer      'indice selezione combobox

    Dim dt_piano As DataTable = Nothing

    Dim dt_grid_pianiprod_det As DataTable
    Dim dr_grid_pianiprod_det As DB2DataReader = Nothing
    Dim cmd_grid_pianiprod_det As DB2Command = Nothing

    Dim dt_grid_pianiprod_det_escl As DataTable
    
    Dim Lista_Date(2, 1) As Object
    Dim Lista_Colori_Col() As Color

    Dim data_agg_prod As String
    Dim cod_art_agg_prod As String
    Dim des_art_agg_prod As String
    Dim tipo_um_agg_prod As String
    Dim id_pp_pianiprod_agg As Long
    Dim nr_riga_pp_pianiprod_agg As Long
    Dim des_i_g_agg As String
    Dim rowIndex_agg_prod As Long
    Dim col_agg_prod As GridColumn = Nothing

    Dim row_ord As DataRow
    Dim row_ord_index As Integer

    Dim flag_load As Boolean

    Dim flag_fatte_mod As Boolean


    '----gestione DRAG & DROP
    Dim down_hitInfo As GridHitInfo = Nothing
    Dim r_handle_drop As Integer
    Dim col_drop As GridColumn
    Dim vet_colonne_valide As List(Of String)       'lista delle colonne valide per il trascinamento degli ordini
    Dim autoScrollHelper As AutoScrollHelper
    '----------

    '----gestione VISULIZZAZIONE ORDINI ASSOCIATI
    Dim WithEvents grid_piano_view_ord As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit        ' campo testo con ricerca
    '----------

    '----gestione VISULIZZAZIONE PIANIFICAZIONI ORARIE
    Dim WithEvents grid_piano_view_ora As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit        ' campo testo con ricerca
    Dim WithEvents grid_piano_view_flag_ora As DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit        ' campo testo con ricerca
    '----------

    '----gestione VQTA PIAN
    Dim WithEvents grid_piano_view_qta_pian As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit       ' campo testo 
    '----------

    '----gestione QTA IMPR
    Dim WithEvents grid_piano_view_qta_impr As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit       ' campo testo con ricerca
    '----------

    '----gestione QTA ORDFORN
    Dim WithEvents grid_piano_view_qta_ordforn As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit    ' campo testo con ricerca
    '----------

    '----gestione dettaglio scadenze/lotti
    Dim gridview_piano_gia_att As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit                     ' giacenza da PP_GIACEPAR/MOVMAG
    '----------

    '----associazione linea produzione
    Dim WithEvents grid_piano_view_cod_linea_prod As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit                     ' pp_pianoprod da cod_linea_prod
    '----------

    '----gestione dettaglio campi query pp_modelli_art
    Dim gridview_artmag_det_query As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit
    Dim gridview_artmag_det_query_dbl As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit
    '----------

    ' \\\\ gestione articoli da pianificare da magazzino

    Dim dt_artmag As DataTable = Nothing
    Dim RowArray_ArtMag() As DataRow = Nothing
    Dim WithEvents gridview_artmag_qta_um As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit           ' usata per gestione quantità da inserire su griglia
    Dim WithEvents gridview_artmag_flag_sel As DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit
    Dim ArtMag_Qta_Um_In_Editing As Boolean = False                                                             ' usato come flag per stabilire se l'utente è in modifica del campo per i refresh dei dati
    Dim Flag_AutoRead As Boolean = False
    Dim Obj_Lock As Object = New Object
    Dim gridview_artmag_dbl_d As DevExpress.XtraEditors.Repository.RepositoryItemTextEdit                      ' usata solo per formattazione su griglia di campi di sola lettura
    Dim gridview_artmag_giacenza_att As DevExpress.XtraEditors.Repository.RepositoryItemButtonEdit             ' pulsante per visualizzazione dettaglio scadenze/lotti
    Dim gridview_artmag_str_40 As DevExpress.XtraEditors.Repository.RepositoryItemTextEdit                      ' usata solo per formattazione su griglia di campi di sola lettura

    ' ////

    '----gestione SALVATAGGIO PIANIPROD
    Dim cod_dep_in_sede As Object
    Dim cod_mag_in_sede As Object


    '----aggiornamento automatico quantità "pianiprod"
    Dim min_data_prod As String
    Dim max_data_prod As String
    Dim da_data_copia As Date
    Dim a_data_copia As Date
    Dim lista_id_qta_pian_prod As String = ""
    Dim dbtempame_art_no_mod As String = ""

    '----calcolo giacenze
    Dim sql_deposito_magazzino As String
    Dim Lista_Dep_Altri As String = ""
    Dim Sql_Dep_Mag_Altri As String = ""
  
    '----------

    '----calcolo qta prodotta
    Dim cod_causpro_cap As Object
    '----------

    '-----gestione LAST FOCUS
    Dim last_column_edit As GridColumn
    '----------

    '-----gestio STATO SPLIT FILTRI
    Dim stato_split As Boolean
    '----------

    '-----gestione selezione tutto ORDINI
    Dim selezione As Boolean
    '----------

    '-----gestione colore rosso su colonna qta_pian_ora_data. Se ho qualcosa si pianificato, inserisce la data di pianificazione nella lista
    'se la data è presente, viene attivato la colorazione della colonna se la qta_pian_ora_data < qta_pian_ord_data oppure se qta_pian_ora_data = 0
    Dim l_pian_ora_data As List(Of String)
    '----------

    Public col_bloccato1 As Color = Color.LightGray
    Public col_bloccato2 As Color = Color.LightGray

    Public col_data12 As Color = Color.Cyan
    Public col_data11 As Color = Color.LightCyan

    Public col_data22 As Color = Color.Yellow
    Public col_data21 As Color = Color.LightYellow

    Public col_pianimpr1 As Color = Color.Red
    Public col_pianimpr2 As Color = Color.LightCoral

    Public col_commesse1 As Color = Color.Green
    Public col_commesse2 As Color = Color.Transparent

    Public col_festivo1 As Color = Color.Gray
    Public col_festivo2 As Color = Color.Gray

    Public col_qta_negative As Color = Color.Red

    ' Griglie di appoggio per esportazione Excel
    Dim gridview_exp_pianiprod_det As New GridView
    Dim WithEvents gridview_exp_artmag As New GridView

    Dim Timer_Refresh_Ordini As Timer = Nothing
    Dim Timer_Refresh_Magazzino As Timer = Nothing

    Dim OrdCli_Sel_In_Editing As Boolean = False
    Dim Tab_Espl_Distinte As String = ""

    Private _lista_Date_Appo As Object

    Dim Where_AppFiltri As String = ""
    Dim listaControlli As New List(Of Control)
    Dim v_incesc(0 To 30) As String
    Dim v_sincesc(0 To 30) As String
    Dim Flag_Mostra_Messaggio As Boolean = False
    Dim Cod_Dep_Old As Object = Nothing

    Public Cod_Prog As Object = Nothing

    Private Property Lista_Date_Appo(p1 As Integer, i_g As Integer) As Object
        Get
            Return _lista_Date_Appo
        End Get
        Set(value As Object)
            _lista_Date_Appo = value
        End Set
    End Property

    ' TO_DO   da valutare le transazioni 

    Private Sub f_pianmrp_FormClosing(sender As Object, e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing

        Pp_Pianiprod_Cancella_Lock(Getv(cod_dep), "", "")

        ' Fermo il timer se è stato inizializzato
        If Not Timer_Refresh_Ordini Is Nothing Then
            Timer_Refresh_Ordini.Stop()
        End If

        If Not Timer_Refresh_Magazzino Is Nothing Then
            Timer_Refresh_Magazzino.Stop()
        End If

        Query_Close()
        DB_RollbackTrans()

    End Sub

    Private Sub Me_Load(sender As System.Object, e As System.EventArgs) Handles Me.Load
        Dim Cmd As DB2Command = Nothing
        Dim Dr As DB2DataReader = Nothing
        Dim Nr_Prog As Object = Nothing

        Try

            Query_Open()

            flag_load = True
            flag_fatte_mod = False

            grid_piano.AllowDrop = True
            grid_pianiprod_det.AllowDrop = True
            vet_colonne_valide = New List(Of String)

            autoScrollHelper = New AutoScrollHelper(grid_piano_view)

            Leggi_pp_modelli_piano(COD_MOD_PIANMRP)

            If Not Field_Null(pp_modelli_piano.num_cifre_dec) Then
                If Object_Val(pp_modelli_piano.num_cifre_dec) > 0 Then
                    EditMask = "#,###,##0."
                    For i = 1 To Object_Val(pp_modelli_piano.num_cifre_dec)
                        EditMask = EditMask & "0"
                    Next
                    EditMask = EditMask & ";"
                Else
                    EditMask = "#,###,##0;"
                End If

            Else
                EditMask = "#,###,##0.000;"
            End If
            Calcola_DaData_AData(COD_MOD_PIANMRP, da_data_pian, a_data_pian)

            ' inizializzazione combo con descrizioni tipo articolo produzione
            If dt_tipo_art_prod_ins.Rows.Count > 0 Then

                For i = 0 To dt_tipo_art_prod_ins.Rows.Count - 1
                    tipo_art_prod_sel.Properties.Items.Add(Trim(DB_Dsv(dt_tipo_art_prod_ins.Rows(i).Item("des_tipo_art_sel"), "")))
                Next

            End If

            tipo_art_prod_sel.Properties.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor
            tipo_art_prod_sel.EditValue = ""

            ' inizializzazione combo con descrizioni dei raggruppamenti 
            tipo_visualizzazione.EditValue = ""
            If dt_ragg_prod_ins.Rows.Count > 0 Then

                For i = 0 To dt_ragg_prod_ins.Rows.Count - 1
                    tipo_visualizzazione.Properties.Items.Add(Trim(DB_Dsv(dt_ragg_prod_ins.Rows(i).Item("des_ragg_prod"), "")))
                Next

            End If
            tipo_visualizzazione.Properties.Items.Add("")

            tipo_visualizzazione.Properties.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

            ' inizializzazione combo descrizione completa tipo_art + ragg_prod

            If dt_tipo_ragg_art_ins.Rows.Count > 0 Then

                For i = 0 To dt_tipo_ragg_art_ins.Rows.Count - 1
                    If Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(i).Item("des_compl"), "")) <> "" Then
                        tipo_ragg_prod_art_sel.Properties.Items.Add(Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(i).Item("des_compl"), "")))
                    End If
                Next

            End If

            tipo_ragg_prod_art_sel.Properties.Items.Add("")

            tipo_ragg_prod_art_sel.Properties.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor
            tipo_ragg_prod_art_sel.EditValue = ""

            If Getv(pp_modelli_piano.Cod_Dep) <> "" Then

                If Getv(pp_modelli_piano.Flag_Dep_Lock) = "S" Then
                    Leggi_Tabgen("DE", Getv(pp_modelli_piano.Cod_Dep), xx1)
                    cod_des_dep.Properties.Items.Add(Getv(pp_modelli_piano.Cod_Dep) & " - " & xx1)
                Else

                    Sql = ""
                    Sql = Sql & " SELECT cod_tab, des_cod " & vbCrLf
                    Sql = Sql & "   FROM tabgen " & vbCrLf
                    Sql = Sql & "  WHERE tipo_tab = 'DE' " & vbCrLf
                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql)
                    DB_DataReaderExecute(Dr, Cmd)

                    Do While Dr.Read
                        cod_des_dep.Properties.Items.Add(DB_Dsv(Dr("cod_tab"), "") & " - " & DB_Dsv(Dr("des_cod"), ""))
                    Loop

                    DB_DataReaderClose(Dr, Cmd)

                End If

                cod_des_dep.Properties.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor
                Leggi_Tabgen("DE", Getv(pp_modelli_piano.Cod_Dep), xx1)
                cod_des_dep.EditValue = Getv(pp_modelli_piano.Cod_Dep) & " - " & xx1
                Setv(cod_dep, Getv(pp_modelli_piano.Cod_Dep))
                Setv(Cod_Dep_Old, Getv(cod_dep))

                Sistema_Query_m_pianprod()
                Sistema_Query_Open()

            Else
                Pp_Pianiprod_Cancella_Lock(Getv(cod_dep), "", "")
                Pp_Pianiprod_Bloccato = False

                If Pp_Pianiprod_Locked(Getv(cod_dep), "", "", True) Then

                    Pp_Pianiprod_Bloccato = True
                    Field_Lock(cmd_salva, True)
                    Field_Lock(cmd_pian_sel0, True)
                    Field_Lock(cmd_pian_sel2, True)
                    label_sola_lettura.Visible = True

                Else
                    Pp_Pianiprod_Registra_Lock(Getv(cod_dep), "", "")
                    Field_Unlock(cmd_salva)
                    Field_Unlock(cmd_pian_sel0)
                    Field_Unlock(cmd_pian_sel2)
                    cmd_salva.Enabled = DB_UpdatePermission
                    label_sola_lettura.Visible = False
                End If
            End If

            lab_modello.Text = DES_MOD_PIANMRP
            lab_modello.Visible = True

            If pp_modelli_piano.flag_vis_det_ord = "N" Then
                split_panel.PanelVisibility = SplitPanelVisibility.Panel1
            Else
                split_panel.SplitterPosition = split_panel.Size.Height / 2
                split_panel.PanelVisibility = SplitPanelVisibility.Both
            End If

            'splitter del filtro
            split_filtri.SplitterPosition = 0

            Me.Text = "Pianificazione Materiali / Fabbisogni" & " - Utente: " & DB_GetConnectionInfo("uid") & " di " & DB_GetConnectionInfo("db") & " - Client: " & DB_GetClientName() & " - Server: " & DB_GetConnectionInfo("host")

            selezione = False

            imposta_lab_pp_giacepar()

            If azienda_agg.flag_pp_giacepar = "S" Then
                lab_pp_giacepar.Visible = True
                cmd_pp_giacepar.Visible = True
            Else
                lab_pp_giacepar.Visible = False
                cmd_pp_giacepar.Visible = False
            End If

            cmd_pp_giacepar.Enabled = DB_UpdatePermission

            Where_AppFiltri = ""
            Leggi_Appfiltri()

            DB_LookUp("prog_pp_pianiprod", "progressivi", "", Cod_Prog)

            If Field_Null(Cod_Prog) Then
                'Impostare il progressivo come il massimo tra:
                'id              di pp_pianiprod
                'id_chiave       di pp_pianiprodrel
                'id_chiavedet    di pp_pianiprodreldet
                XtraMessageBox.Show("ATTENZIONE!" & vbCrLf & vbCrLf & "Progressivo per Pianificazione Produzione non gestito.", Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                Me.Close()
            End If

            DB_LookUp("nr_prog", "prognum", "cod_prog = " & Cod_Prog, Nr_Prog)

            If Object_Val(Nr_Prog) = 0 Then
                Incrementa_Nr_Prog()
            End If

        Catch ex As Exception

            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Sub

    Public Sub New()

        ' Chiamata richiesta dalla finestra di progettazione.
        InitializeComponent()

        ' Aggiungere le eventuali istruzioni di inizializzazione dopo la chiamata a InitializeComponent().

        If Flag_Depositi_Multipli = False Then

            label_deposito.Visible = False
            cod_des_dep.Visible = False

            label_da_data_pian.Location = New Point(8, 56)
            da_data_pian.Location = New Point(104, 56)
            label_a_data_pian.Location = New Point(208, 56)
            a_data_pian.Location = New Point(264, 56)
            split_panel.Location = New Point(8, 80)
            split_panel.Size = New Size(1264, 616)

        End If
       
    End Sub

    Private Sub cmd_esci_Click(sender As Object, e As System.EventArgs) Handles cmd_esci.Click

        Try

            cmd_esci.Focus()
            Application.DoEvents()

            If flag_fatte_mod = True AndAlso Pp_Pianiprod_Bloccato = False Then

                If XtraMessageBox.Show("Sono state fatte delle modifiche che non sono state salvate." & Constants.vbCrLf & "Se si prosegue andranno perse." & Constants.vbCrLf & "Procedere comunque?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.No Then
                    Mouse_Default()
                    Exit Sub
                End If

            End If

            DB_RollbackTrans()

            ' 22/04/2015
            Me.Close()
            'Me.Hide()

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Sub

    Private Sub tipo_visualizzazione_EditValueChanged(sender As Object, e As System.EventArgs) Handles tipo_visualizzazione.EditValueChanged

        index_selezione = tipo_visualizzazione.SelectedIndex

        If index_selezione = -1 Then Exit Sub

        ' #pianificazioneproduzione
        If index_selezione <= dt_ragg_prod_ins.Rows.Count - 1 Then
            Ragg_Prod_Testata = dt_ragg_prod_ins.Rows(index_selezione).Item("ragg_prod")
        Else
            Ragg_Prod_Testata = ""
        End If

        leggi_pp_modelli_col(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)

        Exit Sub

    End Sub

    Private Sub tipo_art_prod_sel_EditValueChanged(sender As Object, e As System.EventArgs) Handles tipo_art_prod_sel.EditValueChanged

        index_selezione = tipo_art_prod_sel.SelectedIndex

        If index_selezione = -1 Then Exit Sub

        ' #pianificazioneproduzione
        If index_selezione <= dt_tipo_art_prod_ins.Rows.Count - 1 Then
            Tipo_Art_Prod_Testata = dt_tipo_art_prod_ins.Rows(index_selezione).Item("tipo_art_sel")
        Else
            Tipo_Art_Prod_Testata = ""
        End If


        '  TO_DO    PER NON FARE ESPLOSIONI SUI SEMILAVORATI
        'cmd_salva.Enabled = (Tipo_Art_Prod_Testata = "PF")

        leggi_pp_modelli_col(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)

        Exit Sub

    End Sub

    Private Sub tipo_ragg_prod_art_sel_EditValueChanged(sender As Object, e As System.EventArgs) Handles tipo_ragg_prod_art_sel.EditValueChanged

        Dim index As Integer

        index = tipo_ragg_prod_art_sel.SelectedIndex

        If index = -1 Then Exit Sub

        ' #pianificazioneproduzione
        If index <= dt_tipo_ragg_art_ins.Rows.Count - 1 Then
            Tipo_Art_Prod_Testata = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("tipo_art_sel"), ""))
            Ragg_Prod_Testata = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("ragg_prod"), ""))
            tipo_art_prod_sel.SelectedItem = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("des_tipo_art_sel"), ""))
            tipo_visualizzazione.SelectedItem = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("des_ragg_prod"), ""))
        Else
            Tipo_Art_Prod_Testata = ""
            Ragg_Prod_Testata = ""
            tipo_art_prod_sel.SelectedItem = ""
            tipo_visualizzazione.SelectedItem = ""
        End If

        leggi_pp_modelli_col(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)

        If Not dt_artmag Is Nothing Then
            gridview_artmag_clear()
            leggi_pp_modelli_rag(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)
            leggi_pp_modelli_art(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)
            imposta_gridview_artmag()
        End If

        cmd_leggi.PerformClick()

        Exit Sub

    End Sub

    Private Sub cmd_leggi_Click(sender As Object, e As System.EventArgs) Handles cmd_leggi.Click
       
        Try

            cmd_leggi.Focus()
            Application.DoEvents()

            Pp_Pianiprod_Cancella_Lock(Getv(cod_dep), "", "")
            Pp_Pianiprod_Bloccato = False

            If Pp_Pianiprod_Locked(Getv(cod_dep), "", "", Flag_Mostra_Messaggio) Then

                Pp_Pianiprod_Bloccato = True
                Field_Lock(cmd_salva, True)
                Field_Lock(cmd_pian_sel0, True)
                Field_Lock(cmd_pian_sel2, True)
                label_sola_lettura.Visible = True

            Else
                Pp_Pianiprod_Registra_Lock(Getv(cod_dep), "", "")
                Field_Unlock(cmd_salva)
                Field_Unlock(cmd_pian_sel0)
                Field_Unlock(cmd_pian_sel2)
                cmd_salva.Enabled = DB_UpdatePermission
                label_sola_lettura.Visible = False

            End If

            If Field_Null(Tipo_Art_Prod_Testata) Then Exit Sub

            If Not Timer_Refresh_Ordini Is Nothing Then
                Timer_Refresh_Ordini.Stop()
            End If

            If flag_fatte_mod = True AndAlso Pp_Pianiprod_Bloccato = False Then

                If XtraMessageBox.Show("Sono state fatte delle modifiche che non sono state salvate." & Constants.vbCrLf & "Se si prosegue con la lettura andranno perse." & Constants.vbCrLf & "Procedere comunque?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.No Then
                    Mouse_Default()
                    Exit Sub
                End If

            End If

            WaitForm_Show(Me, SplashScreenManager2, "Lettura Pianificazioni in corso...")

            Mouse_HourGlass()

            DB_RollbackTrans()

            ''pulizia filtri
            'Container_Cls(grp_filtri)
            'cmd_filtri.ForeColor = Color.Black

            dt_piano = Nothing
            l_pian_ora_data = New List(Of String)

            ' inizio della transazione
            DB_BeginTrans()

            Crea_DataTablePiano(dt_piano, Tipo_Art_Prod_Testata, Ragg_Prod_Testata, da_data_pian, a_data_pian)

            leggi_pp_modelli_rag(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)
            leggi_pp_modelli_art(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)

            Imposta_Grid_Piano(True, Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, da_data_pian, a_data_pian)

            Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian)
            Copia_Dati_Piano(da_data_pian, a_data_pian)
            Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian, a_data_pian, Getv(cod_dep))

            Imposta_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det)
            Imposta_Grid(grid_pianiprod_det_escl, grid_pianiprod_det_view_escl, dt_grid_pianiprod_det_escl)

            Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")
            Leggi_Grid(grid_pianiprod_det_escl, grid_pianiprod_det_view_escl, dt_grid_pianiprod_det_escl, "ESCL")

            flag_fatte_mod = False

            If Tipo_Art_Prod_Testata = "MP" Then
                split_panel.PanelVisibility = SplitPanelVisibility.Panel1
                cmd_ordforn.Visible = True
                grid_piano_view.OptionsView.ShowAutoFilterRow = True
            Else
                'split_panel.PanelVisibility = SplitPanelVisibility.Both
                cmd_ordforn.Visible = False
                If pp_modelli_piano.flag_vis_det_ord = "N" Then
                    split_panel.PanelVisibility = SplitPanelVisibility.Panel1
                Else
                    split_panel.SplitterPosition = split_panel.Size.Height / 2
                    split_panel.PanelVisibility = SplitPanelVisibility.Both
                End If

            End If

            'riposizione focus su ultima colonna editata
            If last_column_edit IsNot Nothing Then
                grid_piano_view.FocusedColumn = last_column_edit
                last_column_edit = Nothing
            End If

            WaitForm_Close(Me, SplashScreenManager2)

            Mouse_Default()

            '' Imposto il timer per generare il refresh automatico dei dati degli ordini
            Timer_Refresh_Ordini = New Timer()
            Timer_Refresh_Ordini.Interval = Getv(min_ordcli_auto_refresh) * 60 * 1000
            AddHandler Timer_Refresh_Ordini.Tick, AddressOf Handler_Timer_Refresh_Ordcli

            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

            'DB_CommitTrans() 19/06/2019

        Catch ex As Exception

            Pp_Pianiprod_Cancella_Lock(Getv(cod_dep), "", "")
            DB_RollbackTrans()

            WaitForm_Close(Me, SplashScreenManager2)
            MsgErr(ex)

        Finally

            WaitForm_Close(Me, SplashScreenManager2)
            Mouse_Default()

        End Try

    End Sub

    Sub Calcola_DaData_AData(cod_mod As String, ByRef da_data As Object, ByRef a_data As Object)
        Dim str_da_data As String
        Dim str_a_data As String
        Dim interval As Microsoft.VisualBasic.DateInterval
        Dim gg As Integer
        Dim flag_da_data_pian As String
        Dim num_da_data_pian As Long
        Dim flag_ini_da_data_p As String
        Dim flag_a_data_pian As String
        Dim num_a_data_pian As Long
        Dim flag_fine_a_data_p As String

        str_da_data = Format(Now, "dd/MM/yyyy")

        ' se trovato record per modello
        If Trim(cod_mod) <> "" Then

            flag_da_data_pian = pp_modelli_piano.flag_da_data_pian
            num_da_data_pian = pp_modelli_piano.num_da_data_pian
            flag_ini_da_data_p = pp_modelli_piano.flag_ini_da_data_p
            flag_a_data_pian = pp_modelli_piano.flag_a_data_pian
            num_a_data_pian = pp_modelli_piano.num_a_data_pian
            flag_fine_a_data_p = pp_modelli_piano.flag_fine_a_data_p

        Else

            flag_da_data_pian = azienda.flag_da_data_pian
            num_da_data_pian = azienda.num_da_data_pian
            flag_ini_da_data_p = azienda.flag_ini_da_data_p
            flag_a_data_pian = azienda.flag_a_data_pian
            num_a_data_pian = azienda.num_a_data_pian
            flag_fine_a_data_p = azienda.flag_fine_a_data_p

        End If

        Select Case flag_da_data_pian
            Case "G"
                interval = DateInterval.Day
            Case "S"
                interval = DateInterval.WeekOfYear
            Case "M"
                interval = DateInterval.Month
        End Select
        str_da_data = Format(DateAdd(interval, num_da_data_pian, DateValue(str_da_data)), "dd/MM/yyyy")

        If flag_ini_da_data_p = "S" Then
            Select Case flag_da_data_pian
                Case "G"
                Case "S"
                    gg = Weekday(str_da_data, FirstDayOfWeek.Monday)
                    str_da_data = Format(DateAdd(DateInterval.Day, (gg - 1) * (-1), DateValue(str_da_data)), "dd/MM/yyyy")
                Case "M"
                    str_da_data = Format(DateValue("01/" & Month(DateValue(str_da_data)) & "/" & Year(DateValue(str_da_data))), "dd/MM/yyyy")
            End Select
        End If

        str_a_data = Format(Now, "dd/MM/yyyy")
        Select Case flag_a_data_pian
            Case "G"
                interval = DateInterval.Day
            Case "S"
                interval = DateInterval.WeekOfYear
            Case "M"
                interval = DateInterval.Month
        End Select
        str_a_data = Format(DateAdd(interval, num_a_data_pian, DateValue(str_a_data)), "dd/MM/yyyy")

        If flag_fine_a_data_p = "S" Then
            Select Case flag_a_data_pian
                Case "G"
                Case "S"
                    gg = Weekday(str_a_data, FirstDayOfWeek.Monday)
                    str_a_data = Format(DateAdd(DateInterval.Day, (7 - gg), DateValue(str_a_data)), "dd/MM/yyyy")
                Case "M"
                    str_a_data = Date_End_Month(DateValue(str_a_data))
            End Select
        End If

        Setv(da_data, str_da_data)
        Setv(a_data, str_a_data)

    End Sub

    ' 1 - salva la pianificazione
    ' 2 - se in azienda è previsto la compilazione automatica allora:
    '   2a - rilegge la pianificazione con periodi esterni a quello a video e filtrando solo per gli articoli interessati
    '   2b - compila le quantità pianificate
    '   2c - salva di nuovo

    Private Sub cmd_salva_Click(sender As Object, e As System.EventArgs) Handles cmd_salva.Click

        Dim str_err As Object
        Dim old_da_data_pian As String = ""
        Dim old_a_data_pian As String = ""

        Try

            cmd_salva.Focus()
            Application.DoEvents()

            If Field_Null(Tipo_Art_Prod_Testata) Then Exit Sub

            If XtraMessageBox.Show("Conferma Salvataggio Piano Produzione." & vbCrLf & vbCrLf & "Procedere?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.No Then
                Exit Sub
            End If

            cmd_salva.Enabled = False

            'DB_BeginTrans() 19/06/2019

            'controllo se nel frattempo sono state lanciate delle commesse

            Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian, a_data_pian, Getv(cod_dep))

            str_err = Check_Valori_Pianificati()

            If Not Field_Null(str_err) Then

                grid_piano_view.FocusedColumn = grid_piano_view.Columns(Getv(str_err).Split("|")(1))
                grid_piano_view.FocusedRowHandle = CInt(Getv(str_err).Split("|")(0))
                grid_piano_view.ShowEditor()

                Exit Sub

            End If

            Elabora_Produzione_Interna_e_Stato(dt_piano)

            If Salva_PP_Pianiprod_Dist(da_data_pian, a_data_pian, dt_piano) Then

                Salva_PP_Pianiprod_Var()

                'flag in azienda per attivare salvataggio in pianiprod
                If azienda_agg.f_salva_pian_prod = "S" Then

                    'se ho salvato tutto senza problemi, allora salvo anche su pianiprod standard
                    If Salva_Pianiprod() Then

                        ' chiusura transazione
                        DB_CommitTrans()

                        '' inizio della transazione
                        'DB_BeginTrans()

                        flag_fatte_mod = False


                        Messaggio_Articoli_Non_Modificati()

                        cmd_leggi.PerformClick()

                    Else
                        DB_RollbackTrans()
                    End If

                Else

                    ' chiusura transazione
                    DB_CommitTrans()

                    '' inizio della transazione
                    'DB_BeginTrans()

                    flag_fatte_mod = False

                    cmd_leggi.PerformClick()


                End If

            Else
                DB_RollbackTrans()
            End If

        Catch ex As Exception

            DB_RollbackTrans()
            WaitForm_Close(Me, SplashScreenManager2)

            MsgErr(ex)

        Finally

            cmd_salva.Enabled = True

        End Try

    End Sub

    Function Salva_PP_Pianiprod_Dist(ByVal da_data As Object, ByVal a_data As Object, dt_piano As DataTable) As Boolean

        Dim giorni_diff As Long
        Dim des_i_g As String
        Dim parametri As String
        Dim cod_art_padre As String
        Dim data_piano As String
        Dim sQuantita As String
        Dim sQuantitaCo As String
        Dim sQuantitaCf As String
        Dim sQuantitaPe As String
        Dim sQuantitaPz As String
        Dim nr_proc As Long
        Dim dbtempname As String = ""
        Dim dbtempname_tot As String = ""
        Dim dbtempname_tot_clone As String = ""

        Dim TabDistinte As String = ""
        Dim sql As String
        Dim flag_trovate_qta As Boolean
        Dim flag_result As String = ""
        Dim cmd_com As DB2Command = Nothing
        Dim dr_com As DB2DataReader = Nothing
        Dim cmd_com2 As DB2Command = Nothing
        Dim dr_com2 As DB2DataReader = Nothing
        Dim tipo_art_prod_comp As String
        Dim cod_art_comp As String
        Dim ragg_prod_comp As String
        Dim cod_linea_prod_pre_comp As String
        Dim cod_ass_prod_pre_comp As String
        Dim qta_comp As Double
        Dim qta_comp_um As Double
        Dim qta_comp_co As Double
        Dim qta_comp_cf As Double
        Dim qta_comp_pz As Double
        Dim qta_comp_pe As Double
        Dim data_impr_comp As String
        Dim cod_um_comp As String
        Dim nr_variante_comp As Long
        Dim id_pp_pianiprod As Long
        Dim nr_riga_pp_pianiprod As Long

        Dim lista_righe_pian As String
        Dim vet_lista_righe_pian() As String
        Dim data_padre As String
        Dim id_padre As Long
        Dim nr_riga_padre As Long
        Dim id_comp_agg As Long
        Dim nr_riga_comp_agg As Long
        Dim qta_padre As Double
        Dim qta_padre_co As Double
        Dim qta_padre_cf As Double
        Dim qta_padre_pe As Double
        Dim qta_padre_pz As Double
        Dim coeff_comp As Double
        Dim fatt_conv_comp As Double
        Dim id_aggiunto_rel As Long
        Dim key_cod_art As String
        Dim key_data_prod As String

        Dim giorni_da_sottrarre As Long
        Dim data_cerca As String

        Dim Db_Conn_Crea As DB2Connection = Nothing
        Dim DB_Transaction_Crea As DB2Transaction = Nothing
        Dim des_art_padre As String = ""
        Dim des_art_comp As String = ""
        Dim str_art As String = ""

        Dim dr_livelli As DB2DataReader = Nothing
        Dim cmd_livelli As DB2Command = Nothing
        Dim livello As Integer

        Dim art_no_dist As String = "ARTICOLI SENZA DISTINTA BASE" & vbCrLf & vbCrLf
        Dim tmp_art As Object = Nothing
        Dim tmp_des_art As Object = Nothing
        Dim flag_art_no_dist = False
        Dim nr_record As Integer

        Dim Dr_Sel_Pp_Pianiprod As DB2DataReader = Nothing
        Dim Cmd_Sel_Pp_Pianiprod As DB2Command = Nothing
        Dim Dr_Sel_Pp_Pianiprodrel As DB2DataReader = Nothing
        Dim Cmd_Sel_Pp_Pianiprodrel As DB2Command = Nothing

        Try

            Salva_PP_Pianiprod_Dist = False

            WaitForm_Show(Me, SplashScreenManager2, "Salvataggio della pianificazione in corso...")



            lista_id_qta_pian_prod = ""
            DB_SqlExecute("DELETE FROM " & dbtempame_art_no_mod)

            giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data)), DateValue(Getv(a_data)))
            If giorni_diff < 0 Then giorni_diff = 0

            'min_data_prod = ""
            'max_data_prod = ""

            Db_Conn_Crea = New DB2Connection(DB_ConnectionString_NET)
            Db_Conn_Crea.Open()

            DB_BeginTrans(Db_Conn_Crea, DB_Transaction_Crea)

            ' crea la tabella temporanea usata dal programma in C (di output)
            dbtempname = DB_GetTempTableName("esplo", Db_Conn_Crea, DB_Transaction_Crea)

            sql = Crea_Sql_Distinta_Esplosa(dbtempname)

            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' tabella totale per aggiornamneto pianiproidtot, struttura simile alla tabella di output di espldist in C
            dbtempname_tot = DB_GetTempTableName("esplt", Db_Conn_Crea, DB_Transaction_Crea)
            dbtempname_tot_clone = DB_GetTempTableName("esplt", Db_Conn_Crea, DB_Transaction_Crea)

            sql = Crea_Sql_Distinta_Esplosa_Tot(dbtempname_tot)
            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            sql = Crea_Sql_Distinta_Esplosa_Tot(dbtempname_tot_clone)
            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' tabella di input di espldist in C
            TabDistinte = DB_GetTempTableName("gestprod", Db_Conn_Crea, DB_Transaction_Crea)

            sql = Crea_Sql_Distinte_Da_Esplodere(TabDistinte)

            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' nella tabella di input di espldist in C vengono aggiunti dei campi che servono poi per i lgeami tra padri e figli
            sql = ""
            sql = sql & " ALTER TABLE " & TabDistinte & " ADD ( "
            sql = sql & " id_pp_pianiprod           INTEGER , " & vbCrLf
            sql = sql & " nr_riga_pp_pianiprod      INTEGER ,  " & vbCrLf
            sql = sql & " qta_co               FLOAT    , " & vbCrLf
            sql = sql & " qta_cf               FLOAT    , " & vbCrLf
            sql = sql & " qta_pe               FLOAT    , " & vbCrLf
            sql = sql & " qta_pz               FLOAT    ) " & vbCrLf

            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            DB_CommitTrans(DB_Transaction_Crea)


            sql = ""
            sql = sql & " DELETE FROM " & dbtempname_tot & vbCrLf

            DB_SqlExecute(sql)

            'cancellazione di tutti gli impegnati produzioni per la pianificazione corrente
            For i_g = 0 To giorni_diff

                des_i_g = Format(i_g, "0000") & "_"

                For i_d = 0 To dt_piano.Rows.Count - 1

                    'calcolo esplosione distinta solamente se le qta pianificate e le qta old sono diverse
                    If Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) And Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) Then
                        Continue For
                    End If

                    If Not Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) AndAlso Not Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) AndAlso Object_Val(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) = Object_Val(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) Then
                        Continue For
                    End If

                    'PULISCO IMPEGNATO PRODUZIONE DI TUTTI I FIGLI DEL COMPONENTE CORRENTE PER GESTIRE LA CANCELLAZIONE
                    'DELLE RELAZIONI IN CASO DI CAMBIO DI GIORNO DI ANTICIPO PRODUZIONE
                    Ricerca_Figlio(dt_piano.Rows(i_d).Item(des_i_g & "id"), 0)
                    '---------------------------------------------------------------------

                Next

            Next


            For i_g = 0 To giorni_diff

                data_piano = Lista_Date(0, i_g)

                des_i_g = Format(i_g, "0000") & "_"

                sql = ""
                sql = sql & " DELETE FROM " & dbtempname & vbCrLf

                DB_SqlExecute(sql, Db_Conn_Crea)


                ' inserimento su tabella temporanea degli articoli con quantità in questa data

                sql = ""
                sql = sql & " DELETE FROM " & TabDistinte & vbCrLf

                DB_SqlExecute(sql, Db_Conn_Crea)

                flag_trovate_qta = False

                For i_d = 0 To dt_piano.Rows.Count - 1

                    'calcolo esplosione distinta solamente se le qta pianificate e le qta old sono diverse
                    If Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) And Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) Then
                        Continue For
                    End If

                    If Not Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) AndAlso Not Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) AndAlso Object_Val(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) = Object_Val(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) Then
                        Continue For
                    End If

                    'se non ho la distinta base dell'articolo non lo aggiungo alla lista degli articoli da esplodre
                    sql = ""
                    sql &= " cod_art = '" & Getv(DB_Dsv(dt_piano.Rows(i_d).Item("cod_art"), "")) & "' AND tipo_riga = 'N'"

                    If Not DB_LookUp("cod_art", "distbase", sql, tmp_art) Then

                        DB_LookUp("cod_art,des_art", "anaart", " cod_art = '" & Getv(DB_Dsv(dt_piano.Rows(i_d).Item("cod_art"), "")) & "'", tmp_art, tmp_des_art)
                        art_no_dist &= " ARTICOLO: " & Getv(tmp_art) & " - " & Getv(tmp_des_art) & vbCrLf
                        flag_art_no_dist = True

                        Continue For

                    End If

                    'GESTIONE RICORSIVA PER LA RICERCA DEL PADRE--------------------------

                    '1: se null controllo il padre. Se il padre è presente nella pianificazione corrente e ha una qta pianificata OK
                    '2: se il padre non è nella visualizzazione corrente oppure ha qta null controllo padre del padre. Se ha qta pianificata inserisco il padre
                    '3: se ho piuù padri, stesso ragionamento su entrambi
                    '4: se non trovo nessun padre, sbatto dentro qta pianificata = impegnato produzione

                    'significa che ho sbiancato la qta_pianificata
                    If Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) And Not Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_old")) Then

                        Ricerca_Padre(dt_piano.Rows(i_d).Item(des_i_g & "id"), 0, TabDistinte, dbtempname_tot, Db_Conn_Crea)

                        flag_trovate_qta = True

                        'Cancellazione dei dati sulla tabella pp_pianiprodreldet in quanto l'articolo è stato de-pianificato

                        sql = ""
                        sql = sql & "DELETE FROM pp_pianiprodreldet " & vbCrLf
                        sql = sql & " WHERE key_cod_art = '" & dt_piano.Rows(i_d).Item("cod_art") & "'" & vbCrLf
                        sql = sql & "   AND key_data_prod = '" & data_piano & "'" & vbCrLf
                        If Getv(cod_dep) <> "" Then
                            sql = sql & " AND cod_dep = '" & Getv(cod_dep) & "'" & vbCrLf
                        End If
                        DB_SqlExecute(sql)



                    End If

                    ' se indicata quantità da pianificare
                    If Not Field_Null(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data")) Then

                        If Not Field_Null(dt_piano.Rows(i_d).Item("cod_art")) Then

                            flag_trovate_qta = True

                            ' esplsione distinta articolo per articolo
                            cod_art_padre = dt_piano.Rows(i_d).Item("cod_art")
                            sQuantita = rf(CDbl(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data"), 0)), "0000000.000")
                            sQuantitaCo = rf(CDbl(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_co"), 0)), "0000000.000")
                            sQuantitaCf = rf(CDbl(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_cf"), 0)), "0000000.000")
                            sQuantitaPe = rf(CDbl(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_pe"), 0)), "0000000.000")
                            sQuantitaPz = rf(CDbl(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "qta_pian_data_pz"), 0)), "0000000.000")


                            ' to_do da rivedere perchè ci possono essere più righe per qta pianificate
                            '       1 riga per ogni data, da pp_pianiprod?

                            id_pp_pianiprod = CLng(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "id"), 0))
                            lista_righe_pian = CStr(DB_Dsv(dt_piano.Rows(i_d).Item(des_i_g & "lista_righe_pian")))


                            vet_lista_righe_pian = lista_righe_pian.Split("|")

                            For i_r = 0 To UBound(vet_lista_righe_pian)

                                If Trim(vet_lista_righe_pian(i_r)) <> "" Then
                                    nr_riga_pp_pianiprod = vet_lista_righe_pian(i_r)
                                    Exit For
                                End If

                            Next i_r

                            'Controllo se nella tabella temporanea con tutte le esplosioni distinte, l'articolo che si intende esplodere esiste già. Se esiste già, non occorre riesploderlo
                            DB_LookUp("count(*)", dbtempname_tot, "key_cod_art = '" & cod_art_padre & "' AND key_data_prod = '" & data_piano & "'", nr_record)

                            If nr_record = 0 Then

                                sql = ""
                                sql = sql & " INSERT INTO " & TabDistinte & vbCrLf
                                sql = sql & " ( cod_art         , "
                                sql = sql & "   tipo_variante   , "
                                sql = sql & "   nr_variante     , "
                                sql = sql & "   qta             , "
                                sql = sql & "   qta_co          , " & vbCrLf
                                sql = sql & "   qta_cf          , " & vbCrLf
                                sql = sql & "   qta_pe          , " & vbCrLf
                                sql = sql & "   qta_pz          , " & vbCrLf
                                sql = sql & "   id_pp_pianiprod , "
                                sql = sql & "   nr_riga_pp_pianiprod , "
                                sql = sql & "   data_prod       ) " & vbCrLf
                                sql = sql & " VALUES ( "
                                sql = sql & " '" & cod_art_padre & "'   , "
                                sql = sql & " 'D'                       , "
                                sql = sql & " 0                         , "

                                sql = sql & " " & Replace(sQuantita, ",", ".") & "   , "
                                sql = sql & " " & Replace(sQuantitaCo, ",", ".") & " , "
                                sql = sql & " " & Replace(sQuantitaCf, ",", ".") & " , "
                                sql = sql & " " & Replace(sQuantitaPe, ",", ".") & " , "
                                sql = sql & " " & Replace(sQuantitaPz, ",", ".") & " , "

                                sql = sql & " " & id_pp_pianiprod & "       , "
                                sql = sql & " " & nr_riga_pp_pianiprod & "  , "

                                sql = sql & " '" & data_piano & "'"
                                sql = sql & " ) " & vbCrLf

                                DB_SqlExecute(sql, Db_Conn_Crea)

                            End If

                        End If

                    End If

                Next i_d

                If flag_trovate_qta = True Then

                    parametri = ";"                                                        'rf(cod_art_padre, "@@@@@@@@@@@@@") & ";"
                    parametri = parametri & "D;"                                           'rf(l_tipo_variante, "@") & ";"
                    parametri = parametri & Object_Val(pp_modelli_piano.Nr_Variante) & ";" 'rf(nr_variante, "000000000") & ";"
                    parametri = parametri & data_piano & ";"
                    parametri = parametri & "99;"                                          'rf(passa_livello, "00000") & ";"
                    parametri = parametri & "N;"                                           'RigheDescrittive & ";"
                    parametri = parametri & "N;"                                           'Livello_AF & ";"
                    parametri = parametri & ";"                                            'sQuantita & ";"
                    parametri = parametri & "T;"                                           'TipoOrdinamento & ";"
                    parametri = parametri & dbtempname & ";"
                    parametri = parametri & "S;"                                          ' dbtrans
                    parametri = parametri & TabDistinte & ";"                             ' tmptabledistinte
                    parametri = parametri & data_piano & ";"                              ' s_data_prod_in

                    TaskSrv_Start2("espldist", "Esplosione Distinta.", parametri, nr_proc, True)
                    'TaskSrv_Start("espldist", "Esplosione Distinta.", parametri, nr_proc)
                    TaskSrv_Status(nr_proc, flag_result)

                    Application.DoEvents()


                    If flag_result = "R" Then

                        WaitForm_Close(Me, SplashScreenManager2)
                        'DB_RollbackTrans()
                        XtraMessageBox.Show("Attenzione! Problema con Esplosione Distinta.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)

                        DB_TableDrop(TabDistinte, Db_Conn_Crea)
                        DB_TableDrop(dbtempname, Db_Conn_Crea)
                        DB_TableDrop(dbtempname_tot)
                        DB_TableDrop(dbtempname_tot_clone)

                        ' chiusura connessione per creazione tabelle temporanee 
                        Db_Conn_Crea.Close()
                        Db_Conn_Crea.Dispose()

                        Salva_PP_Pianiprod_Dist = False
                        Exit Function

                    End If


                    'Cancellazione dell'eventuale assieme fittizio: prima però bisogna cambiare il campo cod_art_padre sugli articoli figli dell'assieme fittizio

                    sql = ""
                    sql = sql & " SELECT *  " & vbCrLf
                    sql = sql & "   FROM " & dbtempname & " AS t " & vbCrLf
                    sql = sql & "WHERE t.tipo_art_prod = 'AF' " & vbCrLf

                    cmd_com = DB_CommandCreate(sql)
                    DB_DataReaderExecute(dr_com, cmd_com)

                    While dr_com.Read
                        'Lupi 28/10/2016

                        sql = ""
                        sql = sql & " UPDATE " & dbtempname & vbCrLf
                        sql = sql & "    SET cod_art_padre = '" & dr_com("cod_art_padre") & "'" & vbCrLf
                        sql = sql & "  WHERE cod_art_padre = '" & dr_com("cod_art") & "'" & vbCrLf

                        DB_SqlExecute(sql, Db_Conn_Crea)


                        sql = ""
                        sql = sql & " DELETE FROM " & dbtempname & vbCrLf
                        sql = sql & "  WHERE cod_art = '" & dr_com("cod_art") & "'" & vbCrLf
                        sql = sql & "    AND tipo_art_prod = 'AF' " & vbCrLf

                        DB_SqlExecute(sql, Db_Conn_Crea)



                    End While
                    DB_DataReaderClose(dr_com, cmd_com)

                    'FINE Cancellazione dell'eventuale assieme fittizio



                    ' inserimento su tabella temporanea "totalizzata"
                    sql = ""
                    sql = sql & " INSERT INTO " & dbtempname_tot & " ( " & vbCrLf
                    sql = sql & " dis_data_piano    , " & vbCrLf

                    sql = sql & " dis_id_pp_pianiprod           , " & vbCrLf
                    sql = sql & " dis_nr_riga_pp_pianiprod      , " & vbCrLf

                    sql = sql & " dis_cod_art       , " & vbCrLf

                    sql = sql & " dis_qta           , " & vbCrLf
                    sql = sql & " dis_qta_co        , " & vbCrLf
                    sql = sql & " dis_qta_cf        , " & vbCrLf
                    sql = sql & " dis_qta_pe        , " & vbCrLf
                    sql = sql & " dis_qta_pz        , " & vbCrLf
                    sql = sql & " dis_tipo_variante , " & vbCrLf
                    sql = sql & " dis_nr_variante   , " & vbCrLf
                    sql = sql & " cod_art           , " & vbCrLf
                    sql = sql & " des_art           , " & vbCrLf
                    sql = sql & " cod_um            , " & vbCrLf
                    sql = sql & " livello           , " & vbCrLf
                    sql = sql & " coeff             , " & vbCrLf
                    sql = sql & " qta               , " & vbCrLf
                    sql = sql & " costo             , " & vbCrLf
                    sql = sql & " perc_scarto       , " & vbCrLf
                    sql = sql & " data_validita_ini , " & vbCrLf
                    sql = sql & " data_validita_fin , " & vbCrLf
                    sql = sql & " tipo_variante     , " & vbCrLf
                    sql = sql & " nr_variante       , " & vbCrLf
                    sql = sql & " sequenza1         , " & vbCrLf
                    sql = sql & " sequenza2         , " & vbCrLf
                    sql = sql & " nr_riga           , " & vbCrLf
                    sql = sql & " tipo_riga         , " & vbCrLf
                    sql = sql & " nr_cap            , " & vbCrLf
                    sql = sql & " note_riga         , " & vbCrLf
                    sql = sql & " tipo_art_prod     , " & vbCrLf
                    sql = sql & " cod_art_padre     , " & vbCrLf
                    sql = sql & " tip_var_padre     , " & vbCrLf
                    sql = sql & " num_var_padre     , " & vbCrLf
                    sql = sql & " nr_pagina         , " & vbCrLf
                    sql = sql & " nr_pagina_rif     , " & vbCrLf
                    sql = sql & " nr_riga_ins       , " & vbCrLf
                    sql = sql & " data_prod         , " & vbCrLf
                    sql = sql & " data_prod_padre   , " & vbCrLf
                    sql = sql & " key_cod_art       , " & vbCrLf
                    sql = sql & " key_data_prod       " & vbCrLf
                    sql = sql & " )                 " & vbCrLf

                    sql = sql & " SELECT " & vbCrLf
                    'sql = sql & " '" & data_piano & "' , "
                    sql = sql & " t.data_prod_padre  ,   " & vbCrLf

                    sql = sql & " d.id_pp_pianiprod             , " & vbCrLf
                    sql = sql & " d.nr_riga_pp_pianiprod        , " & vbCrLf

                    sql = sql & " t.dis_cod_art       , " & vbCrLf

                    sql = sql & " d.qta             , " & vbCrLf
                    sql = sql & " d.qta_co          , " & vbCrLf
                    sql = sql & " d.qta_cf          , " & vbCrLf
                    sql = sql & " d.qta_pe          , " & vbCrLf
                    sql = sql & " d.qta_pz          , " & vbCrLf

                    sql = sql & " t.dis_tipo_variante , " & vbCrLf
                    sql = sql & " t.dis_nr_variante   , " & vbCrLf
                    sql = sql & " t.cod_art           , " & vbCrLf
                    sql = sql & " t.des_art           , " & vbCrLf
                    sql = sql & " t.cod_um            , " & vbCrLf
                    sql = sql & " t.livello           , " & vbCrLf
                    sql = sql & " t.coeff             , " & vbCrLf
                    sql = sql & " t.qta               , " & vbCrLf
                    sql = sql & " t.costo             , " & vbCrLf
                    sql = sql & " t.perc_scarto       , " & vbCrLf
                    sql = sql & " t.data_validita_ini , " & vbCrLf
                    sql = sql & " t.data_validita_fin , " & vbCrLf
                    sql = sql & " t.tipo_variante     , " & vbCrLf
                    sql = sql & " t.nr_variante       , " & vbCrLf
                    sql = sql & " t.sequenza1         , " & vbCrLf
                    sql = sql & " t.sequenza2         , " & vbCrLf
                    sql = sql & " t.nr_riga           , " & vbCrLf
                    sql = sql & " t.tipo_riga         , " & vbCrLf
                    sql = sql & " t.nr_cap            , " & vbCrLf
                    sql = sql & " t.note_riga         , " & vbCrLf
                    sql = sql & " t.tipo_art_prod     , " & vbCrLf
                    sql = sql & " t.cod_art_padre     , " & vbCrLf
                    sql = sql & " t.tip_var_padre     , " & vbCrLf
                    sql = sql & " t.num_var_padre     , " & vbCrLf
                    sql = sql & " t.nr_pagina         , " & vbCrLf
                    sql = sql & " t.nr_pagina_rif     , " & vbCrLf
                    sql = sql & " t.nr_riga_ins       , " & vbCrLf
                    sql = sql & " t.data_prod         , " & vbCrLf
                    sql = sql & " t.data_prod_padre   , " & vbCrLf
                    sql = sql & " t.dis_cod_art       , " & vbCrLf
                    sql = sql & " d.data_prod           " & vbCrLf
                    'sql = sql & " '" & data_piano & "' " & vbCrLf

                    sql = sql & " FROM " & dbtempname & "  AS t, " & TabDistinte & " AS d " & vbCrLf
                    sql = sql & " WHERE t.dis_cod_art = d.cod_art               " & vbCrLf

                    DB_SqlExecute(sql)


                End If

            Next i_g

            DB_TableDrop(TabDistinte, Db_Conn_Crea)
            DB_TableDrop(dbtempname, Db_Conn_Crea)


            'Cancellazione dei dati sulla tabella pp_pianiprodreldet che poi vengono riscritti in quanto l'articolo padre pianificato viene aggiornato

            sql = ""
            sql = sql & "DELETE FROM pp_pianiprodreldet " & vbCrLf
            sql = sql & " WHERE NVL((SELECT COUNT(*) " & vbCrLf
            sql = sql & "              FROM " & dbtempname_tot & " AS t " & vbCrLf
            sql = sql & "             WHERE t.key_cod_art = pp_pianiprodreldet.key_cod_art " & vbCrLf
            sql = sql & "               AND t.key_data_prod = pp_pianiprodreldet.key_data_prod),0) > 0 " & vbCrLf
            If Getv(cod_dep) <> "" Then
                sql = sql & " AND cod_dep = '" & Getv(cod_dep) & "'" & vbCrLf
            End If
            DB_SqlExecute(sql)

            'funzione ricorsiva di cancellazione del figlio dalla tabella pp_pianiprodreldet

            sql = ""
            sql = sql & " SELECT DISTINCT t.key_cod_art, t.key_data_prod " & vbCrLf
            sql = sql & "   FROM " & dbtempname_tot & " AS t " & vbCrLf

            cmd_com = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_com, cmd_com)

            While dr_com.Read

                sql = ""
                sql = sql & " SELECT DISTINCT key_cod_art, key_data_prod, art_padre, id_padre " & vbCrLf
                sql = sql & "   FROM pp_pianiprodreldet " & vbCrLf
                sql = sql & "  WHERE art_padre = '" & dr_com("key_cod_art") & "'" & vbCrLf
                sql = sql & "    AND data_padre = '" & dr_com("key_data_prod") & "'" & vbCrLf
                If Getv(cod_dep) <> "" Then
                    sql = sql & " AND cod_dep = '" & Getv(cod_dep) & "'" & vbCrLf
                End If

                cmd_com2 = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr_com2, cmd_com2)

                While dr_com2.Read


                    Elimina_Figlio_RelDet(dr_com2("key_cod_art"), dr_com2("key_data_prod"), dr_com2("art_padre"), dr_com2("id_padre"))


                End While

                DB_DataReaderClose(dr_com2, cmd_com2)

            End While
            DB_DataReaderClose(dr_com, cmd_com)


            'imposto come non elaborabili le produzioni già pianificate
            sql = ""
            sql = sql & " UPDATE " & dbtempname_tot & vbCrLf
            sql = sql & "    SET flag_pian = 'P'" & vbCrLf
            sql = sql & "  WHERE cod_art IN (SELECT cod_art_pian FROM pp_pianiprod WHERE " & dbtempname_tot & ".data_prod = pp_pianiprod.data_piano " & vbCrLf
            sql = sql & "                                                            AND " & dbtempname_tot & ".cod_art    = pp_pianiprod.cod_art_pian " & vbCrLf
            If Getv(cod_dep) <> "" Then
                sql = sql & "                                                        AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            sql = sql & "                                                            AND pp_pianiprod.qta_pian > 0 )" & vbCrLf
            DB_SqlExecute(sql)

            'al livello 1 l'id padre è corretto, devo ricalcolare gli altri
            sql = ""
            sql = sql & " UPDATE " & dbtempname_tot & vbCrLf
            sql = sql & "    SET dis_id_pp_pianiprod = NULL " & vbCrLf
            sql = sql & "      , dis_nr_riga_pp_pianiprod = NULL " & vbCrLf
            sql = sql & "      , dis_qta = NULL " & vbCrLf
            sql = sql & "      , dis_qta_co = NULL " & vbCrLf
            sql = sql & "      , dis_qta_cf = NULL " & vbCrLf
            sql = sql & "      , dis_qta_pz = NULL " & vbCrLf
            sql = sql & "      , dis_qta_pe = NULL " & vbCrLf
            sql = sql & " WHERE livello > 1 " & vbCrLf

            DB_SqlExecute(sql)

            DB_SqlExecute("DELETE FROM " & dbtempname_tot_clone)

            sql = ""
            sql = " INSERT INTO " & dbtempname_tot_clone & " SELECT * FROM " & dbtempname_tot & " WHERE NVL(flag_pian,'N') = 'P'"

            DB_SqlExecute(sql)

            Dim dis_cod_art As Object = Nothing

            ' aggiornamento data_prod se risultano delle date "festive", vengono anticipate fino a trovare il giorno "feriale"

            sql = "       SELECT t.* "
            sql = sql & " FROM " & dbtempname_tot & " AS t "
            sql = sql & " WHERE 1 = 1 "
            sql = sql & " AND 0 <> ( SELECT COUNT(*)        " & vbCrLf
            sql = sql & "            FROM  pp_tabtipiart    " & vbCrLf
            sql = sql & "            WHERE pp_tabtipiart.tipo_art_prod = t.tipo_art_prod " & vbCrLf
            sql = sql & "            AND   pp_tabtipiart.flag_sel = 'S'   ) " & vbCrLf

            cmd_com = New DB2Command(sql, DB_Conn, DB_Transaction)
            cmd_com.CommandTimeout = 0
            dr_com = cmd_com.ExecuteReader

            While dr_com.Read

                cod_art_comp = DB_Dsv(dr_com("cod_art"))
                data_impr_comp = DB_Dsv(dr_com("data_prod"))

                id_padre = DB_Dsv(dr_com("dis_id_pp_pianiprod"))
                nr_riga_padre = DB_Dsv(dr_com("dis_nr_riga_pp_pianiprod"))

                cod_art_padre = DB_Dsv(dr_com("cod_art_padre"))
                dis_cod_art = DB_Dsv(dr_com("dis_cod_art"))

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = RTrim(cod_art_comp)
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    ragg_prod_comp = DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod"))

                    giorni_da_sottrarre = 0
                    data_cerca = data_impr_comp

                    ' finchè la data è un giorno festivo
                    While Cerca_Data_Festivo_Piano(ragg_prod_comp, data_cerca) = True

                        giorni_da_sottrarre = giorni_da_sottrarre + 1

                        data_cerca = DateAdd(DateInterval.Day, -1, DateValue(data_cerca))

                    End While

                    If giorni_da_sottrarre <> 0 Then

                        Aggiorna_Tabtempdist_Tot(dbtempname_tot, id_padre, nr_riga_padre, dis_cod_art, cod_art_comp, data_impr_comp, giorni_da_sottrarre, cod_art_padre)

                        DB_DataReaderClose(dr_com)
                        dr_com = cmd_com.ExecuteReader

                    End If


                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            End While

            DB_DataReaderClose(dr_com, cmd_com)

            'DA SISTEMARE CON MESSAGGIO DI AVVISO
            '  controlli su dati estratti dai componenti

            sql = "       SELECT t.cod_art_padre, a2.des_art as des_art_padre, t.data_prod_padre, t.cod_art, t.des_art, t.data_prod, t.cod_um, t.qta " & vbCrLf
            sql = sql & " FROM " & dbtempname_tot & " AS t, anaart as a1, anaart as a2  " & vbCrLf
            sql = sql & " WHERE 1 = 1 " & vbCrLf
            sql = sql & "  AND t.dis_cod_art = a1.cod_art"
            sql = sql & "  AND t.cod_art_padre = a2.cod_art"
            sql = sql & "  AND 0 <> ( SELECT COUNT(*)        " & vbCrLf
            sql = sql & "            FROM  pp_tabtipiart    " & vbCrLf
            sql = sql & "            WHERE pp_tabtipiart.tipo_art_prod = t.tipo_art_prod " & vbCrLf
            sql = sql & "            AND   pp_tabtipiart.flag_sel = 'S'   ) " & vbCrLf
            sql = sql & " AND data_prod < TODAY " & vbCrLf

            cmd_com = New DB2Command(sql, DB_Conn, DB_Transaction)
            cmd_com.CommandTimeout = 0
            dr_com = cmd_com.ExecuteReader

            If dr_com.Read Then

                WaitForm_Close(Me, SplashScreenManager2)

                f_date_inferiori.Sql_Date_Inferiori = sql
                f_date_inferiori.EditMask = EditMask
                f_date_inferiori.ShowDialog()

                If f_date_inferiori.DialogResult = Windows.Forms.DialogResult.Cancel Then

                    DB_TableDrop(dbtempname_tot)
                    DB_TableDrop(dbtempname_tot_clone)

                    ' chiusura connessione per creazione tabelle temporanee 
                    Db_Conn_Crea.Close()
                    Db_Conn_Crea.Dispose()

                    Salva_PP_Pianiprod_Dist = False

                    f_date_inferiori.Dispose()

                    Exit Function

                End If

                WaitForm_Show(Me, SplashScreenManager2, "Salvataggio della pianificazione in corso...")

            End If

            DB_DataReaderClose(dr_com, cmd_com)



            sql = ""
            sql = sql & " SELECT DISTINCT livello " & vbCrLf
            sql = sql & "            FROM " & dbtempname_tot & vbCrLf
            sql = sql & "        ORDER BY livello " & vbCrLf

            cmd_livelli = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_livelli, cmd_livelli)

            While dr_livelli.Read

                livello = DB_Dsv(dr_livelli("livello"), 0)

                '' *** cancellazione "vecchi dati" tabelle pp_pianiprod  e  pp_pianiprodrel ***

                sql = "       SELECT t.* "
                sql = sql & " FROM " & dbtempname_tot & " AS t "
                sql = sql & " WHERE 1 = 1 "
                sql = sql & " AND 0 <> ( SELECT COUNT(*)        " & vbCrLf
                sql = sql & "            FROM  pp_tabtipiart    " & vbCrLf
                sql = sql & "            WHERE pp_tabtipiart.tipo_art_prod = t.tipo_art_prod " & vbCrLf
                sql = sql & "            AND   pp_tabtipiart.flag_sel = 'S'   ) " & vbCrLf
                sql = sql & " AND livello = " & Getv(livello) & vbCrLf
                sql = sql & " AND NVL(flag_pian,'N') = 'N'" & vbCrLf
                sql = sql & " ORDER BY dis_id_pp_pianiprod, dis_nr_riga_pp_pianiprod "

                cmd_com = New DB2Command(sql, DB_Conn, DB_Transaction)
                cmd_com.CommandTimeout = 0
                dr_com = cmd_com.ExecuteReader

                While dr_com.Read

                    id_padre = DB_Dsv(dr_com("dis_id_pp_pianiprod"))
                    nr_riga_padre = DB_Dsv(dr_com("dis_nr_riga_pp_pianiprod"))

                    pp_pianiprodrel_Elimina(id_padre, nr_riga_padre, "I")

                End While

                DB_DataReaderClose(dr_com, cmd_com)


                ' inserimento "nuovi dati" su tabelle pp_pianiprod e pp_pianiprodrel

                sql = "       SELECT t.* "
                sql = sql & " FROM " & dbtempname_tot & " AS t "
                sql = sql & " WHERE 1 = 1 "
                sql = sql & " AND 0 <> ( SELECT COUNT(*)        " & vbCrLf
                sql = sql & "            FROM  pp_tabtipiart    " & vbCrLf
                sql = sql & "            WHERE pp_tabtipiart.tipo_art_prod = t.tipo_art_prod " & vbCrLf
                sql = sql & "            AND   pp_tabtipiart.flag_sel = 'S'   ) " & vbCrLf
                sql = sql & " AND   livello = " & Getv(livello) & vbCrLf
                sql = sql & " AND NVL(flag_pian,'N') IN ('N','P')" & vbCrLf
                sql = sql & " ORDER BY "
                sql = sql & "  dis_data_piano            , " & vbCrLf
                sql = sql & "  dis_id_pp_pianiprod       , " & vbCrLf
                sql = sql & "  dis_nr_riga_pp_pianiprod  , " & vbCrLf
                sql = sql & "  dis_cod_art               , " & vbCrLf
                sql = sql & "  nr_riga                     " & vbCrLf

                cmd_com = New DB2Command(sql, DB_Conn, DB_Transaction)
                cmd_com.CommandTimeout = 0
                dr_com = cmd_com.ExecuteReader

                While dr_com.Read

                    tipo_art_prod_comp = DB_Dsv(dr_com("tipo_art_prod"))
                    cod_art_comp = DB_Dsv(dr_com("cod_art"))
                    data_impr_comp = DB_Dsv(dr_com("data_prod"))
                    cod_um_comp = DB_Dsv(dr_com("cod_um"))
                    nr_variante_comp = DB_Dsv(dr_com("nr_variante"))
                    coeff_comp = DB_Dsv(dr_com("coeff"))

                    'data_padre = DB_Dsv(dr_com("dis_data_piano"))
                    data_padre = DB_Dsv(dr_com("data_prod_padre"))
                    id_padre = DB_Dsv(dr_com("dis_id_pp_pianiprod"))
                    nr_riga_padre = DB_Dsv(dr_com("dis_nr_riga_pp_pianiprod"))
                    cod_art_padre = DB_Dsv(dr_com("dis_cod_art"))

                    key_cod_art = DB_Dsv(dr_com("key_cod_art"))
                    key_data_prod = DB_Dsv(dr_com("key_data_prod"))

                    qta_padre = DB_Dsv(dr_com("dis_qta"))
                    qta_padre_co = DB_Dsv(dr_com("dis_qta_co"))
                    qta_padre_cf = DB_Dsv(dr_com("dis_qta_cf"))
                    qta_padre_pe = DB_Dsv(dr_com("dis_qta_pe"))
                    qta_padre_pz = DB_Dsv(dr_com("dis_qta_pz"))


                    DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                    DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                    Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = RTrim(cod_art_comp)
                    DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)


                    If Pianprod_Dr_Sel_Anaart.Read Then

                        ragg_prod_comp = DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod"))
                        cod_linea_prod_pre_comp = DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre"))
                        cod_ass_prod_pre_comp = DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre"))

                        If Getv(cod_dep) <> "" Then

                        End If

                        qta_comp = DB_Dsv(dr_com("qta"))

                        DB_DataReaderClose(dr_tabumalt)
                        DB_CommandParametersReset(qdf_tabumalt)
                        qdf_tabumalt.Parameters.Item("cod_art").Value = RTrim(cod_art_comp)
                        qdf_tabumalt.Parameters.Item("cod_um_alt").Value = RTrim(cod_um_comp)
                        qdf_tabumalt.Parameters.Item("nr_variante").Value = RTrim(nr_variante_comp)
                        DB_DataReaderExecute(dr_tabumalt, qdf_tabumalt)

                        fatt_conv_comp = 1
                        If dr_tabumalt.Read Then
                            If CDbl(DB_Dsv(dr_tabumalt("fattore"))) <> 0 Then
                                qta_comp = qta_comp / DB_Dsv(dr_tabumalt("fattore"))
                                fatt_conv_comp = DB_Dsv(dr_tabumalt("fattore"))
                            End If
                        End If
                        DB_DataReaderClose(dr_tabumalt)

                        Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                           qta_comp, qta_comp_um, qta_comp_co, qta_comp_cf, qta_comp_pz, qta_comp_pe)


                        pp_pianiprod_Aggiungi(tipo_art_prod_comp, cod_art_comp, data_impr_comp, ragg_prod_comp, cod_linea_prod_pre_comp,
                                              cod_ass_prod_pre_comp, "I", qta_comp, qta_comp_co, qta_comp_cf, qta_comp_pe, qta_comp_pz,
                                              id_comp_agg, nr_riga_comp_agg, "", Getv(cod_dep))


                        pp_pianiprodrel_Aggiungi(id_padre, nr_riga_padre, data_padre, cod_art_padre, qta_padre, qta_padre_co, qta_padre_cf, qta_padre_pe, qta_padre_pz, _
                                                 id_comp_agg, nr_riga_comp_agg, data_impr_comp, cod_art_comp, qta_comp, qta_comp_co, qta_comp_cf, qta_comp_pe, qta_comp_pz, _
                                                   coeff_comp, fatt_conv_comp, key_cod_art, key_data_prod, id_aggiunto_rel, Getv(cod_dep))

                    End If

                    DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                End While

                DB_DataReaderClose(dr_com, cmd_com)

                'aggiornamento dei livelli inferiori con gli ID appena inseriti in pp_pianiprod

                sql = ""
                sql = sql & " UPDATE " & dbtempname_tot & vbCrLf
                sql = sql & "    SET ( dis_id_pp_pianiprod, dis_nr_riga_pp_pianiprod, dis_cod_art,  dis_qta, dis_qta_co, dis_qta_cf, dis_qta_pz, dis_qta_pe )" & vbCrLf
                sql = sql & "      = " & vbCrLf
                sql = sql & "       (( SELECT id, nr_riga, cod_art_pian, qta_impr, qta_impr_co, qta_impr_cf, qta_impr_pz, qta_impr_pe " & vbCrLf
                sql = sql & "            FROM pp_pianiprod as pp " & vbCrLf
                sql = sql & "           WHERE pp.data_impr = " & dbtempname_tot & ".data_prod_padre " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    sql = sql & "         AND pp.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If
                sql = sql & "             AND pp.cod_art_pian = " & dbtempname_tot & ".cod_art_padre ))" & vbCrLf
                sql = sql & "   WHERE livello = " & Getv(livello) + 1

                DB_SqlExecute(sql)

                'aggiorno flag che mi indica se il componente è già stato pianificato

                sql = ""
                sql = sql & " UPDATE " & dbtempname_tot & vbCrLf
                sql = sql & "   SET flag_pian = 'F' " & vbCrLf
                sql = sql & " WHERE EXISTS (SELECT flag_pian FROM " & dbtempname_tot_clone & " as cl WHERE " & dbtempname_tot & ".cod_art_padre = cl.cod_art AND " & dbtempname_tot & ".data_prod_padre = cl.data_prod AND NVL(cl.flag_pian,'N') IN ('P','F'))"
                DB_SqlExecute(sql)

                'aggiorno tabella appoggio con produzioni pianificate

                sql = ""
                sql = " INSERT INTO " & dbtempname_tot_clone & " SELECT * FROM " & dbtempname_tot & " WHERE NVL(flag_pian,'N') = 'F'"

                DB_SqlExecute(sql)

            End While

            Dim dt As New DataTable
            Dim da As DB2DataAdapter = Nothing



            ''FASE 2: eliminazione pianificazioni cancellate

            'STEP 2A: cerco le produzioni eliminate
            sql = ""
            sql = sql & "   SELECT * " & vbCrLf
            sql = sql & "     FROM pp_pianiprod "
            sql = sql & "    WHERE NVL(qta_pian, 0) = 0 AND NVL(qta_impr, 0) = 0  "
            If Getv(cod_dep) <> "" Then
                sql = sql & "  AND cod_dep = '" & Getv(cod_dep) & "' "
            End If

            DB_DataAdapterOpen(da, sql)
            da.Fill(dt)

            'per ogni produzione elimianta:
            '   RICORSIVAMENTE cerco se fra i figli ho qualcosa di pianificato
            '   SE HO UN FIGLIO PIANIFICATO: interrompo eliminazione del figlio e dei componenti del figlio
            '   SE NON HO FIGLIO PIANIFICATO: elimino anche il figlio

            For Each r As DataRow In dt.Rows

                Elimina_Relazioni_Ricorsiva(r("id"), r("nr_riga"))

                pp_pianiprodrel_AggiornaImp(r("id"), r("nr_riga"), Getv(cod_dep))

                pp_pianiprod_AggiornaImp(r("id"), r("nr_riga"))

            Next

            DB_DataAdapterClose(da)

            'STEP 2B: cancello da pianiprod le produzioni eliminate (AL PRIMO LIVELLO) perchè la procedura ricorsiva non le elimina

            sql = ""
            sql = sql & " SELECT * " & vbCrLf
            sql = sql & "   FROM pp_pianiprod "
            sql = sql & "  WHERE qta_pian IS NULL AND ROUND(NVL(qta_impr,0),3) < 0.001  "
            If Getv(cod_dep) <> "" Then
                sql = sql & "  AND cod_dep = '" & Getv(cod_dep) & "' "
            End If

            DB_DataReaderClose(dr_com, cmd_com)
            cmd_com = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_com, cmd_com)

            Do While dr_com.Read

                sql = ""
                sql = sql & " DELETE FROM pp_pianiprod " & vbCrLf
                sql = sql & "  WHERE id              = " & DB_Dsv(dr_com("id")) & vbCrLf
                sql = sql & "    AND nr_riga         = " & DB_Dsv(dr_com("nr_riga")) & vbCrLf
                DB_SqlExecute(sql)

            Loop

            DB_DataReaderClose(dr_com, cmd_com)

            'STEP 2C: elimino tutte le relazioni che hanno come padre una produzione che ho eliminato
            sql = ""
            sql = sql & " SELECT * FROM pp_pianiprodrel " & vbCrLf
            sql = sql & "       WHERE 0 = (SELECT NVL(COUNT(*),0) " & vbCrLf
            sql = sql & "                    FROM pp_pianiprod " & vbCrLf
            sql = sql & "                   WHERE pp_pianiprod.id      = pp_pianiprodrel.id_padre " & vbCrLf
            sql = sql & "                     AND pp_pianiprod.nr_riga = pp_pianiprodrel.nr_riga_padre )" & vbCrLf
            If Getv(cod_dep) <> "" Then
                sql = sql & "     AND pp_pianiprodrel.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            DB_DataReaderClose(dr_com, cmd_com)
            cmd_com = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_com, cmd_com)

            While dr_com.Read

                DB_LookUp("SUM(qta_comp), SUM(qta_comp_co), SUM(qta_comp_cf), SUM(qta_comp_pe), SUM(qta_comp_pz)", "pp_pianiprodreldet", "id_chiaverel = " & dr_com("id_chiave"), qta_comp, qta_comp_co, qta_comp_cf, qta_comp_pe, qta_comp_pz)

                If Math.Abs(Math.Round(qta_comp, 3)) < 0.001 Then

                    sql = ""
                    sql = sql & " DELETE FROM pp_pianiprodrel "
                    sql = sql & "  WHERE id_chiave      = " & dr_com("id_chiave") & vbCrLf

                    DB_SqlExecute(sql)

                Else

                    'Aggiornamento della quantità con l'impegnato per produzione tenendo conto delle relazioni di altri articoli non elaborati in questa fase di salavataggio.

                    sql = ""
                    sql = sql & " UPDATE pp_pianiprodrel "
                    sql = sql & "    SET qta_comp    = " & Replace(qta_comp, ",", ".") & ", " & vbCrLf
                    sql = sql & "        qta_comp_co = " & Replace(qta_comp_co, ",", ".") & ", " & vbCrLf
                    sql = sql & "        qta_comp_cf = " & Replace(qta_comp_cf, ",", ".") & ", " & vbCrLf
                    sql = sql & "        qta_comp_pz = " & Replace(qta_comp_pz, ",", ".") & ", " & vbCrLf
                    sql = sql & "        qta_comp_pe = " & Replace(qta_comp_pe, ",", ".") & " " & vbCrLf
                    sql = sql & "  WHERE id_chiave      = " & dr_com("id_chiave") & vbCrLf

                    DB_SqlExecute(sql)

                End If

            End While

            DB_DataReaderClose(dr_com, cmd_com)

            'STEP 2D: elimino tutte le produzioni che possono essere pianificate su pianificazione oraria da pp_pianiprod_det
            sql = ""
            sql = sql & " DELETE FROM pp_pianiprod_det " & vbCrLf
            sql = sql & "       WHERE 0 = (SELECT NVL(COUNT(*),0) " & vbCrLf
            sql = sql & "                    FROM pp_pianiprod " & vbCrLf
            sql = sql & "                   WHERE pp_pianiprod.id      = pp_pianiprod_det.id_pianiprod " & vbCrLf
            sql = sql & "                     AND pp_pianiprod.nr_riga = pp_pianiprod_det.nr_riga_pianiprod )" & vbCrLf
            sql = sql & "         AND pp_pianiprod_det.stato_pian <> 2" & vbCrLf
            If Getv(cod_dep) <> "" Then
                sql = sql & "     AND pp_pianiprod_det.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            DB_SqlExecute(sql)
            ''FINE - FASE 2 (per produzioni cancellate)

            'FASE 3: aggiornamento degli impegnati su pp_pianprod con i dati della tabella pp_pianprodrel (per produzioni aggiunte)

            sql = ""
            sql = sql & " SELECT DISTINCT cod_art, data_prod FROM " & dbtempname_tot

            DB_DataReaderClose(dr_com, cmd_com)
            cmd_com = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_com, cmd_com)

            Do While dr_com.Read

                sql = ""
                sql = sql & " SELECT * " & vbCrLf
                sql = sql & "   FROM pp_pianiprod " & vbCrLf
                sql = sql & "  WHERE data_impr    = '" & DB_Sql_Date(dr_com("data_prod"), "01/01/1900") & "' " & vbCrLf
                sql = sql & "    AND cod_art_pian = '" & Trim((DB_Dsv(dr_com("cod_art"), ""))) & "' " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    sql = sql & "    AND cod_dep      = '" & Getv(cod_dep) & "' " & vbCrLf
                End If

                DB_DataReaderClose(Dr_Sel_Pp_Pianiprod, Cmd_Sel_Pp_Pianiprod)
                Cmd_Sel_Pp_Pianiprod = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr_Sel_Pp_Pianiprod, Cmd_Sel_Pp_Pianiprod)

                Do While Dr_Sel_Pp_Pianiprod.Read

                    sql = ""
                    sql = sql & " UPDATE pp_pianiprod SET (qta_impr, qta_impr_co, qta_impr_cf, qta_impr_pe, qta_impr_pz)" & vbCrLf
                    sql = sql & "        = " & vbCrLf
                    sql = sql & "        ((SELECT SUM(qta_comp), SUM(qta_comp_co), SUM(qta_comp_cf), SUM(qta_comp_pe), SUM(qta_comp_pz)" & vbCrLf
                    sql = sql & "            FROM pp_pianiprodrel " & vbCrLf
                    sql = sql & "           WHERE pp_pianiprodrel.art_comp = pp_pianiprod.cod_art_pian AND pp_pianiprodrel.data_comp = pp_pianiprod.data_impr AND NVL(pp_pianiprodrel.cod_dep,'') = NVL(pp_pianiprod.cod_dep,'') AND pp_pianiprod.id >= 0 AND pp_pianiprod.nr_riga >= 0))"
                    sql = sql & "  WHERE id              = " & DB_Dsv(Dr_Sel_Pp_Pianiprod("id")) & vbCrLf
                    sql = sql & "    AND nr_riga         = " & DB_Dsv(Dr_Sel_Pp_Pianiprod("nr_riga")) & vbCrLf
                    DB_SqlExecute(sql)

                Loop

                DB_DataReaderClose(Dr_Sel_Pp_Pianiprod, Cmd_Sel_Pp_Pianiprod)

            Loop

            DB_DataReaderClose(dr_com, cmd_com)

            sql = ""
            sql = sql & " SELECT DISTINCT cod_art, data_prod FROM " & dbtempname_tot

            DB_DataReaderClose(dr_com, cmd_com)
            cmd_com = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_com, cmd_com)

            Do While dr_com.Read

                sql = ""
                sql = sql & " SELECT * " & vbCrLf
                sql = sql & "   FROM pp_pianiprodrel " & vbCrLf
                sql = sql & "  WHERE data_padre    = '" & DB_Sql_Date(dr_com("data_prod"), "01/01/1900") & "' " & vbCrLf
                sql = sql & "    AND art_padre = '" & Trim((DB_Dsv(dr_com("cod_art"), ""))) & "' " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    sql = sql & "    AND cod_dep      = '" & Getv(cod_dep) & "' " & vbCrLf
                End If

                DB_DataReaderClose(Dr_Sel_Pp_Pianiprodrel, Cmd_Sel_Pp_Pianiprodrel)
                Cmd_Sel_Pp_Pianiprodrel = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr_Sel_Pp_Pianiprodrel, Cmd_Sel_Pp_Pianiprodrel)

                Do While Dr_Sel_Pp_Pianiprodrel.Read

                    sql = ""
                    sql = sql & " UPDATE pp_pianiprodrel SET (qta_padre, qta_padre_co, qta_padre_cf, qta_padre_pe, qta_padre_pz)" & vbCrLf
                    sql = sql & "        = " & vbCrLf
                    sql = sql & "        ((SELECT SUM(NVL(qta_pian,qta_impr)), SUM(NVL(qta_pian_co,qta_impr_co)), SUM(NVL(qta_pian_cf,qta_impr_cf)), SUM(NVL(qta_pian_pe,qta_impr_pe)), SUM(NVL(qta_pian_pz,qta_impr_pz))" & vbCrLf
                    sql = sql & "            FROM pp_pianiprod " & vbCrLf
                    sql = sql & "           WHERE pp_pianiprod.cod_art_pian = pp_pianiprodrel.art_padre AND NVL(pp_pianiprod.data_piano,pp_pianiprod.data_impr) = pp_pianiprodrel.data_padre AND NVL(pp_pianiprod.cod_dep,'') = NVL(pp_pianiprodrel.cod_dep,'') AND pp_pianiprod.id >= 0 AND pp_pianiprod.nr_riga >= 0))"
                    sql = sql & "  WHERE id_chiave       = " & DB_Dsv(Dr_Sel_Pp_Pianiprodrel("id_chiave")) & vbCrLf
                    DB_SqlExecute(sql)

                Loop

                DB_DataReaderClose(Dr_Sel_Pp_Pianiprodrel, Cmd_Sel_Pp_Pianiprodrel)

            Loop

            DB_DataReaderClose(dr_com, cmd_com)
            'FINE - FASE 3: aggiornamento degli impegnati su pp_pianprod con i dati della tabella pp_pianprodrel  (per produzioni aggiunte)

            DB_DataReaderClose(dr_livelli, cmd_livelli)

            WaitForm_Close(Me, SplashScreenManager2)

            'stampa articoli senza distinta base
            If flag_art_no_dist Then
                XtraMessageBox.Show(art_no_dist, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
            End If

            'report degli articoli non modificati (perchè già pianificati o perchè SL con piani di produzione la cui commessa è già stata generata)

            ' \\\\ OLD

            'sql = ""
            'sql = sql & " flag_pian = 'P' "

            'DB_LookUp("COUNT(*) as tot_record ", dbtempname_tot, sql, xx1)

            'If Object_Val(xx1) > 0 Then
            '    f_dett_art_no_mod.Tabella_Dist = dbtempname_tot
            '    f_dett_art_no_mod.ShowDialog()
            '    f_dett_art_no_mod.Dispose()
            'End If

            ' NEW

            DB_SqlExecute(" INSERT INTO " & dbtempame_art_no_mod & " SELECT * FROM " & dbtempname_tot & " WHERE NVL(flag_pian,'N') = 'P' ")

            ' ////

            ' operazioni preliminari nel caso di creazione automatica dei piani di produzione (imposta i valori che serviranno alla routine Salva_Pianiprod() )

            If azienda_agg.flag_qta_pian_prod = "S" Then

                '' periodo minimo e massimo da considerare
                ''DB_LookUp("MIN(data_prod), MAX(data_prod)", dbtempname_tot, , min_data_prod, max_data_prod)

                ' ID interessati all'elaborazione

                sql = ""
                sql = sql & "SELECT DISTINCT dis_id_pp_pianiprod " & vbCrLf
                sql = sql & "  FROM " & dbtempname_tot & vbCrLf
                sql = sql & " WHERE dis_id_pp_pianiprod IS NOT NULL " & vbCrLf
                sql = sql & "   AND NVL(flag_pian,'N') <> 'P' " & vbCrLf

                cmd_com = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr_com, cmd_com)

                While dr_com.Read
                    If lista_id_qta_pian_prod = "" Then
                        lista_id_qta_pian_prod = dr_com("dis_id_pp_pianiprod").ToString
                    Else
                        lista_id_qta_pian_prod = lista_id_qta_pian_prod & "," & dr_com("dis_id_pp_pianiprod").ToString
                    End If
                End While

                DB_DataReaderClose(dr_com, cmd_com)

            End If

            DB_TableDrop(dbtempname_tot)
            DB_TableDrop(dbtempname_tot_clone)

            ' chiusura connessione per creazione tabelle temporanee 
            Db_Conn_Crea.Close()
            Db_Conn_Crea.Dispose()

            Salva_PP_Pianiprod_Dist = True

        Catch ex As Exception
            WaitForm_Close(Me, SplashScreenManager2)

            DB_TableDrop(dbtempname_tot)
            DB_TableDrop(dbtempname_tot_clone)
            DB_TableDrop(TabDistinte, Db_Conn_Crea)
            DB_TableDrop(dbtempname, Db_Conn_Crea)

            ' chiusura connessione per creazione tabelle temporanee 
            Db_Conn_Crea.Close()
            Db_Conn_Crea.Dispose()

            Salva_PP_Pianiprod_Dist = False

            MsgErr(ex)

        End Try

    End Function

    Private Sub Elimina_Relazioni_Ricorsiva(ByRef id As Integer, ByRef nr_riga As Integer)
        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing

        Try

            Sql = ""
            Sql = Sql & " SELECT * " & vbCrLf
            Sql = Sql & "   FROM pp_pianiprodrel "
            Sql = Sql & "  WHERE id_padre = " & Getv(id) & vbCrLf
            Sql = Sql & "    AND nr_riga_padre = " & Getv(nr_riga) & vbCrLf
            If Getv(cod_dep) <> "" Then
                Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "'" & vbCrLf
            End If

            DB_DataReaderClose(dr, cmd)
            cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(dr, cmd)

            'caso base
            If Not dr.HasRows Then


                pp_pianiprodrel_AggiornaImp(id, nr_riga, Getv(cod_dep))

                pp_pianiprod_AggiornaImp(id, nr_riga)


                Sql = ""
                Sql = Sql & " DELETE FROM pp_pianiprod " & vbCrLf
                Sql = Sql & "       WHERE id = " & Getv(id) & " AND nr_riga = " & Getv(nr_riga) & vbCrLf
                Sql = Sql & "         AND ROUND(NVL(qta_impr,0),3) < 0.001"
                DB_SqlExecute(Sql)

                Return

            End If

            While dr.Read

                Sql = ""
                Sql = " id = " & dr("id_comp") & " AND nr_riga = " & dr("nr_riga_comp") & " AND qta_pian > 0"

                If Not DB_LookUp("id", "pp_pianiprod", Sql, xx1) Then

                    If id <> dr("id_comp") OrElse (id = dr("id_comp") AndAlso nr_riga <> dr("nr_riga_comp")) Then

                        Elimina_Relazioni_Ricorsiva(dr("id_comp"), dr("nr_riga_comp"))

                        pp_pianiprodrel_AggiornaImp(dr("id_comp"), dr("nr_riga_comp"), Getv(cod_dep))

                        pp_pianiprod_AggiornaImp(dr("id_comp"), dr("nr_riga_comp"))

                    End If

                End If


            End While

            DB_DataReaderClose(dr, cmd)

        Catch ex As Exception

            MsgErr(ex)

        Finally

            DB_DataReaderClose(dr, cmd)

        End Try
       

    End Sub

    '
    ' Esegue un processo sul server
    '
    Public Function TaskSrv_Start2(ByVal Task_Name As String, ByVal Task_Des As String, ByVal Parameters As String, ByRef Task_Id As Integer, Optional ByVal Flag_Separate_Connection As Boolean = False) As Boolean
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Sql As String
        Dim Db_Name As String
        Dim User_Name As String
        Dim Client_Name As String
        Dim Server_Name As String
        Dim Server_Type As String
        Dim Srv_Path As String
        Dim Srv_Path_Net As String
        Dim Srv_Path_Net_Grp As String
        Dim Srv_Path_Net_Std As String
        Dim Srv_Path_Proc As String
        Dim Srv_Path_Proc_Grp As String
        Dim Srv_Path_Proc_Std As String
        Dim Comando As String
        Dim Sched_Date As String
        Dim Sched_Time As String
        Dim Task_Queue As String
        Dim File_Name As String = ""
        Dim Insert_Tasksrv_Count As Integer
        Dim Errore As Object = Nothing

        Dim Db_Conn2 As DB2Connection = Nothing

        Try
            Mouse_HourGlass()

            Db_Name = DB_GetConnectionInfo("db")
            User_Name = DB_GetConnectionInfo("uid")
            Client_Name = DB_GetClientName()

            Insert_Tasksrv_Count = 0

            ' apre una connessione separata se previsto; in tal caso tutte le operazioni
            ' vengono eseguite utilizzando questa connessione

            If Flag_Separate_Connection = True Then
                Db_Conn2 = New DB2Connection(DB_ConnectionString_NET)
                Db_Conn2.Open()
            End If

            ' estrae il nome del server e il path delle procedure

            Sql = "select * from server "

            If Flag_Separate_Connection = True Then
                Cmd = DB_CommandCreate(Sql, Db_Conn2)
            Else
                Cmd = DB_CommandCreate(Sql)
            End If

            Dr = Cmd.ExecuteReader

            If Dr.Read Then

                Server_Name = Trim(CStr(DB_Dsv(Dr("server_name"), "")))
                Server_Type = Trim(CStr(DB_Dsv(Dr("server_type"), "")))

                Srv_Path_Net = Trim(CStr(DB_Dsv(Dr("srv_path_net"), "")))

                If DB_FieldExists("server", "srv_path_net_grp") Then
                    Srv_Path_Net_Grp = Trim(CStr(DB_Dsv(Dr("srv_path_net_grp"), "")))
                Else
                    Srv_Path_Net_Grp = ""
                End If

                Srv_Path_Net_Std = Trim(CStr(DB_Dsv(Dr("srv_path_net_std"), "")))

                Srv_Path_Proc = Trim(CStr(DB_Dsv(Dr("srv_path_proc"), "")))

                If DB_FieldExists("server", "srv_path_proc_grp") Then
                    Srv_Path_Proc_Grp = Trim(CStr(DB_Dsv(Dr("srv_path_proc_grp"), "")))
                Else
                    Srv_Path_Proc_Grp = ""
                End If

                Srv_Path_Proc_Std = Trim(CStr(DB_Dsv(Dr("srv_path_proc_std"), "")))

                If TaskSrv.Flag_Mode = "Q" Then
                    Task_Queue = Trim(CStr(DB_Dsv(Dr("task_queue"), "")))
                Else
                    Task_Queue = ""
                End If

                DB_DataReaderClose(Dr, Cmd)

            Else
                DB_DataReaderClose(Dr, Cmd)
                GoTo Uscita_Tasksrv_Start
            End If

            ' registra il messaggio di processo

            '
            'In modalità COMMITTED READ il ciclo standard di controllo inserimento non funziona poichè la select ritornerà
            'sempre lo stesso valore e quindi i tentativi verranno fatti sempre con lo stesso numero
            '

            Try

                ' definisce il numero di processo

                Sql = "SELECT MAX(task_id) AS max_task_id FROM tasksrv"

                If Flag_Separate_Connection = True Then
                    Cmd = DB_CommandCreate(Sql, Db_Conn2)
                Else
                    Cmd = DB_CommandCreate(Sql)
                End If

                Dr = Cmd.ExecuteReader

                If Dr.Read Then
                    Task_Id = CInt(DB_Dsv(Dr("max_task_id"), 0)) + 1
                    DB_DataReaderClose(Dr, Cmd)
                Else
                    DB_DataReaderClose(Dr, Cmd)
                    GoTo Uscita_Tasksrv_Start
                End If

            Catch ex As Exception

                Errore = ex
                GoTo Uscita_Tasksrv_Start

            End Try

            Do While True

                Errore = Nothing

                Try

                    ' registra il messaggio di processo

                    Sql = "      INSERT INTO tasksrv "
                    Sql = Sql & "       (task_id, task_name, task_des, flag_mode, flag_report, "
                    Sql = Sql & "       task_user, client_name, server_name, parameters "

                    If TaskSrv.Flag_Mode = "S" Then
                        Sql = Sql & " ,sched_date, sched_time) "
                    Else
                        Sql = Sql & " ) "
                    End If

                    Sql = Sql & " VALUES (" & Task_Id & ", '" & Task_Name & "', "
                    Sql = Sql & "       '" & Task_Des & "', "

                    If Trim(TaskSrv.Flag_Mode) <> "" Then
                        Sql = Sql & "   '" & TaskSrv.Flag_Mode & "', "
                    Else
                        Sql = Sql & "   'F', "
                    End If

                    Sql = Sql & "       'N', "
                    Sql = Sql & "       '" & User_Name & "', '" & Client_Name & "', "
                    Sql = Sql & "       '" & Server_Name & "', '" & String_Swap(Parameters, "'", "''") & "' "

                    If TaskSrv.Flag_Mode = "S" Then
                        Sql = Sql & "      ,'" & Format(TaskSrv.Sched_Date, "dd/MM/yyyy") & "', "
                        Sql = Sql & "        " & String_Swap(Format(TaskSrv.Sched_Time, "00.00"), ",", ".") & ") "
                    Else
                        Sql = Sql & " ) "
                    End If

                    Insert_Tasksrv_Count = Insert_Tasksrv_Count + 1

                    If Flag_Separate_Connection = True Then
                        DB_SqlExecute(Sql, Db_Conn2)
                    Else
                        DB_SqlExecute(Sql)
                    End If

                    Exit Do

                Catch ex As IBM.Data.DB2.DB2Exception

                    If CInt(ex.Errors(0).NativeError.ToString()) = -239 Then
                        'If Insert_Tasksrv_Count < SRV_MAX_RETRY_INSERT Then
                        If Insert_Tasksrv_Count < 60 Then
                            Task_Id = Task_Id + 1
                            Exit Try
                        End If
                    End If

                    Errore = ex
                    GoTo Uscita_Tasksrv_Start

                Catch ex As Exception

                    Errore = ex
                    GoTo Uscita_Tasksrv_Start

                End Try

            Loop

            ' verifica se esiste il file personalizzato per .NET; 
            ' se non esiste allora verifica se esiste il file personalizzato per VB6;
            ' se non esiste allora verifica se esiste il file di gruppo per .NET;
            ' se non esiste allora verifica se esiste il file di gruppo per VB6;
            ' se non esiste allora verifica se esiste il file standard per .NET;
            ' se non esiste allora usa il file standard per VB6;

            File_PathServerToClient(Srv_Path_Net & "/" & Trim(Task_Name) & "/" & Trim(Task_Name), File_Name)

            If System.IO.File.Exists(File_Name) Then
                Srv_Path = Srv_Path_Net                                                 ' esegue l'applicazione CC per .NET personalizzata
            Else
                File_PathServerToClient(Srv_Path_Proc & "/" & Trim(Task_Name) & "/" & Trim(Task_Name), File_Name)

                If System.IO.File.Exists(File_Name) Then
                    Srv_Path = Srv_Path_Proc                                            ' esegue l'applicazione CC per VB6 personalizzata
                Else
                    File_PathServerToClient(Srv_Path_Net_Grp & "/" & Trim(Task_Name) & "/" & Trim(Task_Name), File_Name)

                    If (Trim(Srv_Path_Net_Grp) <> "") AndAlso System.IO.File.Exists(File_Name) Then
                        Srv_Path = Srv_Path_Net_Grp                                     ' esegue l'applicazione CC per .NET di gruppo
                    Else
                        File_PathServerToClient(Srv_Path_Proc_Grp & "/" & Trim(Task_Name) & "/" & Trim(Task_Name), File_Name)

                        If (Trim(Srv_Path_Proc_Grp) <> "") AndAlso System.IO.File.Exists(File_Name) Then
                            Srv_Path = Srv_Path_Proc_Grp                                ' esegue l'applicazione CC per VB6 di gruppo
                        Else
                            File_PathServerToClient(Srv_Path_Net_Std & "/" & Trim(Task_Name) & "/" & Trim(Task_Name), File_Name)

                            If System.IO.File.Exists(File_Name) Then
                                Srv_Path = Srv_Path_Net_Std                             ' esegue l'applicazione CC per .NET standard
                            Else
                                Srv_Path = Srv_Path_Proc_Std                            ' esegue l'applicazione CC per VB6 standard
                            End If
                        End If
                    End If
                End If
            End If

            ' prepara il comando di attivazione del processo sul server

            Comando = Srv_Path & "/" & Trim(Task_Name) & "/" & Trim(Task_Name) & "  " & Db_Name & "  " & Task_Id & " "

            ' imposta il comando in background / foreground / queued / scheduled

            Select Case TaskSrv.Flag_Mode
                Case "B"
                    Comando = "nohup " & Comando & " & "

                Case "F"

                Case "Q"
                    Select Case Server_Type
                        Case "A"
                            ' AIX
                            Comando = "echo " & Comando & "| enq -P " & Task_Queue
                        Case "L"
                            ' LINUX
                            Comando = "echo " & Comando & "| lpr -P " & Task_Queue
                    End Select

                Case "S"

                    Select Case Server_Type
                        Case "A"
                            ' AIX
                            Sched_Date = Format(TaskSrv.Sched_Date, "yyyyMMdd")
                            Sched_Time = Format(TaskSrv.Sched_Time, "00.00")
                            Sched_Time = Mid(Sched_Time, 1, 2) & Mid(Sched_Time, 4, 2)
                            Sched_Date = Sched_Date & Sched_Time
                            Comando = "echo " & Comando & "| at -t " & Sched_Date
                        Case "L"
                            ' LINUX
                            Sched_Date = Format(TaskSrv.Sched_Date, "MM/dd/yyyy")
                            Sched_Time = Format(TaskSrv.Sched_Time, "00.00")
                            Sched_Time = Mid(Sched_Time, 1, 2) & ":" & Mid(Sched_Time, 4, 2)
                            Sched_Date = Sched_Time & " " & Sched_Date
                            Comando = "echo " & Comando & "| at " & Sched_Date
                    End Select

            End Select

            ' invia il comando al server via stored procedure

            Sql = "EXECUTE PROCEDURE SHELL ('" & Comando & "') "

            If Flag_Separate_Connection = True Then
                DB_SqlExecute(Sql, Db_Conn2)
            Else
                DB_SqlExecute(Sql)
            End If

            ' chiude l'eventuale connessione separata precedentemente aperta

            If Flag_Separate_Connection = True Then
                Db_Conn2.Close()
            End If

            Mouse_Default()

            ' visualizza il messaggio finale

            If TaskSrv.Flag_Message = True Then

                Select Case TaskSrv.Flag_Mode
                    Case "B"
                        DevExpress.XtraEditors.XtraMessageBox.Show("OK !!!" & Chr(10) & Chr(10) & "Attivato Processo N° " & Trim(Str(Task_Id)) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    Case "F"
                        DevExpress.XtraEditors.XtraMessageBox.Show("OK !!!" & Chr(10) & Chr(10) & "Eseguito Processo N° " & Trim(Str(Task_Id)) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    Case "Q"
                        DevExpress.XtraEditors.XtraMessageBox.Show("OK !!!" & Chr(10) & Chr(10) & "Accodato Processo N° " & Trim(Str(Task_Id)) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    Case "S"
                        DevExpress.XtraEditors.XtraMessageBox.Show("OK !!!" & Chr(10) & Chr(10) & "Schedulato Processo N° " & Trim(Str(Task_Id)) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    Case Else
                        DevExpress.XtraEditors.XtraMessageBox.Show("OK !!!" & Chr(10) & Chr(10) & "Eseguito Processo N° " & Trim(Str(Task_Id)) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                End Select

            End If

            TaskSrv_Start2 = True

            Exit Function

Uscita_Tasksrv_Start:

            TaskSrv_Start2 = False

            Mouse_Default()

            If TaskSrv.Flag_Message = True Then

                If Not Errore Is Nothing Then
                    MsgErr(Errore)
                End If

            End If

            DB_DataReaderClose(Dr, Cmd)

            Exit Function

        Catch ex As Exception

            TaskSrv_Start2 = False

            Mouse_Default()

            If TaskSrv.Flag_Message = True Then
                MsgErr(ex)
            End If

            DB_DataReaderClose(Dr, Cmd)

            Exit Function

        End Try

    End Function

    Private Function Salva_Pianiprod() As Boolean

        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim dr_p As DB2DataReader = Nothing
        Dim cmd_p As DB2Command = Nothing
        Dim anno_piano As Integer
        Dim nr_piano As Integer
        Dim nr_riga_piano As Integer
        Dim anno1 As Object = Nothing
        Dim anno2 As Object = Nothing

        Dim ht_pianiprod As New Hashtable
        Dim esiste_piano As Object = Nothing

        Dim utente_agg As String = DB_GetConnectionInfo("uid")
        Dim data_agg As String = Format(Now, "dd/MM/yyyy")
        Dim ora_agg As String = Format(Now, "HH:mm:ss")
        Dim utente_ins1 As String = ""
        Dim data_ins1 As String = ""
        Dim ora_ins1 As String = ""
        Dim utente_agg1 As String = ""
        Dim data_agg1 As String = ""
        Dim ora_agg1 As String = ""

        Dim da_data_pian_appo As String = Getv(da_data_pian)
        Dim a_data_pian_appo As String = Getv(a_data_pian)

        Dim qta_pian As Double
        Dim lista_art_pian As String
        Dim esiste_commessa As Boolean
        Dim id_pp_pianiprod As Integer
        Dim riga_pp_pianiprod As Integer
        Dim flag_agg As Boolean
        Dim Sql_Where As String = ""

        Try

            Salva_Pianiprod = True

            DB_LookUp("anno1_prog_piapro, anno2_prog_piapro", "progressivi", , anno1, anno2)

            ' se previsto in azienda, considera anche il periodo esterno a quello a video che corrisponde al periodo in cui sono stati modificati i dati in un periodo più ampio rispetto
            ' a quello indicato a video per effetto dei giorni di anticipo produzione.
            If azienda_agg.flag_qta_pian_prod = "S" And IsDate(min_data_prod) And IsDate(max_data_prod) Then
                If DateValue(min_data_prod) < DateValue(Getv(da_data_pian_appo)) Then Setv(da_data_pian_appo, min_data_prod)
                If DateValue(max_data_prod) > DateValue(Getv(a_data_pian_appo)) Then Setv(a_data_pian_appo, max_data_prod)
            End If

            ' aggiorna il datatable delle commesse con il nuovo periodo
            Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian_appo, a_data_pian_appo, Getv(cod_dep))



            ' INIZIO - Estrazione lista degli articoli effettivamente modificati per ogni data del periodo. Gli articoli effettivamente modificati sono ricercanti confrontando la 
            '          tabella pp_pianiprod con la sua tabella temporanea di copia

            sql = ""
            sql = sql & "DELETE FROM " & TabTemp_pp_lista
            DB_SqlExecute(sql)

            ' Differenza di quantità tra le 2 tabelle
            sql = ""
            sql = sql & " SELECT DISTINCT pp_pianiprod.data_piano, pp_pianiprod.cod_art_pian " & vbCrLf
            sql = sql & "   FROM pp_pianiprod, " & TabTemp_pp_pianiprod_old & " as temp " & vbCrLf
            sql = sql & "  WHERE pp_pianiprod.data_piano BETWEEN '" & DB_Sql_Date(da_data_pian_appo) & "' AND '" & DB_Sql_Date(a_data_pian_appo) & "'" & vbCrLf
            sql = sql & "    AND pp_pianiprod.data_piano = temp.data_piano " & vbCrLf
            sql = sql & "    AND pp_pianiprod.cod_art_pian = temp.cod_art_pian " & vbCrLf
            sql = sql & "    AND pp_pianiprod.tipo_art_prod <> 'MP' " & vbCrLf

            If azienda_agg.flag_qta_pian_prod = "S" Then
                sql = sql & "    AND NVL(pp_pianiprod.qta_pian,NVL(pp_pianiprod.qta_impr,0)) <> NVL(temp.qta_pian,NVL(temp.qta_impr,0)) " & vbCrLf
            Else
                sql = sql & "    AND NVL(pp_pianiprod.qta_pian,0) <> NVL(temp.qta_pian,0) " & vbCrLf
            End If

            If Getv(cod_dep) <> "" Then
                Sql = Sql & "    AND pp_pianiprod.cod_dep = temp.cod_dep " & vbCrLf
                Sql = Sql & "    AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            cmd = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr, cmd)

            While dr.Read

                sql = ""
                sql = sql & "INSERT INTO " & TabTemp_pp_lista & vbCrLf
                sql = sql & "      (data_piano    , " & vbCrLf
                sql = sql & "       cod_art_pian  ) " & vbCrLf
                sql = sql & " VALUES ( " & vbCrLf
                sql = sql & "       '" & DB_Sql_Date(dr("data_piano")) & "', " & vbCrLf
                sql = sql & "       '" & DB_Dsv(dr("cod_art_pian"), "") & "' " & vbCrLf
                sql = sql & "        ) " & vbCrLf

                DB_SqlExecute(sql)

            End While

            DB_DataReaderClose(dr, cmd)


            ' Articoli aggiunti
            sql = ""
            sql = sql & " SELECT DISTINCT pp_pianiprod.data_piano, pp_pianiprod.cod_art_pian " & vbCrLf
            sql = sql & "   FROM pp_pianiprod " & vbCrLf
            sql = sql & "  WHERE pp_pianiprod.data_piano BETWEEN '" & DB_Sql_Date(da_data_pian_appo) & "' AND '" & DB_Sql_Date(a_data_pian_appo) & "'" & vbCrLf
            sql = sql & "    AND pp_pianiprod.tipo_art_prod <> 'MP' " & vbCrLf
            sql = sql & "    AND 0 = " & vbCrLf
            sql = sql & "    (SELECT count(*) FROM " & TabTemp_pp_pianiprod_old & " as temp " & vbCrLf
            sql = sql & "     WHERE temp.data_piano = pp_pianiprod.data_piano " & vbCrLf
            Sql = Sql & "       AND temp.cod_art_pian = pp_pianiprod.cod_art_pian " & vbCrLf
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "    AND temp.cod_dep = pp_pianiprod.cod_dep " & vbCrLf
            End If
            Sql = Sql & "     ) " & vbCrLf
            sql = sql & "    AND 0 = " & vbCrLf
            sql = sql & "    (SELECT count(*) FROM " & TabTemp_pp_lista & " as lista " & vbCrLf
            sql = sql & "     WHERE lista.data_piano = pp_pianiprod.data_piano " & vbCrLf
            Sql = Sql & "       AND lista.cod_art_pian = pp_pianiprod.cod_art_pian " & vbCrLf
            Sql = Sql & "     ) " & vbCrLf

            If azienda_agg.flag_qta_pian_prod = "S" Then
                sql = sql & "    AND NVL(pp_pianiprod.qta_pian,NVL(pp_pianiprod.qta_impr,0)) <> 0  " & vbCrLf
            Else
                sql = sql & "    AND NVL(pp_pianiprod.qta_pian,0) <> 0 " & vbCrLf
            End If

            If Getv(cod_dep) <> "" Then
                Sql = Sql & "    AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            cmd = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr, cmd)

            While dr.Read

                sql = ""
                sql = sql & "INSERT INTO " & TabTemp_pp_lista & vbCrLf
                Sql = Sql & "      (data_piano    , " & vbCrLf
                Sql = Sql & "       cod_art_pian  ) " & vbCrLf
                sql = sql & " VALUES ( " & vbCrLf
                Sql = Sql & "       '" & DB_Sql_Date(dr("data_piano")) & "', " & vbCrLf
                Sql = Sql & "       '" & DB_Dsv(dr("cod_art_pian"), "") & "' " & vbCrLf
                sql = sql & "        ) " & vbCrLf

                DB_SqlExecute(sql)

            End While

            DB_DataReaderClose(dr, cmd)

            ' Articoli cancellati
            sql = ""
            sql = sql & " SELECT DISTINCT temp.data_piano, temp.cod_art_pian " & vbCrLf
            sql = sql & "   FROM " & TabTemp_pp_pianiprod_old & " as temp " & vbCrLf
            sql = sql & "  WHERE temp.data_piano BETWEEN '" & DB_Sql_Date(da_data_pian_appo) & "' AND '" & DB_Sql_Date(a_data_pian_appo) & "'" & vbCrLf
            sql = sql & "    AND temp.tipo_art_prod <> 'MP' " & vbCrLf
            sql = sql & "    AND 0 = " & vbCrLf
            sql = sql & "    (SELECT count(*) FROM pp_pianiprod " & vbCrLf
            Sql = Sql & "     WHERE pp_pianiprod.data_piano = temp.data_piano " & vbCrLf
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "   AND pp_pianiprod.cod_dep = temp.cod_dep " & vbCrLf
            End If
            Sql = Sql & "       AND pp_pianiprod.cod_art_pian = temp.cod_art_pian " & vbCrLf
            sql = sql & "     ) " & vbCrLf
            sql = sql & "    AND 0 = " & vbCrLf
            sql = sql & "    (SELECT count(*) FROM " & TabTemp_pp_lista & " as lista " & vbCrLf
            sql = sql & "     WHERE lista.data_piano = temp.data_piano " & vbCrLf
            sql = sql & "       AND lista.cod_art_pian = temp.cod_art_pian " & vbCrLf
            sql = sql & "     ) " & vbCrLf

            If azienda_agg.flag_qta_pian_prod = "S" Then
                sql = sql & "    AND NVL(temp.qta_pian,NVL(temp.qta_impr,0)) <> 0  " & vbCrLf
            Else
                sql = sql & "    AND NVL(temp.qta_pian,0) <> 0 " & vbCrLf
            End If

            If Getv(cod_dep) <> "" Then
                Sql = Sql & "    AND temp.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If


            cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(dr, cmd)

            While dr.Read

                sql = ""
                sql = sql & "INSERT INTO " & TabTemp_pp_lista & vbCrLf
                sql = sql & "      (data_piano    , " & vbCrLf
                sql = sql & "       cod_art_pian  ) " & vbCrLf
                sql = sql & " VALUES ( " & vbCrLf
                sql = sql & "       '" & DB_Sql_Date(dr("data_piano")) & "', " & vbCrLf
                sql = sql & "       '" & DB_Dsv(dr("cod_art_pian"), "") & "' " & vbCrLf
                sql = sql & "        ) " & vbCrLf

                DB_SqlExecute(sql)

            End While

            DB_DataReaderClose(dr, cmd)


            ' FINE - Estrazione lista degli articoli effettivamente modificati per ogni data del periodo.



            'INIZIO - Ciclo per ogni data del piano dove è stata fatta qualche modifica

            sql = ""
            sql = sql & " SELECT DISTINCT data_piano " & vbCrLf
            sql = sql & "   FROM " & TabTemp_pp_lista & vbCrLf
            sql = sql & " ORDER BY data_piano " & vbCrLf

            cmd_p = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_p, cmd_p)

            While dr_p.Read

                'Lista degli articoli coinvolti nella modifica per una determinata data
                lista_art_pian = ""

                sql = ""
                sql = sql & " SELECT cod_art_pian " & vbCrLf
                sql = sql & "   FROM " & TabTemp_pp_lista & vbCrLf
                sql = sql & " WHERE data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf

                cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr, cmd)

                While dr.Read
                    If lista_art_pian = "" Then
                        lista_art_pian = "'" & Trim(dr("cod_art_pian")) & "'"
                    Else
                        lista_art_pian = lista_art_pian & ", '" & Trim(dr("cod_art_pian")) & "'"
                    End If
                End While
                DB_DataReaderClose(dr, cmd)

                If lista_art_pian = "" Then
                    lista_art_pian = "('')"
                Else
                    lista_art_pian = "(" & lista_art_pian & ")"
                End If


                'Aggiornamento su pianiprod dei campi id_pp_pianiprod e riga_pp_pianiprod per articoli precedentemente pianificati, poi cancellati (rimane la riga su pianiprod con quantità a 0 se si abilita in azienda
                'la modifica delle quantità pianificate anche se c'è una commessa già creata) e poi di nuovo pianificati per la stessa data.
                sql = ""
                sql = sql & "SELECT * " & vbCrLf
                sql = sql & "  FROM pianiprod " & vbCrLf
                sql = sql & " WHERE pianiprod.data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf
                sql = sql & "   AND pianiprod.cod_art_piano in " & lista_art_pian & vbCrLf
                sql = sql & "   AND   NVL(pianiprod.qta_da_prod,0) = 0 " & vbCrLf
                sql = sql & "   AND   pianiprod.id_pp_pianiprod IS NOT NULL " & vbCrLf
                sql = sql & "   AND   pianiprod.riga_pp_pianiprod IS NOT NULL " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & " AND pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If

                cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr, cmd)

                flag_agg = False

                While dr.Read

                    Sql_Where = ""
                    Sql_Where = Sql_Where & "data_piano = '" & DB_Sql_Date(dr("data_piano")) & "' AND cod_art_pian = '" & dr("cod_art_piano") & "'"

                    If Getv(cod_dep) <> "" Then
                        Sql_Where = Sql_Where & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If

                    'Verifico se per questi articoli presenti in pianiprod con la quantità a zero, esiste un nuovo ID da pp_pianiprod
                    If DB_LookUp("id, nr_riga", "pp_pianiprod", Sql_Where, id_pp_pianiprod, riga_pp_pianiprod) Then

                        DB_CommandParametersReset(qdf_upd_pianiprod)

                        qdf_upd_pianiprod.Parameters.Item("qta_da_prod").Value = dr("qta_da_prod")
                        qdf_upd_pianiprod.Parameters.Item("id_pp_pianiprod").Value = id_pp_pianiprod
                        qdf_upd_pianiprod.Parameters.Item("riga_pp_pianiprod").Value = riga_pp_pianiprod
                        qdf_upd_pianiprod.Parameters.Item("utente_upd").Value = dr("utente_upd")
                        qdf_upd_pianiprod.Parameters.Item("data_upd").Value = dr("data_upd")
                        qdf_upd_pianiprod.Parameters.Item("ora_upd").Value = dr("ora_upd")
                        qdf_upd_pianiprod.Parameters.Item("anno_piano").Value = dr("anno_piano")
                        qdf_upd_pianiprod.Parameters.Item("nr_piano").Value = dr("nr_piano")
                        qdf_upd_pianiprod.Parameters.Item("nr_riga_piano").Value = dr("nr_riga_piano")

                        DB_CommandExecute(qdf_upd_pianiprod)

                        flag_agg = True
                    End If

                End While
                DB_DataReaderClose(dr, cmd)

                If flag_agg Then
                    ' aggiorna il datatable delle commesse con il nuovo periodo
                    Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian_appo, a_data_pian_appo, Getv(cod_dep))
                End If

                'Annullamento della quantità in pianiprod 

                If azienda_agg.flag_aggcomm_pp <> "S" Then    ' S/N abilita la modifica della quantità pianificata anche se già presente la Commessa - Bolla Lavorazione

                    'Annullamento delle quantità solo per le righe di pianiprod che non hanno generato una commessa

                    sql = ""
                    sql = sql & "   UPDATE pianiprod  " & vbCrLf
                    sql = sql & "      SET qta_da_prod = 0, " & vbCrLf
                    sql = sql & "          utente_upd  = '" & utente_agg & "', " & vbCrLf
                    sql = sql & "          data_upd    = '" & DB_Sql_Date(data_agg) & "', " & vbCrLf
                    sql = sql & "          ora_upd     = '" & ora_agg & "'" & vbCrLf
                    sql = sql & "    WHERE pianiprod.data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf
                    sql = sql & "    AND   pianiprod.cod_art_piano in " & lista_art_pian & vbCrLf
                    sql = sql & "    AND   pianiprod.id_pp_pianiprod IS NOT NULL " & vbCrLf
                    sql = sql & "    AND   pianiprod.riga_pp_pianiprod IS NOT NULL " & vbCrLf
                    sql = sql & "    AND   0 = (SELECT COUNT(*) FROM commesse " & vbCrLf
                    sql = sql & "               WHERE pianiprod.anno_piano = commesse.anno_piano " & vbCrLf
                    sql = sql & "                 AND pianiprod.nr_piano = commesse.nr_piano " & vbCrLf
                    sql = sql & "                 AND pianiprod.nr_riga_piano = commesse.nr_riga_piano) " & vbCrLf
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    DB_SqlExecute(sql)

                Else

                    'Annullamento delle quantità per qualsiasi riga di pianiprod

                    sql = ""
                    sql = sql & "   UPDATE pianiprod  " & vbCrLf
                    sql = sql & "      SET qta_da_prod = 0, " & vbCrLf
                    sql = sql & "          utente_upd  = '" & utente_agg & "', " & vbCrLf
                    sql = sql & "          data_upd    = '" & DB_Sql_Date(data_agg) & "', " & vbCrLf
                    sql = sql & "          ora_upd     = '" & ora_agg & "'" & vbCrLf
                    sql = sql & "    WHERE pianiprod.data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf
                    sql = sql & "    AND   pianiprod.cod_art_piano in " & lista_art_pian & vbCrLf
                    sql = sql & "    AND   pianiprod.id_pp_pianiprod IS NOT NULL " & vbCrLf
                    sql = sql & "    AND   pianiprod.riga_pp_pianiprod IS NOT NULL " & vbCrLf
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    DB_SqlExecute(sql)

                End If

                ' Inserimento di pianiprod per la data che si sta elaborando e solo per gli articoli modificati
                sql = ""
                sql = sql & "SELECT pp_pianiprod.id, " & vbCrLf
                sql = sql & "       pp_pianiprod.nr_riga, " & vbCrLf
                sql = sql & "       pp_pianiprod.tipo_art_prod, " & vbCrLf
                sql = sql & "       pp_pianiprod.data_piano, " & vbCrLf
                sql = sql & "       pp_pianiprod.cod_art_pian, " & vbCrLf
                sql = sql & "       pp_pianiprod.qta_pian, " & vbCrLf
                sql = sql & "       pp_pianiprod.qta_impr, " & vbCrLf
                sql = sql & "       anaart.ragg_prod " & vbCrLf
                sql = sql & "  FROM pp_pianiprod, anaart " & vbCrLf
                sql = sql & " WHERE pp_pianiprod.data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf
                sql = sql & "   AND pp_pianiprod.cod_art_pian in " & lista_art_pian & vbCrLf
                Sql = Sql & "   AND pp_pianiprod.cod_art_pian = anaart.cod_art " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If
                Sql = Sql & " ORDER BY pp_pianiprod.data_piano, anaart.ragg_prod DESC, pp_pianiprod.cod_art_pian "

                cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr, cmd)

                While dr.Read


                    qta_pian = Object_Val(DB_Dsv(dr("qta_pian"), 0))

                    If azienda_agg.flag_qta_pian_prod = "S" And RTrim(DB_Dsv(dr("tipo_art_prod"), "")) = "SL" Then
                        If IsDBNull(dr("qta_pian")) Then
                            qta_pian = Object_Val(DB_Dsv(dr("qta_impr"), 0))
                        End If
                    End If

                    If Math.Abs(Math.Round(qta_pian, 3)) >= 0.001 Then

                        'Aggiunta della riga su pianiprod se non esiste oppure viene aggiornata quella esistente

                        qdf_sel_pianiprod.Parameters.Item("data_piano").Value = DB_Sql_Date(dr("data_piano"))
                        qdf_sel_pianiprod.Parameters.Item("cod_art_piano").Value = DB_Dsv(dr("cod_art_pian"), "")
                        If Getv(cod_dep) <> "" Then
                            qdf_sel_pianiprod.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                        End If
                        qdf_sel_pianiprod.Transaction = DB_Transaction
                        dr_sel_pianiprod = qdf_sel_pianiprod.ExecuteReader

                        If dr_sel_pianiprod.Read Then

                            'AGGIORNAMENTO

                            anno_piano = CInt(dr_sel_pianiprod("anno_piano"))
                            nr_piano = CInt(dr_sel_pianiprod("nr_piano"))
                            nr_riga_piano = CInt(dr_sel_pianiprod("nr_riga_piano"))


                            esiste_commessa = Esistono_Commesse(DB_Dsv(dr("data_piano"), "01/01/1900"), DB_Dsv(dr("cod_art_pian"), ""), xx1)


                            If Not esiste_commessa Or azienda_agg.flag_aggcomm_pp = "S" Then  'flag_aggcomm_pp =  S/N abilita la modifica della quantità pianificata anche se già presente la Commessa - Bolla Lavorazione

                                DB_CommandParametersReset(qdf_upd_pianiprod)

                                qdf_upd_pianiprod.Parameters.Item("qta_da_prod").Value = qta_pian
                                qdf_upd_pianiprod.Parameters.Item("id_pp_pianiprod").Value = CInt(DB_Dsv(dr("id"), 0))
                                qdf_upd_pianiprod.Parameters.Item("riga_pp_pianiprod").Value = CInt(DB_Dsv(dr("nr_riga"), 0))
                                qdf_upd_pianiprod.Parameters.Item("utente_upd").Value = utente_agg
                                qdf_upd_pianiprod.Parameters.Item("data_upd").Value = DateValue(data_agg)
                                qdf_upd_pianiprod.Parameters.Item("ora_upd").Value = ora_agg
                                qdf_upd_pianiprod.Parameters.Item("anno_piano").Value = anno_piano
                                qdf_upd_pianiprod.Parameters.Item("nr_piano").Value = nr_piano
                                qdf_upd_pianiprod.Parameters.Item("nr_riga_piano").Value = nr_riga_piano

                                DB_CommandExecute(qdf_upd_pianiprod)

                                'Se esiste la commessa per la riga appena aggiornata ed è attivo l'apposito flag in azienda, allora viene aggiornata 
                                'anche la commessa e l'eventuale bolla di lavorazione
                                If esiste_commessa And azienda_agg.flag_aggcomm_pp = "S" Then

                                    Aggiorna_Commesse(anno_piano, nr_piano, nr_riga_piano, qta_pian, utente_agg, data_agg, ora_agg)

                                End If

                            End If



                        Else

                            'INSERIMENTO

                            If anno1 <> CDate(DB_Dsv(dr("data_piano"), "01/01/1900")).Year And anno2 <> CDate(DB_Dsv(dr("data_piano"), "01/01/1900")).Year Then
                                XtraMessageBox.Show("Non è prevista la gestione dei progressivi per questo anno.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                                Salva_Pianiprod = False
                                Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian, a_data_pian, Getv(cod_dep))
                                Exit Function
                            End If

                            esiste_commessa = Esistono_Commesse(DB_Dsv(dr("data_piano"), "01/01/1900"), DB_Dsv(dr("cod_art_pian"), ""), xx1)

                            If Not esiste_commessa Or azienda_agg.flag_aggcomm_pp = "S" Then  'flag_aggcomm_pp =  S/N abilita la modifica della quantità pianificata anche se già presente la Commessa - Bolla Lavorazione

                                'lettura dell'anno e numero piano se ne esiste uno per lo stesso giorno
                                Sql_Where = ""
                                Sql_Where = Sql_Where & "data_piano = '" & DB_Sql_Date(dr("data_piano")) & "'"
                                If Getv(cod_dep) <> "" Then
                                    Sql_Where = Sql_Where & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                                End If
                                If Not DB_LookUp("anno_piano, nr_piano", "pianiprod", Sql_Where, anno_piano, nr_piano) Then
                                    If anno1 = CDate(DB_Dsv(dr("data_piano"), "01/01/1900")).Year Then
                                        anno_piano = anno1
                                        Incrementa_Progressivi("prog1_piapro", nr_piano)
                                    Else
                                        anno_piano = anno2
                                        Incrementa_Progressivi("prog2_piapro", nr_piano)
                                    End If
                                End If

                                DB_LookUp("MAX(nr_riga_piano)", "pianiprod", "anno_piano = " & anno_piano & " AND nr_piano = " & nr_piano, nr_riga_piano)

                                DB_CommandParametersReset(qdf_ins_pianiprod)

                                qdf_ins_pianiprod.Parameters.Item("anno_piano").Value = anno_piano
                                qdf_ins_pianiprod.Parameters.Item("nr_piano").Value = nr_piano
                                qdf_ins_pianiprod.Parameters.Item("data_piano").Value = CDate(DB_Dsv(dr("data_piano"), "01/01/1900"))
                                qdf_ins_pianiprod.Parameters.Item("seq_priorita").Value = 0
                                qdf_ins_pianiprod.Parameters.Item("cod_art_piano").Value = DB_Dsv(dr("cod_art_pian"), "")
                                qdf_ins_pianiprod.Parameters.Item("nr_variante_piano").Value = 0
                                qdf_ins_pianiprod.Parameters.Item("nr_riga_piano").Value = nr_riga_piano + 1
                                If Getv(cod_dep) <> "" Then
                                    qdf_ins_pianiprod.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                                Else
                                    qdf_ins_pianiprod.Parameters.Item("cod_dep").Value = Getv(cod_dep_in_sede)
                                End If
                                qdf_ins_pianiprod.Parameters.Item("cod_mag").Value = Get_Mag_Articolo(DB_Dsv(dr("cod_art_pian"), ""), cod_mag_in_sede)
                                qdf_ins_pianiprod.Parameters.Item("qta_da_prod").Value = qta_pian
                                qdf_ins_pianiprod.Parameters.Item("qta_comm").Value = 0
                                qdf_ins_pianiprod.Parameters.Item("data_inizio_prod").Value = CDate(DB_Dsv(dr("data_piano"), "01/01/1900"))
                                qdf_ins_pianiprod.Parameters.Item("data_fine_prod").Value = DBNull.Value
                                qdf_ins_pianiprod.Parameters.Item("note_piano").Value = DBNull.Value
                                qdf_ins_pianiprod.Parameters.Item("flag_evaso").Value = "N"
                                qdf_ins_pianiprod.Parameters.Item("id_pp_pianiprod").Value = CInt(DB_Dsv(dr("id"), 0))
                                qdf_ins_pianiprod.Parameters.Item("riga_pp_pianiprod").Value = CInt(DB_Dsv(dr("nr_riga"), 0))


                                ' campi derivanti da "spostamento quantità di produzione" --> mantiene data e ora inserimento originali

                                DB_LookUp("utente_ins , data_ins , ora_ins , utente_agg , data_agg , ora_agg ", dbtempname_pianiprod_old, "cod_art_piano = '" & DB_Dsv(dr("cod_art_pian"), "") & "' AND data_piano = '" & DB_Sql_Date(dr("data_piano")) & "' ORDER BY data_ins ASC, ora_ins ASC ", _
                                           utente_ins1, data_ins1, ora_ins1, utente_agg1, data_agg1, ora_agg1)

                                If Not Field_Null(utente_ins1) And Not Field_Null(data_ins1) And Not Field_Null(ora_ins1) Then
                                    qdf_ins_pianiprod.Parameters.Item("utente_ins").Value = utente_ins1
                                    qdf_ins_pianiprod.Parameters.Item("data_ins").Value = DateValue(data_ins1)
                                    qdf_ins_pianiprod.Parameters.Item("ora_ins").Value = ora_ins1
                                    qdf_ins_pianiprod.Parameters.Item("utente_upd").Value = utente_agg1
                                    qdf_ins_pianiprod.Parameters.Item("data_upd").Value = DateValue(data_agg1)
                                    qdf_ins_pianiprod.Parameters.Item("ora_upd").Value = ora_agg1

                                Else
                                    qdf_ins_pianiprod.Parameters.Item("utente_ins").Value = utente_agg
                                    qdf_ins_pianiprod.Parameters.Item("data_ins").Value = DateValue(data_agg)
                                    qdf_ins_pianiprod.Parameters.Item("ora_ins").Value = ora_agg
                                    qdf_ins_pianiprod.Parameters.Item("utente_upd").Value = DBNull.Value
                                    qdf_ins_pianiprod.Parameters.Item("data_upd").Value = DBNull.Value
                                    qdf_ins_pianiprod.Parameters.Item("ora_upd").Value = DBNull.Value
                                End If

                                DB_CommandExecute(qdf_ins_pianiprod)

                            End If


                        End If
                        DB_DataReaderClose(dr_sel_pianiprod)


                    End If

                End While

                DB_DataReaderClose(dr, cmd)


                'Annullamento delle quantità sulle commesse per le righe che hanno la quantità a zero
                If azienda_agg.flag_aggcomm_pp = "S" Then

                    sql = ""
                    sql = sql & "   SELECT *  " & vbCrLf
                    sql = sql & "    FROM pianiprod  " & vbCrLf
                    sql = sql & "    WHERE pianiprod.data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf
                    sql = sql & "    AND   pianiprod.cod_art_piano in " & lista_art_pian & vbCrLf
                    sql = sql & "    AND   NVL(pianiprod.qta_da_prod,0) = 0 " & vbCrLf
                    sql = sql & "    AND   pianiprod.id_pp_pianiprod IS NOT NULL " & vbCrLf
                    sql = sql & "    AND   pianiprod.riga_pp_pianiprod IS NOT NULL " & vbCrLf
                    sql = sql & "    AND   0 < (SELECT COUNT(*) FROM commesse " & vbCrLf
                    sql = sql & "               WHERE pianiprod.anno_piano = commesse.anno_piano " & vbCrLf
                    sql = sql & "                 AND pianiprod.nr_piano = commesse.nr_piano " & vbCrLf
                    sql = sql & "                 AND pianiprod.nr_riga_piano = commesse.nr_riga_piano) " & vbCrLf
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    cmd = DB_CommandCreate(sql)
                    DB_DataReaderExecute(dr, cmd)

                    While dr.Read

                        Aggiorna_Commesse(dr("anno_piano"), dr("nr_piano"), dr("nr_riga_piano"), dr("qta_da_prod"), utente_agg, data_agg, ora_agg)

                    End While

                    DB_DataReaderClose(dr, cmd)

                End If


                'Cancellazione delle righe su pianiprod che hanno la quantità a zero (se non c'è una commessa collegata)
                sql = ""
                sql = sql & "   DELETE FROM pianiprod  " & vbCrLf
                sql = sql & "    WHERE pianiprod.data_piano = '" & DB_Sql_Date(dr_p("data_piano")) & "'" & vbCrLf
                sql = sql & "    AND   pianiprod.cod_art_piano in " & lista_art_pian & vbCrLf
                sql = sql & "    AND   NVL(pianiprod.qta_da_prod,0) = 0 " & vbCrLf
                sql = sql & "    AND   pianiprod.id_pp_pianiprod IS NOT NULL " & vbCrLf
                sql = sql & "    AND   pianiprod.riga_pp_pianiprod IS NOT NULL " & vbCrLf
                sql = sql & "    AND   0 = (SELECT COUNT(*) FROM commesse " & vbCrLf
                sql = sql & "               WHERE pianiprod.anno_piano = commesse.anno_piano " & vbCrLf
                sql = sql & "                 AND pianiprod.nr_piano = commesse.nr_piano " & vbCrLf
                sql = sql & "                 AND pianiprod.nr_riga_piano = commesse.nr_riga_piano) " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & " AND pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If
                DB_SqlExecute(sql)


            End While

            DB_DataReaderClose(dr_p, cmd)

            'FINE - Ciclo per ogni data del piano dove è stata fatta qualche modifica



            If lista_id_qta_pian_prod <> "" And azienda_agg.flag_aggcomm_pp <> "S" Then

                Dim cmd_com As DB2Command = Nothing
                Dim dr_com As DB2DataReader = Nothing

                sql = ""
                sql = sql & "SELECT pp_pianiprod.*, anaart.des_art, anaart.cod_um " & vbCrLf
                sql = sql & "  FROM pp_pianiprod, anaart " & vbCrLf
                sql = sql & " WHERE pp_pianiprod.tipo_art_prod = 'SL' " & vbCrLf
                sql = sql & "   AND pp_pianiprod.id IN (" & lista_id_qta_pian_prod & ") " & vbCrLf
                sql = sql & "   AND pp_pianiprod.cod_art_pian = anaart.cod_art " & vbCrLf
                ' estrae solo id che hanno piani con commesse già generate
                sql = sql & "   AND NVL((SELECT COUNT(*) " & vbCrLf
                sql = sql & "               FROM pianiprod " & vbCrLf
                sql = sql & "              WHERE pianiprod.id_pp_pianiprod   = pp_pianiprod.id " & vbCrLf
                Sql = Sql & "                AND pianiprod.riga_pp_pianiprod = pp_pianiprod.nr_riga " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & "            AND pianiprod.cod_dep           = pp_pianiprod.cod_dep " & vbCrLf
                End If
                sql = sql & "                AND NVL((SELECT COUNT(*) " & vbCrLf
                sql = sql & "                           FROM commesse " & vbCrLf
                sql = sql & "                          WHERE commesse.anno_piano = pianiprod.anno_piano " & vbCrLf
                sql = sql & "                            AND commesse.nr_piano = pianiprod.nr_piano " & vbCrLf
                sql = sql & "                            AND commesse.nr_riga_piano = pianiprod.nr_riga_piano),0) > 0 " & vbCrLf
                sql = sql & "            ),0) > 0 " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If

                cmd_com = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr_com, cmd_com)

                While dr_com.Read

                    sql = ""
                    sql = sql & "INSERT INTO " & dbtempame_art_no_mod & vbCrLf
                    sql = sql & "      (data_prod     , " & vbCrLf
                    sql = sql & "       cod_art       , " & vbCrLf
                    sql = sql & "       des_art       , " & vbCrLf
                    sql = sql & "       tipo_art_prod , " & vbCrLf
                    sql = sql & "       cod_um        , " & vbCrLf
                    sql = sql & "       qta           , " & vbCrLf
                    sql = sql & "       flag_pian     ) " & vbCrLf
                    sql = sql & " VALUES ( " & vbCrLf
                    sql = sql & "       '" & DB_Dsv(dr_com("data_piano"), "") & "', " & vbCrLf
                    sql = sql & "       '" & DB_Dsv(dr_com("cod_art_pian"), "") & "', " & vbCrLf
                    sql = sql & "       '" & Replace(DB_Dsv(dr_com("des_art"), ""), "'", "") & "', " & vbCrLf
                    sql = sql & "       '" & DB_Dsv(dr_com("tipo_art_prod"), "") & "', " & vbCrLf
                    sql = sql & "       '" & DB_Dsv(dr_com("cod_um"), "") & "', " & vbCrLf
                    sql = sql & "       " & Replace(DB_Dsv(dr_com("qta_impr"), 0), ",", ".") & ", " & vbCrLf
                    sql = sql & "       'C') " & vbCrLf

                    DB_SqlExecute(sql)

                End While

                DB_DataReaderClose(dr_com, cmd_com)


            End If

            ' rimette a posto il datatable delle commesse
            Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian, a_data_pian, Getv(cod_dep))

            lista_id_qta_pian_prod = ""

        Catch ex As Exception

            DB_DataReaderClose(dr, cmd)
            DB_DataReaderClose(dr_p, cmd)
            DB_DataReaderClose(dr_sel_pianiprod)

            MsgErr(ex)

            Salva_Pianiprod = False



        Finally

            DB_DataReaderClose(dr, cmd)
            DB_DataReaderClose(dr_p, cmd)
            DB_DataReaderClose(dr_sel_pianiprod)

        End Try

    End Function

    Private Sub Salva_PP_Pianiprod_Var()

        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Dr2 As DB2DataReader = Nothing
        Dim Cmd2 As DB2Command = Nothing
        Dim da_var As DB2DataAdapter = Nothing
        Dim dt_var = New DataTable
        Dim NewRow As DataRow
        Dim da_data_pian_appo As String = Getv(da_data_pian)
        Dim a_data_pian_appo As String = Getv(a_data_pian)
        Dim utente_var As String = DB_GetConnectionInfo("uid")
        Dim data_var As String = Format(Now, "dd/MM/yyyy")
        Dim str_ora_var_iniz As String = Format(Now, "dd/MM/yyyy HH:mm:ss")
        Dim str_ora_var As String = ""
        Dim Index_Inserimento As Integer = 0

        Try

            ' se previsto in azienda, considera anche il periodo esterno a quello a video che corrisponde al periodo in cui sono stati modificati i dati in un periodo più ampio rispetto
            ' a quello indicato a video per effetto dei giorni di anticipo produzione.

            If azienda_agg.flag_qta_pian_prod = "S" And IsDate(min_data_prod) And IsDate(max_data_prod) Then
                If DateValue(min_data_prod) < DateValue(Getv(da_data_pian_appo)) Then Setv(da_data_pian_appo, min_data_prod)
                If DateValue(max_data_prod) > DateValue(Getv(a_data_pian_appo)) Then Setv(a_data_pian_appo, max_data_prod)
            End If

            For Index_Inserimento = 0 To 2

                str_ora_var = DateAdd(DateInterval.Second, Index_Inserimento, TimeValue(str_ora_var_iniz))

                Select Case Index_Inserimento

                    Case 0

                        ' estrazione cancellazioni (presente sull'old ma non in pp_pianiprod)

                        sql = ""
                        sql = sql & "SELECT DISTINCT pp_old.data_piano, pp_old.cod_art_pian, " & vbCrLf
                        sql = sql & "       0 AS qta_pian, 0 AS qta_pian_co, 0 AS qta_pian_cf, 0 AS qta_pian_pe, 0 AS qta_pian_pz, " & vbCrLf
                        sql = sql & "       0 AS qta_impr, 0 AS qta_impr_co, 0 AS qta_impr_cf, 0 AS qta_impr_pe, 0 AS qta_impr_pz  " & vbCrLf
                        sql = sql & "  FROM " & TabTemp_pp_pianiprod_old & " AS pp_old " & vbCrLf
                        sql = sql & " WHERE pp_old.data_piano BETWEEN '" & DB_Sql_Date(da_data_pian_appo) & "' AND '" & DB_Sql_Date(a_data_pian_appo) & "'" & vbCrLf
                        sql = sql & "   AND NVL((SELECT COUNT(*) "
                        sql = sql & "              FROM pp_pianiprod " & vbCrLf
                        Sql = Sql & "             WHERE pp_pianiprod.data_piano   = pp_old.data_piano " & vbCrLf
                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & "           AND pp_pianiprod.cod_dep      = pp_old.cod_dep " & vbCrLf
                        End If
                        Sql = Sql & "               AND pp_pianiprod.cod_art_pian = pp_old.cod_art_pian),0) <= 0 " & vbCrLf

                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & " AND pp_old.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                        End If


                    Case 1

                        ' estrazione nuovi inserimenti (presente su pp_pianiprod ma non sull'old)

                        sql = ""
                        sql = sql & "SELECT DISTINCT pp_pianiprod.data_piano, pp_pianiprod.cod_art_pian, " & vbCrLf
                        sql = sql & "       pp_pianiprod.qta_pian, pp_pianiprod.qta_pian_co, pp_pianiprod.qta_pian_cf, pp_pianiprod.qta_pian_pe, pp_pianiprod.qta_pian_pz, " & vbCrLf
                        sql = sql & "       pp_pianiprod.qta_impr, pp_pianiprod.qta_impr_co, pp_pianiprod.qta_impr_cf, pp_pianiprod.qta_impr_pe, pp_pianiprod.qta_impr_pz  " & vbCrLf
                        sql = sql & "  FROM pp_pianiprod " & vbCrLf
                        sql = sql & " WHERE pp_pianiprod.data_piano BETWEEN '" & DB_Sql_Date(da_data_pian_appo) & "' AND '" & DB_Sql_Date(a_data_pian_appo) & "'" & vbCrLf
                        sql = sql & "   AND NVL((SELECT COUNT(*) "
                        sql = sql & "              FROM " & TabTemp_pp_pianiprod_old & " AS pp_old " & vbCrLf
                        Sql = Sql & "             WHERE pp_old.data_piano   = pp_pianiprod.data_piano " & vbCrLf
                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & "           AND pp_old.cod_dep      = pp_pianiprod.cod_dep " & vbCrLf
                        End If
                        sql = sql & "               AND pp_old.cod_art_pian = pp_pianiprod.cod_art_pian),0) <= 0 " & vbCrLf

                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & "    AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                        End If

                    Case 2

                        ' estrazione dati con differenza di quantità tra le 2 tabelle

                        sql = ""
                        sql = sql & "SELECT DISTINCT pp_pianiprod.data_piano, pp_pianiprod.cod_art_pian, " & vbCrLf
                        sql = sql & "       pp_pianiprod.qta_pian, pp_pianiprod.qta_pian_co, pp_pianiprod.qta_pian_cf, pp_pianiprod.qta_pian_pe, pp_pianiprod.qta_pian_pz, " & vbCrLf
                        sql = sql & "       pp_pianiprod.qta_impr, pp_pianiprod.qta_impr_co, pp_pianiprod.qta_impr_cf, pp_pianiprod.qta_impr_pe, pp_pianiprod.qta_impr_pz  " & vbCrLf
                        sql = sql & "  FROM pp_pianiprod, " & TabTemp_pp_pianiprod_old & " AS pp_old " & vbCrLf
                        sql = sql & " WHERE pp_pianiprod.data_piano BETWEEN '" & DB_Sql_Date(da_data_pian_appo) & "' AND '" & DB_Sql_Date(a_data_pian_appo) & "'" & vbCrLf
                        sql = sql & "   AND pp_pianiprod.data_piano = pp_old.data_piano " & vbCrLf
                        sql = sql & "   AND pp_pianiprod.cod_art_pian = pp_old.cod_art_pian " & vbCrLf

                        If azienda_agg.flag_qta_pian_prod = "S" Then
                            sql = sql & "    AND NVL(pp_pianiprod.qta_pian,NVL(pp_pianiprod.qta_impr,0)) <> NVL(pp_old.qta_pian,NVL(pp_old.qta_impr,0)) " & vbCrLf
                        Else
                            sql = sql & "    AND NVL(pp_pianiprod.qta_pian,0) <> NVL(pp_old.qta_pian,0) " & vbCrLf
                        End If

                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & " AND pp_pianiprod.cod_dep = pp_old.cod_dep " & vbCrLf
                            Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                        End If

                End Select

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                ' apre DataAdapter per nuovi inserimenti

                DB_DataAdapterOpen(da_var, "SELECT * FROM pp_pianiprod_var WHERE 1=0 ", "pp_pianiprod_var", "data_piano, cod_art_pian, nr_var", DB2DataAdapterType.Optimistic)
                da_var.Fill(dt_var)

                While Dr.Read

                    ' sposta tutte le variazioni a + 1

                    sql = ""
                    Sql = Sql & "SELECT data_piano, cod_art_pian, nr_var " & vbCrLf
                    sql = sql & "  FROM pp_pianiprod_var " & vbCrLf
                    sql = sql & " WHERE data_piano = '" & Trim(DB_Dsv(Dr("data_piano"), "")) & "' " & vbCrLf
                    Sql = Sql & "   AND cod_art_pian = '" & RTrim(DB_Dsv(Dr("cod_art_pian"), "")) & "' " & vbCrLf
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & "   AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    sql = sql & " ORDER BY nr_var DESC " & vbCrLf

                    Cmd2 = DB_CommandCreate(sql)
                    DB_DataReaderExecute(Dr2, Cmd2)

                    While Dr2.Read
                        sql = ""
                        sql = sql & "UPDATE pp_pianiprod_var " & vbCrLf
                        sql = sql & "   SET nr_var = nr_var + 1 " & vbCrLf
                        sql = sql & " WHERE data_piano = '" & Trim(DB_Dsv(Dr2("data_piano"), "")) & "' " & vbCrLf
                        sql = sql & "   AND cod_art_pian = '" & RTrim(DB_Dsv(Dr2("cod_art_pian"), "")) & "' " & vbCrLf
                        Sql = Sql & "   AND nr_var = " & DB_Dsv(Dr2("nr_var"), 0) & " " & vbCrLf
                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                        End If
                        DB_SqlExecute(Sql)
                    End While

                    DB_DataReaderClose(Dr2, Cmd2)

                    ' inserisce l'ultima variazione con numero variazione = 1

                    sql = ""
                    sql = sql & "DELETE FROM pp_pianiprod_var " & vbCrLf
                    sql = sql & " WHERE data_piano = '" & Trim(DB_Dsv(Dr("data_piano"), "")) & "' " & vbCrLf
                    sql = sql & "   AND cod_art_pian = '" & RTrim(DB_Dsv(Dr("cod_art_pian"), "")) & "' " & vbCrLf
                    Sql = Sql & "   AND nr_var = 1 " & vbCrLf
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    DB_SqlExecute(sql)

                    NewRow = dt_var.NewRow()

                    NewRow("data_piano") = Dr("data_piano")
                    NewRow("cod_art_pian") = Dr("cod_art_pian")
                    NewRow("nr_var") = 1
                    NewRow("utente_var") = utente_var
                    NewRow("data_var") = data_var
                    NewRow("ora_var") = str_ora_var
                    NewRow("qta_pian") = Dr("qta_pian")
                    NewRow("qta_pian_co") = Dr("qta_pian_co")
                    NewRow("qta_pian_cf") = Dr("qta_pian_cf")
                    NewRow("qta_pian_pe") = Dr("qta_pian_pe")
                    NewRow("qta_pian_pz") = Dr("qta_pian_pz")
                    NewRow("qta_impr") = Dr("qta_impr")
                    NewRow("qta_impr_co") = Dr("qta_impr_co")
                    NewRow("qta_impr_cf") = Dr("qta_impr_cf")
                    NewRow("qta_impr_pe") = Dr("qta_impr_pe")
                    NewRow("qta_impr_pz") = Dr("qta_impr_pz")
                    If Getv(cod_dep) <> "" Then
                        NewRow("cod_dep") = Getv(cod_dep)
                    End If

                    dt_var.Rows.Add(NewRow)

                    da_var.Update(dt_var)

                End While

                DB_DataReaderClose(Dr, Cmd)
                DB_DataAdapterClose(da_var)

            Next



        Catch ex As Exception

            DB_DataReaderClose(Dr, Cmd)
            DB_DataAdapterClose(da_var)

        End Try

    End Sub

    Private Function Aggiorna_Commesse(ByVal anno_piano As Integer, ByVal nr_piano As Integer, ByVal nr_riga_piano As Integer, ByVal qta_da_prod As Double, ByVal utente_agg As String, ByVal data_agg As String, ByVal ora_agg As String) As Boolean

        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim sql As String
        Dim anno_comm As Integer
        Dim nr_comm As Integer
        Dim nr_riga_comm As Integer
        Dim qta_da_prod_old As Double

        Dim Delta_Qta_imp As Double
        Dim New_Qta_Imp As Double
        Dim fatt_conv_comp As Double
        Dim impegnato_prod As Double
        Dim Delta As Double

        Try
            Aggiorna_Commesse = False

            If DB_LookUp("anno_comm, nr_comm, nr_riga_comm, qta_comm", "commesse", "anno_piano=" & anno_piano & " AND nr_piano = " & nr_piano & " AND nr_riga_piano = " & nr_riga_piano, anno_comm, nr_comm, nr_riga_comm, qta_da_prod_old) Then


                'Aggiornamento della tabella commesse

                DB_CommandParametersReset(qdf_upd_commesse)
                qdf_upd_commesse.Parameters.Item("qta_comm").Value = qta_da_prod
                qdf_upd_commesse.Parameters.Item("utente_upd").Value = utente_agg
                qdf_upd_commesse.Parameters.Item("data_upd").Value = DateValue(data_agg)
                qdf_upd_commesse.Parameters.Item("ora_upd").Value = ora_agg
                qdf_upd_commesse.Parameters.Item("anno_comm").Value = anno_comm
                qdf_upd_commesse.Parameters.Item("nr_comm").Value = nr_comm
                qdf_upd_commesse.Parameters.Item("nr_riga_comm").Value = nr_riga_comm
                DB_CommandExecute(qdf_upd_commesse)

                'Aggiornamento della quantità commessa nella tabella pianiprod
                DB_CommandParametersReset(qdf_upd_pianiprod2)
                qdf_upd_pianiprod2.Parameters.Item("qta_comm").Value = qta_da_prod
                qdf_upd_pianiprod2.Parameters.Item("utente_upd").Value = utente_agg
                qdf_upd_pianiprod2.Parameters.Item("data_upd").Value = DateValue(data_agg)
                qdf_upd_pianiprod2.Parameters.Item("ora_upd").Value = ora_agg
                qdf_upd_pianiprod2.Parameters.Item("anno_piano").Value = anno_piano
                qdf_upd_pianiprod2.Parameters.Item("nr_piano").Value = nr_piano
                qdf_upd_pianiprod2.Parameters.Item("nr_riga_piano").Value = nr_riga_piano
                DB_CommandExecute(qdf_upd_pianiprod2)



                'Aggiornamento delle bolle di lavorazione

                DB_CommandParametersReset(qdf_upd_bollelav)
                qdf_upd_bollelav.Parameters.Item("qta_comm").Value = qta_da_prod
                qdf_upd_bollelav.Parameters.Item("anno_comm").Value = anno_comm
                qdf_upd_bollelav.Parameters.Item("nr_comm").Value = nr_comm
                qdf_upd_bollelav.Parameters.Item("nr_riga_comm").Value = nr_riga_comm
                DB_CommandExecute(qdf_upd_bollelav)


                'Aggiornamento di commessedist in base alla quantità cambiata
                sql = ""
                sql = sql & " SELECT * " & vbCrLf
                sql = sql & " FROM commessedist " & vbCrLf
                sql = sql & "WHERE commessedist. anno_comm   = " & anno_comm & vbCrLf
                sql = sql & "  AND commessedist.nr_comm      = " & nr_comm & vbCrLf
                sql = sql & "  AND commessedist.nr_riga_comm = " & nr_riga_comm & vbCrLf

                cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(dr, cmd)

                While dr.Read

                    Delta_Qta_imp = DB_Dsv(dr("qta_componente"), 0) - DB_Dsv(dr("qta_impegnata"), 0)
                    New_Qta_Imp = (DB_Dsv(dr("coeff"), 0) * qta_da_prod) - Delta_Qta_imp

                    DB_CommandParametersReset(qdf_upd_commessedist)
                    qdf_upd_commessedist.Parameters.Item("qta_componente").Value = DB_Dsv(dr("coeff"), 0) * qta_da_prod
                    qdf_upd_commessedist.Parameters.Item("qta_impegnata").Value = New_Qta_Imp
                    qdf_upd_commessedist.Parameters.Item("anno_comm").Value = dr("anno_comm")
                    qdf_upd_commessedist.Parameters.Item("nr_comm").Value = dr("nr_comm")
                    qdf_upd_commessedist.Parameters.Item("nr_riga_comm").Value = dr("nr_riga_comm")
                    qdf_upd_commessedist.Parameters.Item("nr_riga").Value = dr("nr_riga")
                    DB_CommandExecute(qdf_upd_commessedist)


                    'Aggiornamento impegnato nella tabella giace
                    DB_DataReaderClose(dr_tabumalt)
                    DB_CommandParametersReset(qdf_tabumalt)
                    qdf_tabumalt.Parameters.Item("cod_art").Value = DB_Dsv(dr("cod_art"), "")
                    qdf_tabumalt.Parameters.Item("cod_um_alt").Value = DB_Dsv(dr("cod_um"), "")
                    qdf_tabumalt.Parameters.Item("nr_variante").Value = DB_Dsv(dr("nr_variante"), 0)
                    DB_DataReaderExecute(dr_tabumalt, qdf_tabumalt)

                    'Lettura UM alternativa
                    fatt_conv_comp = 1
                    If dr_tabumalt.Read Then
                        If CDbl(DB_Dsv(dr_tabumalt("fattore"))) <> 0 Then
                            fatt_conv_comp = DB_Dsv(dr_tabumalt("fattore"))
                        End If
                    End If
                    DB_DataReaderClose(dr_tabumalt)

                    If DB_LookUp("impegnato_prod", "giace", "cod_dep = '" & DB_Dsv(dr("cod_dep"), "") & "' AND cod_mag = '" & DB_Dsv(dr("cod_mag"), "") & "' AND cod_art = '" & DB_Dsv(dr("cod_art"), "") & "'", impegnato_prod) Then

                        Delta = qta_da_prod - qta_da_prod_old
                        New_Qta_Imp = ((Delta * DB_Dsv(dr("coeff"), 0)) / fatt_conv_comp) + impegnato_prod

                        DB_CommandParametersReset(qdf_upd_giace)
                        qdf_upd_giace.Parameters.Item("impegnato_prod").Value = New_Qta_Imp
                        qdf_upd_giace.Parameters.Item("cod_dep").Value = DB_Dsv(dr("cod_dep"), "")
                        qdf_upd_giace.Parameters.Item("cod_mag").Value = DB_Dsv(dr("cod_mag"), "")
                        qdf_upd_giace.Parameters.Item("cod_art").Value = DB_Dsv(dr("cod_art"), "")
                        DB_CommandExecute(qdf_upd_giace)

                    End If


                End While

                DB_DataReaderClose(dr, cmd)


            End If

        Catch ex As Exception

            DB_DataReaderClose(dr, cmd)

            MsgErr(ex)

            Aggiorna_Commesse = False


        Finally

            DB_DataReaderClose(dr, cmd)

            Aggiorna_Commesse = True
        End Try

    End Function

    Public Function Get_Mag_Articolo(ByVal cod_art As Object, ByRef padre_mag As String) As String

        '
        ' Sub che ritorna il magazzino dell'articolo ( attraverso la classe
        ' gestionale )
        '
        ' Modalità ricerca: Articolo - SottoFamiglia - Famiglia - Settore - Linea - Magazzino Passato
        '
        ' N.B.
        ' La funzione utilizza delle querydef globali che devono essere dichiarate nella
        ' form principale, aperte tramite la funzione OpenQuery e chiuse tramite la
        ' funzione CloseQuery
        '
        '
        Try

            '
            ' Assegno per default il magazzino passato
            '
            Get_Mag_Articolo = padre_mag

            '
            'Ricerca Magazzino articolo
            '
            If Field_Null(cod_art) Then
                Exit Function
            End If

            DB_DataReaderClose(dr_sel_mag_anaart)
            DB_CommandParametersReset(qdf_sel_mag_anaart)
            qdf_sel_mag_anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(cod_art, ""))

            DB_DataReaderExecute(dr_sel_mag_anaart, qdf_sel_mag_anaart)

            If Not dr_sel_mag_anaart.Read Then
                DB_DataReaderClose(dr_sel_mag_anaart)
                Exit Function
            End If

            If Not (Field_Null(DB_Dsv(dr_sel_mag_anaart("cod_mag"))) Or Trim(DB_Dsv(dr_sel_mag_anaart("cod_mag"), "") = "")) Then
                Get_Mag_Articolo = DB_Dsv(dr_sel_mag_anaart("cod_mag"))
                DB_DataReaderClose(dr_sel_mag_anaart)
                Exit Function
            End If

            '
            'Ricerca Magazzino SottoFamiglia
            '
            If Not (Field_Null(DB_Dsv(dr_sel_mag_anaart("cod_sott_gest"))) Or Trim(DB_Dsv(dr_sel_mag_anaart("cod_sott_gest"), "") = "")) Then

                DB_DataReaderClose(dr_sel_mag_sottofamiglia)
                DB_CommandParametersReset(qdf_sel_mag_sottofamiglia)
                qdf_sel_mag_sottofamiglia.Parameters.Item("tipo_art").Value = Trim(DB_Dsv(dr_sel_mag_anaart("tipo_art"), ""))
                qdf_sel_mag_sottofamiglia.Parameters.Item("cod_linea").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_linea_gest"), ""))
                qdf_sel_mag_sottofamiglia.Parameters.Item("cod_sett").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_sett_gest"), ""))
                qdf_sel_mag_sottofamiglia.Parameters.Item("cod_fam").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_fam_gest"), ""))
                qdf_sel_mag_sottofamiglia.Parameters.Item("cod_sott").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_sott_gest"), ""))
                DB_DataReaderExecute(dr_sel_mag_sottofamiglia, qdf_sel_mag_sottofamiglia)

                If dr_sel_mag_sottofamiglia.Read Then
                    If Not (Field_Null(DB_Dsv(dr_sel_mag_sottofamiglia("cod_mag"))) Or Trim(DB_Dsv(dr_sel_mag_sottofamiglia("cod_mag"), "") = "")) Then
                        Get_Mag_Articolo = DB_Dsv(dr_sel_mag_sottofamiglia("cod_mag"))
                        DB_DataReaderClose(dr_sel_mag_anaart)
                        DB_DataReaderClose(dr_sel_mag_sottofamiglia)
                        Exit Function
                    End If
                End If

            End If

            DB_DataReaderClose(dr_sel_mag_sottofamiglia)

            '
            'Ricerca Magazzino Famiglia
            '
            If Not (Field_Null(DB_Dsv(dr_sel_mag_anaart("cod_fam_gest"))) Or Trim(DB_Dsv(dr_sel_mag_anaart("cod_fam_gest"), "") = "")) Then

                DB_DataReaderClose(dr_sel_mag_famiglia)
                DB_CommandParametersReset(qdf_sel_mag_famiglia)
                qdf_sel_mag_famiglia.Parameters.Item("tipo_art").Value = Trim(DB_Dsv(dr_sel_mag_anaart("tipo_art"), ""))
                qdf_sel_mag_famiglia.Parameters.Item("cod_linea").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_linea_gest"), ""))
                qdf_sel_mag_famiglia.Parameters.Item("cod_sett").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_sett_gest"), ""))
                qdf_sel_mag_famiglia.Parameters.Item("cod_fam").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_fam_gest"), ""))
                DB_DataReaderExecute(dr_sel_mag_famiglia, qdf_sel_mag_famiglia)

                If dr_sel_mag_famiglia.Read Then
                    If Not (Field_Null(DB_Dsv(dr_sel_mag_famiglia("cod_mag"))) Or Trim(DB_Dsv(dr_sel_mag_famiglia("cod_mag"), "") = "")) Then
                        Get_Mag_Articolo = DB_Dsv(dr_sel_mag_famiglia("cod_mag"))
                        DB_DataReaderClose(dr_sel_mag_anaart)
                        DB_DataReaderClose(dr_sel_mag_famiglia)
                        Exit Function
                    End If
                End If

            End If

            DB_DataReaderClose(dr_sel_mag_famiglia)

            '
            'Ricerca Magazzino Settore
            '

            If Not (Field_Null(DB_Dsv(dr_sel_mag_anaart("cod_sett_gest"))) Or Trim(DB_Dsv(dr_sel_mag_anaart("cod_sett_gest"), "") = "")) Then

                DB_DataReaderClose(dr_sel_mag_settore)
                DB_CommandParametersReset(qdf_sel_mag_settore)
                qdf_sel_mag_settore.Parameters.Item("tipo_art").Value = Trim(DB_Dsv(dr_sel_mag_anaart("tipo_art"), ""))
                qdf_sel_mag_settore.Parameters.Item("cod_linea").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_linea_gest"), ""))
                qdf_sel_mag_settore.Parameters.Item("cod_sett").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_sett_gest"), ""))
                DB_DataReaderExecute(dr_sel_mag_settore, qdf_sel_mag_settore)

                If dr_sel_mag_settore.Read Then
                    If Not (Field_Null(DB_Dsv(dr_sel_mag_settore("cod_mag"))) Or Trim(DB_Dsv(dr_sel_mag_settore("cod_mag"), "") = "")) Then
                        Get_Mag_Articolo = DB_Dsv(dr_sel_mag_settore("cod_mag"))
                        DB_DataReaderClose(dr_sel_mag_anaart)
                        DB_DataReaderClose(dr_sel_mag_settore)
                        Exit Function
                    End If
                End If

            End If

            DB_DataReaderClose(dr_sel_mag_settore)

            '
            'Ricerca Magazzino Linea
            '
            If Not (Field_Null(DB_Dsv(dr_sel_mag_anaart("cod_linea_gest"))) Or Trim(DB_Dsv(dr_sel_mag_anaart("cod_linea_gest"), "") = "")) Then

                DB_DataReaderClose(dr_sel_mag_linea)
                DB_CommandParametersReset(qdf_sel_mag_settore)
                qdf_sel_mag_linea.Parameters.Item("tipo_art").Value = Trim(DB_Dsv(dr_sel_mag_anaart("tipo_art"), ""))
                qdf_sel_mag_linea.Parameters.Item("cod_linea").Value = Trim(DB_Dsv(dr_sel_mag_anaart("cod_linea_gest"), ""))
                DB_DataReaderExecute(dr_sel_mag_linea, qdf_sel_mag_linea)

                If dr_sel_mag_linea.Read Then
                    If Not (Field_Null(DB_Dsv(dr_sel_mag_linea("cod_mag"))) Or Trim(DB_Dsv(dr_sel_mag_linea("cod_mag"), "") = "")) Then
                        Get_Mag_Articolo = DB_Dsv(dr_sel_mag_linea("cod_mag"))
                        DB_DataReaderClose(dr_sel_mag_anaart)
                        DB_DataReaderClose(dr_sel_mag_settore)
                        Exit Function
                    End If
                End If

            End If

            DB_DataReaderClose(dr_sel_mag_linea)

            DB_DataReaderClose(dr_sel_mag_anaart)

        Catch ex As Exception
            MsgErr(ex)
            Get_Mag_Articolo = padre_mag

        End Try

    End Function


    'funzione ricorsiva di ricerca del padre con qta pianificata
    Public Function Ricerca_Padre(ByVal id_comp As Integer, ByVal nr_riga_comp As Integer, ByVal tabella_dist As String, ByVal dbtempname_tot As String, ByRef conn As DB2Connection) As Boolean

        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim qta_pian As Object
        Dim cod_art_padre As Object = Nothing

        Dim sQuantita As String
        Dim sQuantitaCo As String
        Dim sQuantitaCf As String
        Dim sQuantitaPe As String
        Dim sQuantitaPz As String

        Dim id_pp_pianiprod As Object
        Dim data_piano As String
        Dim nr_record As Integer

        sql = ""
        sql = sql & " SELECT DISTINCT pp_pianiprod.* " & vbCrLf
        sql = sql & "   FROM pp_pianiprodrel, pp_pianiprod " & vbCrLf
        sql = sql & "  WHERE pp_pianiprodrel.id_comp       = " & Getv(id_comp) & vbCrLf
        sql = sql & "    AND pp_pianiprodrel.nr_riga_comp  = " & Getv(nr_riga_comp) & vbCrLf
        sql = sql & "    AND pp_pianiprod.id = pp_pianiprodrel.id_padre " & vbCrLf
        sql = sql & "    AND pp_pianiprod.nr_riga = pp_pianiprodrel.nr_riga_padre " & vbCrLf
        If Getv(cod_dep) <> "" Then
            Sql = Sql & " AND pp_pianiprod.cod_dep = pp_pianiprodrel.cod_dep " & vbCrLf
            Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
        End If

        cmd = DB_CommandCreate(sql)
        DB_DataReaderExecute(dr, cmd)

        'per tutti i padri del componente corrente verifico qta_painificata
        While dr.Read

            qta_pian = DB_Dsv(dr("qta_pian"))

            'padre non ha qta pianificata
            If Field_Null(qta_pian) Then

                Ricerca_Padre(DB_Dsv(dr("id")), DB_Dsv(dr("nr_riga")), tabella_dist, dbtempname_tot, conn)

            Else

                ' esplsione distinta articolo per articolo
                cod_art_padre = DB_Dsv(dr("cod_art_pian"), "")
                sQuantita = rf(CDbl(DB_Dsv(DB_Dsv(dr("qta_pian"), 0))), "0000000.000")
                sQuantitaCo = rf(CDbl(DB_Dsv(DB_Dsv(dr("qta_pian_co"), 0))), "0000000.000")
                sQuantitaCf = rf(CDbl(DB_Dsv(DB_Dsv(dr("qta_pian_cf"), 0))), "0000000.000")
                sQuantitaPe = rf(CDbl(DB_Dsv(DB_Dsv(dr("qta_pian_pe"), 0))), "0000000.000")
                sQuantitaPz = rf(CDbl(DB_Dsv(DB_Dsv(dr("qta_pian_pz"), 0))), "0000000.000")

                id_pp_pianiprod = CLng(DB_Dsv(DB_Dsv(dr("id"), 0)))
                data_piano = DB_Dsv(DB_Dsv(dr("data_piano"), "01/01/1900"))


                'Controllo se nella tabella temporanea con tutte le esplosioni distinte, l'articolo che si intende esplodere esiste già. Se esiste già, non occorre riesploderlo
                DB_LookUp("count(*)", dbtempname_tot, "key_cod_art = '" & cod_art_padre & "' AND key_data_prod = '" & data_piano & "'", nr_record)

                If nr_record = 0 Then


                    If Not DB_LookUp("id_pp_pianiprod", tabella_dist, "id_pp_pianiprod = " & Getv(id_pp_pianiprod) & " AND nr_riga_pp_pianiprod = 0", xx1) Then

                        sql = ""
                        sql = sql & " INSERT INTO " & tabella_dist & vbCrLf
                        sql = sql & " ( cod_art         , "
                        sql = sql & "   tipo_variante   , "
                        sql = sql & "   nr_variante     , "
                        sql = sql & "   qta             , "
                        sql = sql & "   qta_co          , " & vbCrLf
                        sql = sql & "   qta_cf          , " & vbCrLf
                        sql = sql & "   qta_pe          , " & vbCrLf
                        sql = sql & "   qta_pz          , " & vbCrLf
                        sql = sql & "   id_pp_pianiprod , "
                        sql = sql & "   nr_riga_pp_pianiprod , "
                        sql = sql & "   data_prod       ) " & vbCrLf
                        sql = sql & " VALUES ( "
                        sql = sql & " '" & cod_art_padre & "'   , "
                        sql = sql & " 'D'                       , "
                        sql = sql & " 0                         , "

                        sql = sql & " " & Replace(sQuantita, ",", ".") & "   , "
                        sql = sql & " " & Replace(sQuantitaCo, ",", ".") & " , "
                        sql = sql & " " & Replace(sQuantitaCf, ",", ".") & " , "
                        sql = sql & " " & Replace(sQuantitaPe, ",", ".") & " , "
                        sql = sql & " " & Replace(sQuantitaPz, ",", ".") & " , "

                        sql = sql & " " & id_pp_pianiprod & "       , "
                        sql = sql & " " & 0 & "  , "

                        sql = sql & " '" & data_piano & "'"
                        sql = sql & " ) " & vbCrLf

                        DB_SqlExecute(sql, conn)

                    End If

                End If

            End If


        End While

        DB_DataReaderClose(dr, cmd)

    End Function

    'funzione ricorsiva di ricerca del figlio con qta pianificata
    Public Function Ricerca_Figlio(ByVal id_padre As Integer, ByVal nr_riga_padre As Integer) As Boolean
        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim qta_pian As Object

        Try

            Sql = ""
            Sql = Sql & " SELECT DISTINCT pp_pianiprod.* " & vbCrLf
            Sql = Sql & "   FROM pp_pianiprodrel, pp_pianiprod " & vbCrLf
            Sql = Sql & "  WHERE pp_pianiprodrel.id_padre       = " & Getv(id_padre) & vbCrLf
            Sql = Sql & "    AND pp_pianiprodrel.nr_riga_padre  = " & Getv(nr_riga_padre) & vbCrLf
            Sql = Sql & "    AND pp_pianiprod.id = pp_pianiprodrel.id_comp " & vbCrLf
            Sql = Sql & "    AND pp_pianiprod.nr_riga = pp_pianiprodrel.nr_riga_comp " & vbCrLf
            If Getv(cod_dep) <> "" Then
                Sql = Sql & " AND pp_pianiprod.cod_dep = pp_pianiprodrel.cod_dep " & vbCrLf
                Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            DB_DataReaderClose(dr, cmd)
            cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(dr, cmd)

            'per tutti i figli del componente corrente verifico qta_pianificata
            While dr.Read

                qta_pian = DB_Dsv(dr("qta_pian"))

                Sql = ""
                Sql = Sql & " UPDATE pp_pianiprod SET qta_impr = NULL, qta_impr_co = NULL, qta_impr_cf = NULL, qta_impr_pz = NULL, qta_impr_pe = NULL " & vbCrLf
                Sql = Sql & "  WHERE      id = " & DB_Dsv(dr("id")) & vbCrLf
                Sql = Sql & "    AND nr_riga = " & DB_Dsv(dr("nr_riga")) & vbCrLf

                DB_SqlExecute(Sql)

                'se figlio non ha qta pianificata azzero impegnati dei figli del figlio
                If Field_Null(qta_pian) AndAlso (id_padre <> DB_Dsv(dr("id")) OrElse (id_padre = DB_Dsv(dr("id")) AndAlso nr_riga_padre <> DB_Dsv(dr("nr_riga")))) Then

                    Ricerca_Figlio(DB_Dsv(dr("id")), DB_Dsv(dr("nr_riga")))

                End If

            End While

            DB_DataReaderClose(dr, cmd)

        Catch ex As Exception

            MsgErr(ex)

        Finally

            DB_DataReaderClose(dr, cmd)

        End Try
       

    End Function

    'funzione ricorsiva di cancellazione del figlio dalla tabella pp_pianiprodreldet
    Private Sub Elimina_Figlio_RelDet(ByVal key_cod_art As String, ByVal key_data_prod As String, ByVal art_padre As String, ByVal id_padre As Integer)
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing

        Try

            Sql = ""
            Sql = Sql & " SELECT * " & vbCrLf
            Sql = Sql & "   FROM pp_pianiprodreldet " & vbCrLf
            Sql = Sql & "  WHERE key_cod_art = '" & key_cod_art & "'" & vbCrLf
            Sql = Sql & "    AND key_data_prod ='" & key_data_prod & "'" & vbCrLf
            Sql = Sql & "    AND art_padre = '" & art_padre & "'" & vbCrLf
            Sql = Sql & "    AND id_padre = " & id_padre & vbCrLf
            If Getv(cod_dep) <> "" Then
                Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            Do While Dr.Read

                Elimina_Figlio_RelDet(key_cod_art, key_data_prod, Dr("art_comp"), Dr("id_comp"))

                Sql = ""
                Sql = Sql & " DELETE FROM pp_pianiprodreldet " & vbCrLf
                Sql = Sql & "       WHERE id_chiavedet = " & Dr("id_chiavedet") & vbCrLf
                DB_SqlExecute(Sql)

            Loop

            DB_DataReaderClose(Dr, Cmd)

        Catch ex As Exception

            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try
       
    End Sub


    Function Aggiorna_Tabtempdist_Tot(dbtempname_tot, dis_id_pp_pianiprod, dis_nr_riga_pp_pianiprod, dis_cod_art, cod_art, data_prod, giorni_da_sottrarre, cod_art_padre) As Boolean
        Dim sql As String
        Dim cmd_com As DB2Command = Nothing
        Dim dr_com As DB2DataReader = Nothing
        Dim cod_art_cerca As String
        Dim cod_art_padre_cerca As String
        Dim data_prod_cerca As String


        Aggiorna_Tabtempdist_Tot = False

        ' aggiornamento della riga del componente con data_prod - i giorni da sottrarre

        sql = "       UPDATE " & dbtempname_tot & " SET data_prod = data_prod - " & giorni_da_sottrarre
        sql = sql & " WHERE 1 = 1 "
        sql = sql & " AND dis_cod_art               = '" & dis_cod_art & "'   " & vbCrLf
        sql = sql & " AND cod_art_padre             = '" & cod_art_padre & "'   " & vbCrLf
        sql = sql & " AND cod_art                   = '" & cod_art & "' " & vbCrLf
        sql = sql & " AND data_prod                 = '" & data_prod & "' " & vbCrLf

        DB_SqlExecute(sql)

        ' ricerca se l'articolo componente è padre di altri articoli, quindi viene richiamata la funzione per i sui componenti

        sql = "       SELECT t.* "
        sql = sql & " FROM " & dbtempname_tot & " AS t "
        sql = sql & " WHERE 1 = 1 "
        sql = sql & " AND dis_cod_art               = '" & dis_cod_art & "'   " & vbCrLf
        sql = sql & " AND cod_art_padre             = '" & cod_art & "' " & vbCrLf
        sql = sql & " AND data_prod_padre           = '" & data_prod & "' " & vbCrLf

        cmd_com = New DB2Command(sql, DB_Conn, DB_Transaction)
        cmd_com.CommandTimeout = 0
        dr_com = cmd_com.ExecuteReader

        While dr_com.Read

            cod_art_cerca = DB_Dsv(dr_com("cod_art"))
            cod_art_padre_cerca = DB_Dsv(dr_com("cod_art_padre"))
            data_prod_cerca = DB_Dsv(dr_com("data_prod"))

            Aggiorna_Tabtempdist_Tot(dbtempname_tot, dis_id_pp_pianiprod, dis_nr_riga_pp_pianiprod, dis_cod_art, cod_art_cerca, data_prod_cerca, giorni_da_sottrarre, cod_art_padre_cerca)

        End While

        DB_DataReaderClose(dr_com, cmd_com)


        ' aggiornamento delle righe con padre = componente con data_prod_padre - i giorni da sottrarre

        sql = "       UPDATE " & dbtempname_tot & " SET data_prod_padre = data_prod_padre - " & giorni_da_sottrarre
        sql = sql & " WHERE 1 = 1 "
        sql = sql & " AND dis_cod_art               = '" & dis_cod_art & "'   " & vbCrLf
        sql = sql & " AND cod_art_padre             = '" & cod_art & "' " & vbCrLf
        sql = sql & " AND data_prod_padre           = '" & data_prod & "' " & vbCrLf

        DB_SqlExecute(sql)

        Aggiorna_Tabtempdist_Tot = True

    End Function

    Function Crea_DataTablePiano(ByRef dt As DataTable, ByVal tipo_art_prod As String, ByVal ragg_prod As String, ByVal da_data As Object, ByVal a_data As Object) As Boolean
        Dim Lista_Campi As String = ""
        Dim giorni_diff As Long
        Dim des_i_g As String = ""

        Lista_Campi = "" &
                    " tipo_art_prod         , char      ; " &
                    " des_tipo_art_prod     , char      ; " &
                    " ragg_prod             , char      ; " &
                    " des_ragg_prod         , char      ; " &
                    " cod_dep_linea         , char      ; " &
                    " des_dep_linea         , char      ; " &
                    " cod_art               , char      ; " &
                    " des_art               , char      ; " &
                    " cod_um                , char      ; " &
                    " tipo_um               , char      ; " &
                    " cod_linea_prod_pre    , string    ; " &
                    " des_linea_prod_pre    , string    ; " &
                    " cod_ass_prod_pre      , string    ; " &
                    " des_ass_prod_pre      , string    ; " &
                    " prod_pz_ora_pref      , float     ; " &
                    " conf_collo            , float     ; " &
                    " pezzi_conf            , float     ; " &
                    " peso_netto_conf       , float     ; " &
                    " gia_att               , float     ; " &
                    " gia_ini               , float     ; " &
                    " gia_ini_co            , float     ; " &
                    " gia_ini_cf            , float     ; " &
                    " gia_ini_pe            , float     ; " &
                    " gia_ini_pz            , float     ; " &
                    " ordforn_ini           , float     ; " &
                    " ordforn_ini_co        , float     ; " &
                    " ordforn_ini_cf        , float     ; " &
                    " ordforn_ini_pe        , float     ; " &
                    " ordforn_ini_pz        , float     ; " &
                    " qta_pian_ini          , float     ; " &
                    " qta_pian_ini_co       , float     ; " &
                    " qta_pian_ini_cf       , float     ; " &
                    " qta_pian_ini_pe       , float     ; " &
                    " qta_pian_ini_pz       , float     ; " &
                    " qta_impr_ini          , float     ; " &
                    " qta_impr_ini_co       , float     ; " &
                    " qta_impr_ini_cf       , float     ; " &
                    " qta_impr_ini_pe       , float     ; " &
                    " qta_impr_ini_pz       , float     ; " &
                    " qta_ordc_ini          , float     ; " &
                    " qta_ordc_ini_co       , float     ; " &
                    " qta_ordc_ini_cf       , float     ; " &
                    " qta_ordc_ini_pe       , float     ; " &
                    " qta_ordc_ini_pz       , float     ; " &
                    " qta_prel_ini          , float     ; " &
                    " qta_prel_ini_co       , float     ; " &
                    " qta_prel_ini_cf       , float     ; " &
                    " qta_prel_ini_pe       , float     ; " &
                    " qta_prel_ini_pz       , float     ; "

        giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data)), DateValue(Getv(a_data)))
        If giorni_diff < 0 Then giorni_diff = 0

        For i_g = 0 To giorni_diff

            des_i_g = Format(i_g, "0000") & "_"

            'DAVIDE: qta_pian_ord_data: quantità pianificata daò trascinamento dell'ordine
            'DAVIDE: qta_pian_ora_data: quantità già pianificata nella visualizzazione giornaliera

            Lista_Campi = Lista_Campi & _
                        des_i_g & "gia_data             , float     ; " & _
                        des_i_g & "ordforn_data         , float     ; " & _
                        des_i_g & "ordforn_data_co      , float     ; " & _
                        des_i_g & "ordforn_data_cf      , float     ; " & _
                        des_i_g & "ordforn_data_pe      , float     ; " & _
                        des_i_g & "ordforn_data_pz      , float     ; " & _
                        des_i_g & "qta_pian_data        , float     ; " & _
                        des_i_g & "qta_pian_data_old    , float     ; " & _
                        des_i_g & "qta_pian_data_co     , float     ; " & _
                        des_i_g & "qta_pian_data_cf     , float     ; " & _
                        des_i_g & "qta_pian_data_pe     , float     ; " & _
                        des_i_g & "qta_pian_data_pz     , float     ; " & _
                        des_i_g & "qta_prod_data        , float     ; " & _
                        des_i_g & "qta_pian_ord_data    , float     ; " & _
                        des_i_g & "qta_pian_ora_data    , float     ; " & _
                        des_i_g & "qta_disp_data        , float     ; " & _
                        des_i_g & "qta_impr_data        , float     ; " & _
                        des_i_g & "qta_impr_data_co     , float     ; " & _
                        des_i_g & "qta_impr_data_cf     , float     ; " & _
                        des_i_g & "qta_impr_data_pe     , float     ; " & _
                        des_i_g & "qta_impr_data_pz     , float     ; " & _
                        des_i_g & "qta_ordc_data        , float     ; " & _
                        des_i_g & "qta_ordc_data_co     , float     ; " & _
                        des_i_g & "qta_ordc_data_cf     , float     ; " & _
                        des_i_g & "qta_ordc_data_pe     , float     ; " & _
                        des_i_g & "qta_ordc_data_pz     , float     ; " & _
                        des_i_g & "qta_prel_data        , float     ; " & _
                        des_i_g & "qta_prel_data_co     , float     ; " & _
                        des_i_g & "qta_prel_data_cf     , float     ; " & _
                        des_i_g & "qta_prel_data_pe     , float     ; " & _
                        des_i_g & "qta_prel_data_pz     , float     ; " & _
                        des_i_g & "dur_prod_data        , timespan  ; " & _
                        des_i_g & "cod_linea_prod       , string  ; " & _
                        des_i_g & "des_linea_prod       , string  ; "

            Lista_Campi = Lista_Campi & _
                        des_i_g & "flag_festivo         , char      ; "

            Lista_Campi = Lista_Campi & _
                        des_i_g & "id                   , integer   ; "

            Lista_Campi = Lista_Campi & _
                        des_i_g & "lista_righe_pian     , char      ; " & _
                        des_i_g & "lista_righe_impr     , char      ; "

        Next i_g

        Lista_Campi = Lista_Campi & _
                    " gia_fin               , float     ; " & _
                    " gia_fin_co            , float     ; " & _
                    " gia_fin_cf            , float     ; " & _
                    " gia_fin_pe            , float     ; " & _
                    " gia_fin_pz            , float     ; " & _
                    " ordforn_fin           , float     ; " & _
                    " ordforn_fin_co        , float     ; " & _
                    " ordforn_fin_cf        , float     ; " & _
                    " ordforn_fin_pe        , float     ; " & _
                    " ordforn_fin_pz        , float     ; " & _
                    " qta_pian_fin          , float     ; " & _
                    " qta_pian_fin_co       , float     ; " & _
                    " qta_pian_fin_cf       , float     ; " & _
                    " qta_pian_fin_pe       , float     ; " & _
                    " qta_pian_fin_pz       , float     ; " & _
                    " qta_impr_fin          , float     ; " & _
                    " qta_impr_fin_co       , float     ; " & _
                    " qta_impr_fin_cf       , float     ; " & _
                    " qta_impr_fin_pe       , float     ; " & _
                    " qta_impr_fin_pz       , float     ; " & _
                    " qta_ordc_fin          , float     ; " & _
                    " qta_ordc_fin_co       , float     ; " & _
                    " qta_ordc_fin_cf       , float     ; " & _
                    " qta_ordc_fin_pe       , float     ; " & _
                    " qta_ordc_fin_pz       , float     ; " & _
                    " qta_prel_fin          , float     ; " & _
                    " qta_prel_fin_co       , float     ; " & _
                    " qta_prel_fin_cf       , float     ; " & _
                    " qta_prel_fin_pe       , float     ; " & _
                    " qta_prel_fin_pz       , float     ; "


        If DT_Create_Temp_DataTable(dt, _
                                    Lista_Campi, _
                                     ";", ",") = False Then

            Crea_DataTablePiano = False
            Exit Function

        End If

    End Function


    Private Sub Imposta_Grid_Piano(ByVal Da_Leggi As Boolean, ByVal tipo_art_prod As String, ByVal ragg_prod As String, dt_piano As DataTable, ByVal da_data As Object, ByVal a_data As Object)
        Dim i_vis As Integer
        Dim col As DevExpress.XtraGrid.Columns.GridColumn = Nothing
        Dim GridView_Locale As DevExpress.XtraGrid.Views.Grid.GridView
        Dim giorni_diff As Long
        Dim des_i_g As String = ""
        Dim data_piano As String = ""
        Dim flag_festivo As Long
        Dim l_col As Boolean
        Dim index_color As Long
        Dim max_data_calc As String = ""
        Dim max_ora_calc As String = ""
        Dim Indice_Cmd_Qta_Pian As Integer
        Dim mostra_dati_precedenti As Boolean = False
        Dim primo As Boolean = False

        vet_colonne_valide.Clear()

        If Da_Leggi = True Then

            grid_piano.DataSource = Nothing

            grid_piano_view.Columns.Clear()

            grid_piano.DataSource = dt_piano

        End If

        With grid_piano_view

            .BestFitColumns()
            .OptionsBehavior.Editable = True
            ' \\\\ opzioni per copia
            .OptionsBehavior.CopyToClipboardWithColumnHeaders = False
            .OptionsSelection.MultiSelect = True
            ' ////
            .OptionsCustomization.AllowFilter = False
            .OptionsCustomization.AllowSort = False
            .OptionsCustomization.AllowGroup = True
            .OptionsCustomization.AllowColumnMoving = False
            .OptionsView.ColumnAutoWidth = False
            .OptionsView.ShowGroupPanel = False
            .OptionsSelection.EnableAppearanceFocusedCell = False
            .OptionsSelection.EnableAppearanceFocusedRow = False
            .OptionsNavigation.AutoMoveRowFocus = False
            .OptionsView.ShowAutoFilterRow = False  ' Gianluca: per impostare a true questa proprietà per questa gridview è necessario gestire gli eventi per il RowHandle
        End With

        ' campi double con pulsante

        gridview_piano_gia_att = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
        gridview_piano_gia_att.Mask.UseMaskAsDisplayFormat = True
        gridview_piano_gia_att.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
        gridview_piano_gia_att.Buttons(0).IsLeft = True
        gridview_piano_gia_att.Buttons(0).Tag = "vis_lot"
        gridview_piano_gia_att.Buttons(0).ToolTip = "dettaglio lotti/scadenze"
        gridview_piano_gia_att.Buttons(0).Image = img_small.Images(1)
        gridview_piano_gia_att.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
        gridview_piano_gia_att.EditFormat.FormatString = EditMask
        gridview_piano_gia_att.AllowMouseWheel = False
        gridview_piano_gia_att.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

        AddHandler gridview_piano_gia_att.ButtonClick, AddressOf gridview_piano_gia_att_ButtonClick

        ' impostazione datasource per grid lavorazioni da assegnare ed assegnate e impostazione di tutte le colonne

        GridView_Locale = grid_piano_view

        For i = 0 To GridView_Locale.Columns.Count - 1
            GridView_Locale.Columns(i).OptionsColumn.AllowEdit = False
        Next i

        For i = 0 To GridView_Locale.Columns.Count - 1
            GridView_Locale.Columns(i).Visible = False
        Next i

        ' impostazione delle "caption" uguale al nome della colonna, poi per quelle visibili sarà impostato un nome "Leggibile"
        For i = 0 To GridView_Locale.Columns.Count - 1
            GridView_Locale.Columns(i).Caption = GridView_Locale.Columns(i).Name.ToString
        Next i

        ' lettura delle colonne da visualizzare
        l_col = False
        If leggi_pp_modelli_col(COD_MOD_PIANMRP, tipo_art_prod, ragg_prod) Then
            l_col = True
        End If

        '
        'DATI ARTICOLO
        '
        i_vis = 1
        col = GridView_Locale.Columns("cod_art")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Codice" & vbCrLf & "Articolo"
        col.Fixed = DevExpress.XtraGrid.Columns.FixedStyle.Left
        col = GridView_Locale.Columns("des_art")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Descrizione Articolo"
        col.Fixed = DevExpress.XtraGrid.Columns.FixedStyle.Left
        col = GridView_Locale.Columns("cod_um")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "UM"
        col.Fixed = DevExpress.XtraGrid.Columns.FixedStyle.Left


        '
        'DATI LINEA PRODUZIONE
        '
        col = GridView_Locale.Columns("cod_linea_prod_pre")
        col.VisibleIndex = IIf(Tipo_Art_Prod_Testata = "MP", -1, i_vis) : i_vis += 1 : col.Caption = "Linea" & vbCrLf & "Preferenziale"
        col = GridView_Locale.Columns("des_linea_prod_pre")
        col.VisibleIndex = IIf(Tipo_Art_Prod_Testata = "MP", -1, i_vis) : i_vis += 1 : col.Caption = "Descrizione Linea Pref."
        col = GridView_Locale.Columns("cod_ass_prod_pre")
        col.VisibleIndex = IIf(Tipo_Art_Prod_Testata = "MP", -1, i_vis) : i_vis += 1 : col.Caption = "Assetto" & vbCrLf & "Preferenziale"
        col = GridView_Locale.Columns("des_ass_prod_pre")
        col.VisibleIndex = IIf(Tipo_Art_Prod_Testata = "MP", -1, i_vis) : i_vis += 1 : col.Caption = "Descrizione Assetto Pref."
        col = GridView_Locale.Columns("prod_pz_ora_pref")
        col.VisibleIndex = IIf(Tipo_Art_Prod_Testata = "MP", -1, i_vis) : i_vis += 1 : col.Caption = "Produz." & vbCrLf & "PZ/ORA Pref."

        '
        'DATI INIZIALI
        '

        If CDate(Getv(da_data)) <= Now.Date Then
            mostra_dati_precedenti = False
        Else
            mostra_dati_precedenti = True
        End If

        ' giacenza attuale (viene mostrata prima dei "precedenti" nel caso questi siano visibili, altrimenti viene mostrata prima dei vari giorni)

        If mostra_dati_precedenti = True Then
            If l_col = False Or pp_modelli_col.flag_gia_att = "S" Then
                col = GridView_Locale.Columns("gia_att")
                col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Giacenza" & vbCrLf & "al " & Now.AddDays(-1).ToShortDateString
                If azienda_agg.flag_pp_giacepar = "S" Then
                    DB_LookUp("MAX(data_calc), MAX(ora_calc)", "pp_giacepar", , max_data_calc, max_ora_calc)
                    If Trim(max_data_calc) <> "" Then
                        col.Caption = "Giacenza al" & vbCrLf & max_data_calc & " " & Mid(max_ora_calc, 1, 5)
                    Else
                        col.Caption = "Giacenza al" & vbCrLf & "(nessuno)"
                    End If
                End If
                col.OptionsColumn.AllowEdit = True
                col.ColumnEdit = gridview_piano_gia_att
                col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            End If
        End If

        If l_col = False Or pp_modelli_col.flag_gia_ini = "S" Then
            col = GridView_Locale.Columns("gia_ini")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Giacenza" & vbCrLf & "Precedente"
            If azienda_agg.flag_pp_giacepar = "S" Then
                data_piano = Getv(da_data)
                data_piano = DateAdd(DateInterval.Day, -1, DateValue(data_piano))
                col.Caption = "Giacenza al" & vbCrLf & data_piano
            End If
            col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            If mostra_dati_precedenti = False Then
                col.VisibleIndex = -1
            End If
        End If

        If l_col = False Or pp_modelli_col.flag_ordforn_ini = "S" Then
            col = GridView_Locale.Columns("ordforn_ini")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità in Ordini" & vbCrLf & "Fornitori Precedente"
            col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            If mostra_dati_precedenti = False Then
                col.VisibleIndex = -1
            End If
        End If
        If l_col = False Or pp_modelli_col.flag_qta_pian_ini = "S" Then
            col = GridView_Locale.Columns("qta_pian_ini")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità Pianificata" & vbCrLf & "Precedente"
            col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            If mostra_dati_precedenti = False Then
                col.VisibleIndex = -1
            End If
        End If
        If l_col = False Or pp_modelli_col.flag_qta_impr_ini = "S" Then
            col = GridView_Locale.Columns("qta_impr_ini")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità Impegnata per" & vbCrLf & "Produzione Precedente"
            col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            If mostra_dati_precedenti = False Then
                col.VisibleIndex = -1
            End If
        End If
        If l_col = False Or pp_modelli_col.flag_qta_ordc_ini = "S" Then
            col = GridView_Locale.Columns("qta_ordc_ini")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità Ordini " & vbCrLf & "Clienti Precedente"
            col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            If mostra_dati_precedenti = False Then
                col.VisibleIndex = -1
            End If
        End If
        If l_col = False Or pp_modelli_col.flag_qta_prel_ini = "S" Then
            col = GridView_Locale.Columns("qta_prel_ini")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità già " & vbCrLf & "Prelevata Precedente"
            col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
            If mostra_dati_precedenti = False Then
                col.VisibleIndex = -1
            End If
        End If

        '
        'DATI GIORNALIERI
        '
        giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data)), DateValue(Getv(a_data)))
        If giorni_diff < 0 Then giorni_diff = 0

        ReDim Lista_Date(2, giorni_diff + 1)

        data_piano = Getv(da_data)

        ReDim Lista_Colori_Col(4)

        Lista_Colori_Col(0) = col_data11
        Lista_Colori_Col(1) = col_data21
        Lista_Colori_Col(2) = col_data12
        Lista_Colori_Col(3) = col_data22

        'Lista_Colori_Col(2) = Color.FromArgb(RGB(166, 253, 251))
        'Lista_Colori_Col(3) = Color.FromArgb(RGB(240, 253, 146))

        index_color = 1
        primo = True

        For i_g = 0 To giorni_diff

            flag_festivo = 0
            If Cerca_Data_Festivo_Piano(ragg_prod, data_piano) Then
                flag_festivo = 1
            End If

            Lista_Date(0, i_g) = data_piano
            Lista_Date(1, i_g) = ""     ' per il colore della colonna

            If flag_festivo = 0 Then
                index_color = index_color + 1 : If index_color > 1 Then index_color = 0
                Lista_Date(1, i_g) = Lista_Colori_Col(index_color)
            End If

            If mostra_dati_precedenti = False And CDate(Getv(data_piano)) >= Now.Date And primo = True Then

                primo = False

                If l_col = False Or pp_modelli_col.flag_gia_att = "S" Then
                    col = GridView_Locale.Columns("gia_att")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Giacenza" & vbCrLf & "al " & Now.AddDays(-1).ToShortDateString
                    If azienda_agg.flag_pp_giacepar = "S" Then
                        DB_LookUp("MAX(data_calc), MAX(ora_calc)", "pp_giacepar", , max_data_calc, max_ora_calc)
                        If Trim(max_data_calc) <> "" Then
                            col.Caption = "Giacenza al" & vbCrLf & max_data_calc & " " & Mid(max_ora_calc, 1, 5)
                        Else
                            col.Caption = "Giacenza al" & vbCrLf & "(nessuno)"
                        End If
                    End If
                    col.OptionsColumn.AllowEdit = True
                    col.ColumnEdit = gridview_piano_gia_att
                    col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
                End If

            End If


            des_i_g = Format(i_g, "0000") & "_"

            If flag_festivo = 1 Then
                col = GridView_Locale.Columns(des_i_g & "flag_festivo")
                col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & " "
                col.Tag = data_piano
            Else

                If l_col = False Or pp_modelli_col.flag_linea_prod = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "cod_linea_prod")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Cod. Linea Prod."
                    col.Tag = data_piano
                    vet_colonne_valide.Add(des_i_g & "cod_linea_prod")

                    col.OptionsColumn.AllowEdit = True
                    col.Visible = True

                    'repository
                    grid_piano_view_cod_linea_prod = Grid_Get_RepositoryItemButtonEdit(3)
                    grid_piano_view_cod_linea_prod.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.SpinDown
                    grid_piano_view_cod_linea_prod.Buttons(0).ToolTip = "seleziona linea"

                    grid_piano_view_cod_linea_prod.AllowMouseWheel = False

                    AddHandler grid_piano_view_cod_linea_prod.ButtonClick, AddressOf grid_piano_view_cod_linea_prod_ButtonClick
                    AddHandler grid_piano_view_cod_linea_prod.KeyDown, AddressOf grid_piano_view_cod_linea_prod_KeyDown
                    AddHandler grid_piano_view_cod_linea_prod.Leave, AddressOf grid_piano_view_cod_linea_prod_Leave
                    AddHandler grid_piano_view_cod_linea_prod.Enter, AddressOf grid_piano_view_cod_linea_prod_Enter

                    col.ColumnEdit = grid_piano_view_cod_linea_prod
                    col.OptionsColumn.AllowEdit = True

                    ' des linea produzione
                    col = GridView_Locale.Columns(des_i_g & "des_linea_prod")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Linea Produzione "
                    col.Tag = data_piano
                    col.OptionsColumn.AllowEdit = False
                    col.Visible = True

                End If
                If l_col = False Or pp_modelli_col.flag_ordforn_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "ordforn_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Ordini Fornitori "
                    col.Tag = data_piano
                    vet_colonne_valide.Add(des_i_g & "ordforn_data")

                    'repository
                    grid_piano_view_qta_ordforn = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
                    grid_piano_view_qta_ordforn.Mask.UseMaskAsDisplayFormat = True

                    grid_piano_view_qta_ordforn.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                    grid_piano_view_qta_ordforn.Buttons(0).IsLeft = True
                    grid_piano_view_qta_ordforn.Buttons(0).Tag = "vis_ord"
                    grid_piano_view_qta_ordforn.Buttons(0).ToolTip = "dettaglio ordini"
                    grid_piano_view_qta_ordforn.Buttons(0).Image = img_small.Images(1)

                    grid_piano_view_qta_ordforn.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
                    'grid_piano_view_qta_ordforn.EditFormat.FormatString = "d3"
                    grid_piano_view_qta_ordforn.EditFormat.FormatString = EditMask

                    grid_piano_view_qta_ordforn.AllowMouseWheel = False
                    grid_piano_view_qta_ordforn.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

                    AddHandler grid_piano_view_qta_ordforn.ButtonClick, AddressOf grid_piano_view_qta_ordforn_ButtonClick

                    col.ColumnEdit = grid_piano_view_qta_ordforn
                    col.OptionsColumn.AllowEdit = True

                    col.ImageIndex = 3

                End If
                If l_col = False Or pp_modelli_col.flag_qta_disp_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_disp_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Disponibile "
                    col.Tag = data_piano
                    col.ImageIndex = 7
                    vet_colonne_valide.Add(des_i_g & "qta_disp_data")
                End If

                If l_col = False Or pp_modelli_col.flag_qta_pian_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_pian_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Pianificata "
                    col.Tag = data_piano
                    vet_colonne_valide.Add(des_i_g & "qta_pian_data")

                    'repository
                    grid_piano_view_qta_pian = Grid_Get_RepositoryItemButtonEdit(30, Mask.MaskType.Numeric, EditMask)
                    grid_piano_view_qta_pian.AllowMouseWheel = False
                    grid_piano_view_qta_pian.AllowNullInput = True

                    Indice_Cmd_Qta_Pian = 0

                    If azienda_agg.f_salva_pian_prod = "S" Then
                        grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                        grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).Tag = "sposta_qta"
                        grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).ToolTip = "sposta quantità pianificata"
                        grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).IsLeft = True
                        grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).Image = img_small.Images(8)
                        grid_piano_view_qta_pian.Buttons.Add(New DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph))
                        Indice_Cmd_Qta_Pian = Indice_Cmd_Qta_Pian + 1
                    End If

                    grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                    grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).Tag = "relazioni"
                    grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).ToolTip = "mostra relazioni padri-figli"
                    grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).IsLeft = True
                    grid_piano_view_qta_pian.Buttons(Indice_Cmd_Qta_Pian).Image = img_small.Images(4)

                    AddHandler grid_piano_view_qta_pian.Enter, AddressOf grid_piano_view_qta_pian_Enter
                    AddHandler grid_piano_view_qta_pian.Validating, AddressOf grid_piano_view_qta_pian_Validating
                    AddHandler grid_piano_view_qta_pian.ButtonClick, AddressOf grid_piano_view_qta_pian_ButtonClick

                    col.ColumnEdit = grid_piano_view_qta_pian

                    col.OptionsColumn.AllowEdit = True
                    col.ImageIndex = 4

                    col = GridView_Locale.Columns(des_i_g & "qta_pian_data_old")
                    col.VisibleIndex = -1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Pianificata da Ordine OLD "
                    col.Tag = data_piano

                End If
                If l_col = False Or pp_modelli_col.flag_qta_prod_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_prod_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Prodotta "
                    col.Tag = data_piano
                    col.ImageIndex = 5 ' h
                    vet_colonne_valide.Add(des_i_g & "qta_prod_data")
                End If
                If l_col = False Or pp_modelli_col.flag_qta_pord_data = "S" Then

                    col = GridView_Locale.Columns(des_i_g & "qta_pian_ord_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Pianificata da Ordine "
                    col.Tag = data_piano
                    vet_colonne_valide.Add(des_i_g & "qta_pian_ord_data")
                    grid_piano_view.OptionsBehavior.Editable = True
                    col.OptionsColumn.AllowEdit = True

                    'repository
                    'grid_piano_view_ord = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, "######0")
                    grid_piano_view_ord = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
                    grid_piano_view_ord.Mask.UseMaskAsDisplayFormat = True

                    grid_piano_view_ord.Buttons.Add(New DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph))
                    grid_piano_view_ord.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                    grid_piano_view_ord.Buttons(1).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                    grid_piano_view_ord.Buttons(1).Tag = "conf_qta"

                    grid_piano_view_ord.Buttons(1).IsLeft = True
                    grid_piano_view_ord.Buttons(0).IsLeft = True
                    grid_piano_view_ord.Buttons(0).Tag = "vis_ord"
                    grid_piano_view_ord.Buttons(0).ToolTip = "dettaglio ordini"
                    grid_piano_view_ord.Buttons(1).Image = img_small.Images(0)
                    grid_piano_view_ord.Buttons(0).Image = img_small.Images(1)

                    ' grid_piano_view_ord.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
                    'grid_piano_view_ord.EditFormat.FormatString = "d3"
                    'grid_piano_view_ord.EditFormat.FormatString = "n3"

                    grid_piano_view_ord.AllowMouseWheel = False
                    grid_piano_view_ord.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

                    AddHandler grid_piano_view_ord.ButtonClick, AddressOf grid_piano_view_ord_ButtonClick

                    col.ColumnEdit = grid_piano_view_ord
                    'grid_piano_view_ord.Buttons.Add(New DevExpress.XtraEditors.Controls.EditorButton( DevExpress.XtraEditors.Controls.ButtonPredefines.DropDown,"Visualizza Ordini",,True,True,False,DevExpress.Utils.HorzAlignment.Center,img_small.Images(0),,,,,,False)

                End If
                If l_col = False Or pp_modelli_col.flag_qta_pora_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_pian_ora_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Su Pianif. Oraria"
                    col.Tag = data_piano
                    col.ImageIndex = 2
                    vet_colonne_valide.Add(des_i_g & "qta_pian_ora_data")

                    'repository
                    grid_piano_view_ora = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
                    grid_piano_view_ora.Mask.UseMaskAsDisplayFormat = True

                    grid_piano_view_ora.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                    grid_piano_view_ora.Buttons(0).IsLeft = True
                    grid_piano_view_ora.Buttons(0).Tag = "vis_pian"
                    grid_piano_view_ora.Buttons(0).ToolTip = "dettaglio pianificazioni"
                    grid_piano_view_ora.Buttons(0).Image = img_small.Images(1)

                    grid_piano_view_ora.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
                    'grid_piano_view_ora.EditFormat.FormatString = "d3"
                    grid_piano_view_ora.EditFormat.FormatString = EditMask

                    grid_piano_view_ora.AllowMouseWheel = False
                    grid_piano_view_ora.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

                    AddHandler grid_piano_view_ora.ButtonClick, AddressOf grid_piano_view_ora_ButtonClick

                    col.ColumnEdit = grid_piano_view_ora
                    col.OptionsColumn.AllowEdit = True

                End If

                If l_col = False Or pp_modelli_col.flag_qta_impr_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_impr_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Impegnata per Prod."

                    If Tipo_Art_Prod_Testata = "SL" Then

                        'repository
                        grid_piano_view_qta_impr = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
                        grid_piano_view_qta_impr.Mask.UseMaskAsDisplayFormat = True

                        grid_piano_view_qta_impr.AllowMouseWheel = False
                        grid_piano_view_qta_impr.AllowNullInput = True
                        grid_piano_view_qta_impr.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

                        grid_piano_view_qta_impr.Buttons.Add(New DevExpress.XtraEditors.Controls.EditorButton(DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph))
                        grid_piano_view_qta_impr.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                        grid_piano_view_qta_impr.Buttons(1).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                        grid_piano_view_qta_impr.Buttons(1).IsLeft = True
                        grid_piano_view_qta_impr.Buttons(0).IsLeft = True
                        grid_piano_view_qta_impr.Buttons(0).Tag = "relazioni"
                        grid_piano_view_qta_impr.Buttons(0).ToolTip = "relazioni"
                        grid_piano_view_qta_impr.Buttons(1).Tag = "conf_qta"
                        grid_piano_view_qta_impr.Buttons(1).ToolTip = "pianifica quantità"
                        grid_piano_view_qta_impr.Buttons(0).Image = img_small.Images(4)
                        grid_piano_view_qta_impr.Buttons(1).Image = img_small.Images(0)

                        AddHandler grid_piano_view_qta_impr.ButtonClick, AddressOf grid_piano_view_qta_impr_ButtonClick

                        col.ColumnEdit = grid_piano_view_qta_impr
                        col.OptionsColumn.AllowEdit = True

                    ElseIf Tipo_Art_Prod_Testata = "MP" Then

                        'repository
                        grid_piano_view_qta_impr = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
                        grid_piano_view_qta_impr.Mask.UseMaskAsDisplayFormat = True

                        grid_piano_view_qta_impr.AllowMouseWheel = False
                        grid_piano_view_qta_impr.AllowNullInput = True
                        grid_piano_view_qta_impr.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

                        grid_piano_view_qta_impr.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
                        grid_piano_view_qta_impr.Buttons(0).IsLeft = True
                        grid_piano_view_qta_impr.Buttons(0).Tag = "relazioni"
                        grid_piano_view_qta_impr.Buttons(0).ToolTip = "dettaglio relazioni"
                        grid_piano_view_qta_impr.Buttons(0).Image = img_small.Images(4)

                        AddHandler grid_piano_view_qta_impr.ButtonClick, AddressOf grid_piano_view_qta_impr_ButtonClick

                        col.ColumnEdit = grid_piano_view_qta_impr
                        col.OptionsColumn.AllowEdit = True

                    End If

                    col.Tag = data_piano
                    vet_colonne_valide.Add(des_i_g & "qta_impr_data")
                End If
                If l_col = False Or pp_modelli_col.flag_qta_ordc_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_ordc_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Ordini Clienti "
                    col.Tag = data_piano
                    col.ImageIndex = 1
                    vet_colonne_valide.Add(des_i_g & "qta_ordc_data")
                End If
                If l_col = False Or pp_modelli_col.flag_gia_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "gia_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Giacenza "
                    col.Tag = data_piano
                    col.ImageIndex = 0
                    vet_colonne_valide.Add(des_i_g & "gia_data")
                End If
                If l_col = False Or pp_modelli_col.flag_qta_prel_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "qta_prel_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Prelevata "
                    col.Tag = data_piano
                    vet_colonne_valide.Add(des_i_g & "qta_prel_data")
                End If
                If l_col = False Or pp_modelli_col.flag_dur_prod_data = "S" Then
                    col = GridView_Locale.Columns(des_i_g & "dur_prod_data")
                    col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = WeekdayName(Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)).ToUpper & vbCrLf & data_piano & vbCrLf & "Durata Prod. "
                    col.ImageIndex = 6
                    col.Tag = data_piano
                    col.AppearanceCell.TextOptions.HAlignment = HorzAlignment.Far
                    vet_colonne_valide.Add(des_i_g & "dur_prod_data")
                End If

                'col = GridView_Locale.Columns(des_i_g & "id")
                'col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = data_piano & vbCrLf & "id"

                'col = GridView_Locale.Columns(des_i_g & "lista_righe_pian")
                'col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = data_piano & vbCrLf & "lista_righe_pian"

                'col = GridView_Locale.Columns(des_i_g & "lista_righe_impr")
                'col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = data_piano & vbCrLf & "lista_righe_impr"
            End If

            data_piano = DateAdd(DateInterval.Day, 1, DateValue(data_piano))

        Next i_g

        '
        'DATI FINALI
        '
        If l_col = False Or pp_modelli_col.flag_ordforn_fin = "S" Then
            col = GridView_Locale.Columns("ordforn_fin")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità in Ordini" & vbCrLf & "Fornitori Finale"
        End If
        If l_col = False Or pp_modelli_col.flag_qta_pian_fin = "S" Then
            col = GridView_Locale.Columns("qta_pian_fin")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità Pianificata" & vbCrLf & "Finale"
        End If
        If l_col = False Or pp_modelli_col.flag_qta_impr_fin = "S" Then
            col = GridView_Locale.Columns("qta_impr_fin")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità Impegnata per" & vbCrLf & "Produzione Finale"
        End If
        If l_col = False Or pp_modelli_col.flag_qta_ordc_fin = "S" Then
            col = GridView_Locale.Columns("qta_ordc_fin")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità Ordini" & vbCrLf & "Clienti Finale"
        End If
        If l_col = False Or pp_modelli_col.flag_qta_prel_fin = "S" Then
            col = GridView_Locale.Columns("qta_prel_fin")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Quantità già" & vbCrLf & "Prelevata Finale"
        End If
        If l_col = False Or pp_modelli_col.flag_gia_fin = "S" Then
            col = GridView_Locale.Columns("gia_fin")
            col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Giacenza" & vbCrLf & "Finale"
        End If

        For Each c As GridColumn In GridView_Locale.Columns
            c.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric
            c.DisplayFormat.FormatString = EditMask
        Next
        GridView_Locale.BestFitColumns()

        Reimposta_ColWidth_Qta(GridView_Locale, da_data, a_data)

        GridView_Locale.ColumnPanelRowHeight = 54  ' 48

        If Pp_Pianiprod_Bloccato = True Then
            For Each col In grid_piano_view.Columns
                col.OptionsColumn.AllowEdit = False
            Next
        End If

    End Sub

    Function Cerca_Data_Festivo_Piano(ByVal ragg_prod As String, ByVal data_piano As String) As Boolean
        Dim flag_trovato_gioprodata As Boolean
        Dim giorno_sett_Holiday As Boolean
        Dim flag_festivo As Long

        Cerca_Data_Festivo_Piano = False

        ' cerca se giorno festivo o lavorativo
        giorno_sett_Holiday = False
        flag_festivo = 0
        flag_trovato_gioprodata = False

        If Date_Holiday(DateValue(data_piano)) Then
            giorno_sett_Holiday = True
        End If

        DB_DataReaderClose(dr_pp_tabcaldatalin_coddata)

        If RTrim(Getv(ragg_prod)) = "" Then
            ragg_prod = "***"
        End If

        qdf_pp_tabcaldatalin_coddata.Parameters.Item("tipo_art_prod_gio").Value = Getv(Tipo_Art_Prod_Testata)
        qdf_pp_tabcaldatalin_coddata.Parameters.Item("ragg_prod_gio").Value = Getv(ragg_prod)
        qdf_pp_tabcaldatalin_coddata.Parameters.Item("data_prod").Value = DateValue(data_piano)
        qdf_pp_tabcaldatalin_coddata.Parameters.Item("cod_linea_prod").Value = "***"
        qdf_pp_tabcaldatalin_coddata.Transaction = DB_Transaction
        dr_pp_tabcaldatalin_coddata = qdf_pp_tabcaldatalin_coddata.ExecuteReader

        If dr_pp_tabcaldatalin_coddata.HasRows Then

            If dr_pp_tabcaldatalin_coddata.Read Then
                flag_festivo = CLng(DB_Dsv(dr_pp_tabcaldatalin_coddata.Item("flag_festivo")))
                flag_trovato_gioprodata = True
            End If

        Else

            If ragg_prod <> "***" Then

                DB_DataReaderClose(dr_pp_tabcaldatalin_coddata)

                qdf_pp_tabcaldatalin_coddata.Parameters.Item("tipo_art_prod_gio").Value = Tipo_Art_Prod_Testata
                qdf_pp_tabcaldatalin_coddata.Parameters.Item("ragg_prod_gio").Value = "***"
                qdf_pp_tabcaldatalin_coddata.Parameters.Item("data_prod").Value = DateValue(data_piano)
                qdf_pp_tabcaldatalin_coddata.Parameters.Item("cod_linea_prod").Value = "***"
                qdf_pp_tabcaldatalin_coddata.Transaction = DB_Transaction
                dr_pp_tabcaldatalin_coddata = qdf_pp_tabcaldatalin_coddata.ExecuteReader

                If dr_pp_tabcaldatalin_coddata.HasRows Then

                    If dr_pp_tabcaldatalin_coddata.Read Then
                        flag_festivo = CLng(DB_Dsv(dr_pp_tabcaldatalin_coddata.Item("flag_festivo")))
                        flag_trovato_gioprodata = True
                    End If

                End If

            End If

        End If

        DB_DataReaderClose(dr_pp_tabcaldatalin_coddata)

        If flag_trovato_gioprodata = False Then

            DB_DataReaderClose(dr_pp_tabcalsett_codgio)

            qdf_pp_tabcalsett_codgio.Parameters.Item("ragg_prod_sett").Value = ragg_prod
            qdf_pp_tabcalsett_codgio.Parameters.Item("giorno_sett").Value = Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)
            qdf_pp_tabcalsett_codgio.Transaction = DB_Transaction
            dr_pp_tabcalsett_codgio = qdf_pp_tabcalsett_codgio.ExecuteReader

            If dr_pp_tabcalsett_codgio.HasRows Then
                If dr_pp_tabcalsett_codgio.Read Then
                    If CLng(DB_Dsv(dr_pp_tabcalsett_codgio("nr_turno"))) = 0 Then
                        flag_festivo = CLng(DB_Dsv(dr_pp_tabcalsett_codgio("flag_festivo")))
                    Else
                        If giorno_sett_Holiday = True Then
                            flag_festivo = 1
                        End If
                    End If

                End If
            Else

                If ragg_prod <> "***" Then

                    DB_DataReaderClose(dr_pp_tabcalsett_codgio)

                    qdf_pp_tabcalsett_codgio.Parameters.Item("ragg_prod_sett").Value = "***"
                    qdf_pp_tabcalsett_codgio.Parameters.Item("giorno_sett").Value = Weekday(DateValue(data_piano), FirstDayOfWeek.Monday)
                    qdf_pp_tabcalsett_codgio.Transaction = DB_Transaction
                    dr_pp_tabcalsett_codgio = qdf_pp_tabcalsett_codgio.ExecuteReader

                    If dr_pp_tabcalsett_codgio.HasRows Then
                        If dr_pp_tabcalsett_codgio.Read Then
                            If CLng(DB_Dsv(dr_pp_tabcalsett_codgio("nr_turno"))) = 0 Then
                                flag_festivo = CLng(DB_Dsv(dr_pp_tabcalsett_codgio("flag_festivo")))
                            Else
                                If giorno_sett_Holiday = True Then
                                    flag_festivo = 1
                                End If
                            End If
                        End If
                    Else
                        If giorno_sett_Holiday = True Then
                            flag_festivo = 1
                        End If
                    End If
                Else
                    If giorno_sett_Holiday = True Then
                        flag_festivo = 1
                    End If
                End If

            End If

            DB_DataReaderClose(dr_pp_tabcalsett_codgio)

        End If

        Cerca_Data_Festivo_Piano = False

        If flag_festivo = 1 Then
            Cerca_Data_Festivo_Piano = True
        End If

    End Function

    Sub Reimposta_ColWidth_Qta(GridView As DevExpress.XtraGrid.Views.Grid.GridView, ByVal da_data As Object, ByVal a_data As Object)
        Dim col_width As Long
        Dim col As DevExpress.XtraGrid.Columns.GridColumn = Nothing
        Dim des_i_g As String
        Dim giorni_diff As Long

        giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data)), DateValue(Getv(a_data)))
        If giorni_diff < 0 Then giorni_diff = 0

        col_width = 115

        col = GridView.Columns("gia_ini")
        col.Width = col_width
        col = GridView.Columns("gia_att")
        col.Width = col_width
        col = GridView.Columns("ordforn_ini")
        col.Width = col_width
        col = GridView.Columns("qta_pian_ini")
        col.Width = col_width
        col = GridView.Columns("qta_impr_ini")
        col.Width = col_width
        col = GridView.Columns("qta_ordc_ini")
        col.Width = col_width
        col = GridView.Columns("qta_prel_ini")
        col.Width = col_width

        For i_g = 0 To giorni_diff

            des_i_g = Format(i_g, "0000") & "_"

            col = GridView.Columns(des_i_g & "ordforn_data")
            col.Width = col_width
            col = GridView.Columns(des_i_g & "qta_pian_data")
            col.Width = col_width
            col = GridView.Columns(des_i_g & "qta_impr_data")
            col.Width = col_width
            col = GridView.Columns(des_i_g & "qta_ordc_data")
            col.Width = col_width
            col = GridView.Columns(des_i_g & "qta_prel_data")
            col.Width = col_width

            col = GridView.Columns(des_i_g & "flag_festivo")
            col.Width = col_width / 1.65

            col = GridView.Columns(des_i_g & "qta_pian_data")
            If col.Name Like "*qta_pian_data" Then
                col_width = 140
            End If

        Next i_g

        col = GridView.Columns("gia_fin")
        col.Width = col_width
        col = GridView.Columns("ordforn_fin")
        col.Width = col_width
        col = GridView.Columns("qta_pian_fin")
        col.Width = col_width
        col = GridView.Columns("qta_impr_fin")
        col.Width = col_width
        col = GridView.Columns("qta_ordc_fin")
        col.Width = col_width
        col = GridView.Columns("qta_prel_fin")
        col.Width = col_width

    End Sub

    Private Sub Leggi_Dati_Piano(ByVal tipo_art_prod As String, ByVal ragg_prod As String, dt_piano As DataTable, GridView As DevExpress.XtraGrid.Views.Grid.GridView, ByVal da_data As Object, ByVal a_data As Object, Optional ByVal nuovo_inserimento As Boolean = False)

        Dim sql As String = ""
        'Dim da_pp_pianiprod As DB2DataAdapter = Nothing
        Dim dt_pp_pianiprod As DataTable = Nothing
        Dim dr_pp_pianiprod As DB2DataReader = Nothing
        Dim cmd_pp_pianiprod As DB2Command = Nothing
        Dim i_d As Long
        Dim RowArray_Dt_Piano() As DataRow = Nothing
        Dim pref_cmp As String
        Dim data_piano As String
        Dim cod_art As String
        Dim qta_pian As Object
        Dim qta_pian_co As Object
        Dim qta_pian_cf As Object
        Dim qta_pian_pe As Object
        Dim qta_pian_pz As Object
        Dim qta_impr As Double
        Dim qta_impr_co As Double
        Dim qta_impr_cf As Double
        Dim qta_impr_pe As Double
        Dim qta_impr_pz As Double
        Dim qta_gia As Double
        Dim qta_ordc As Double
        Dim qta_prod As Double
        Dim qta_pora As Double
        Dim qta_ordforn As Double
        Dim data_row_agg As DataRow = Nothing
        Dim trovato_record As Boolean
        Dim pz_ora_pref As Double
        Dim min_lav_pref As Long
        Dim pz_ora_linea_ut As Double
        Dim min_lav_linea_ut As Long
        Dim qta_pian_prec As Double
        Dim qta_pian_co_prec As Double
        Dim qta_pian_cf_prec As Double
        Dim qta_pian_pe_prec As Double
        Dim qta_pian_pz_prec As Double
        Dim qta_impr_prec As Double
        Dim qta_impr_co_prec As Double
        Dim qta_impr_cf_prec As Double
        Dim qta_impr_pe_prec As Double
        Dim qta_impr_pz_prec As Double
        Dim da_data_prec As Object
        Dim a_data_prec As Object = Nothing
        Dim nr_riga_str As String
        Dim lista_righe As String

        Dim durata_prod As TimeSpan

        'utilizzati per il calcolo della giacenza
        Dim giorni_diff As Integer
        Dim des_i_g As String

        'se TRUE allora per il calcolo delle giacenze utilizzo quelle reali e non da pp_pianiprod
        Dim flag_periodo_passato As Boolean = False

        'Datatable per la gestione del valore OLD nei nuovi inserimenti
        Dim dt_piano_old As DataTable = Nothing
        Dim rows_old() As DataRow = Nothing
        Dim qta_pian_old As Object = Nothing
        Dim dct_durata As New Dictionary(Of String, TimeSpan)

        ' impostazione delle date per il periodo precedente ->   da_data_prec = data di oggi + 1 giorno;   a_data_prec = da_data di ricerca - 1 giorno

        da_data_prec = DateAdd(DateInterval.Day, 1, Today)
        a_data_prec = DateAdd(DateInterval.Day, -1, DateValue(Getv(da_data).ToString))

        'da_data_prec = DateAdd(DateInterval.Day, -60, Today)
        'a_data_prec = DateAdd(DateInterval.Day, -1, DateValue(Getv(da_data).ToString))

        ' estrazione tutti i dati da tabella pp_pianiprod
        sql = ""
        sql = sql & "SELECT pp_pianiprod.*, anaart.des_art, anaart.cod_um, anaart.conf_collo, anaart.pezzi_conf, anaart.peso_netto_conf,  tabum.tipo_um, " & vbCrLf
        sql = sql & "       tabgen_rp.des_cod AS des_ragg_prod, tabgen_lpr.des_cod AS des_linea_prod_pre, pp_tabpzora.cod_dep_linea, tabgen_de.des_cod AS des_dep_linea, " & vbCrLf
        sql = sql & "       tabgen_ass.des_cod AS des_ass_prod_pre, 0 AS qta_ordforn, 0 AS qta_ordc, 0 AS qta_prod, 0 AS qta_pora, tabgen_lpr1.des_cod AS des_linea_prod, " & vbCrLf
        sql = sql & "       anaart.cod_art, " & vbCrLf
        sql = sql & "       anaart.cod_linea_comm, anaart.cod_sett_comm, anaart.cod_fam_comm, anaart.cod_sott_comm, " & vbCrLf
        sql = sql & "       anaart.cod_linea_gest, anaart.cod_sett_gest, anaart.cod_fam_gest, anaart.cod_sott_gest, " & vbCrLf
        sql = sql & "       anaart.cod_linea_web , anaart.cod_sett_web , anaart.cod_fam_web , anaart.cod_sott_web   " & vbCrLf
        sql = sql & "  FROM pp_pianiprod, " & vbCrLf
        sql = sql & "       anaart, " & vbCrLf
        sql = sql & "       tabum, " & vbCrLf
        sql = sql & "       OUTER tabgen AS tabgen_rp, " & vbCrLf
        sql = sql & "       OUTER tabgen AS tabgen_lpr, " & vbCrLf
        sql = sql & "       OUTER tabgen AS tabgen_lpr1, " & vbCrLf
        sql = sql & "       OUTER (pp_tabpzora, OUTER tabgen AS tabgen_de), " & vbCrLf
        sql = sql & "       OUTER tabgen AS tabgen_ass " & vbCrLf
        sql = sql & " WHERE pp_pianiprod.data_piano      >= '" & DB_Sql_Date(da_data) & "' " & vbCrLf
        sql = sql & "   AND pp_pianiprod.data_piano      <= '" & DB_Sql_Date(a_data) & "' " & vbCrLf
        sql = sql & "   AND pp_pianiprod.tipo_art_prod = '" & tipo_art_prod & "' " & vbCrLf

        If Trim(ragg_prod) <> "" Then
            sql = sql & " AND pp_pianiprod.ragg_prod = '" & ragg_prod & "' " & vbCrLf
        End If

        sql = sql & " AND pp_pianiprod.cod_art_pian     = anaart.cod_art                  " & vbCrLf
        sql = sql & " AND anaart.cod_um                 = tabum.cod_um                    " & vbCrLf
        sql = sql & " AND pp_pianiprod.ragg_prod        = tabgen_rp.cod_tab               " & vbCrLf
        sql = sql & " AND tabgen_rp.tipo_tab            = 'RP'                            " & vbCrLf

        sql = sql & " AND pp_pianiprod.cod_linea_prod_pre  = tabgen_lpr.cod_tab           " & vbCrLf
        sql = sql & " AND tabgen_lpr.tipo_tab              = 'LPR'                        " & vbCrLf

        sql = sql & " AND pp_pianiprod.cod_ass_prod_pre  = tabgen_ass.cod_tab             " & vbCrLf
        sql = sql & " AND tabgen_ass.tipo_tab              = 'ASS'                        " & vbCrLf

        sql = sql & " AND pp_pianiprod.cod_linea_prod      = tabgen_lpr1.cod_tab          " & vbCrLf
        sql = sql & " AND tabgen_lpr1.tipo_tab             = 'LPR'                        " & vbCrLf

        sql = sql & " AND pp_pianiprod.cod_linea_prod_pre          = pp_tabpzora.cod_linea_prod            " & vbCrLf
        sql = sql & " AND NVL(pp_pianiprod.cod_ass_prod_pre, '')   = NVL(pp_tabpzora.cod_ass_prod, '')     " & vbCrLf
        sql = sql & " AND pp_tabpzora.nr_riga                      = 1                                     " & vbCrLf          ' estrae solo la prima riga 
        sql = sql & " AND pp_tabpzora.cod_dep_linea                = tabgen_de.cod_tab                     " & vbCrLf
        sql = sql & " AND tabgen_de.tipo_tab                       = 'DE'                                  " & vbCrLf

        If Getv(cod_dep) <> "" Then
            sql = sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
        End If

        If pp_modelli_rag.cod_mod = "" Then

            ' // ordinamento standard //

            sql = sql & " ORDER BY data_piano, cod_art_pian " & vbCrLf

        Else

            ' // ordinamento personalizzato da modello //

            sql = sql & " ORDER BY data_piano "

            If pp_modelli_rag.campo1_art <> "" Then sql = sql & " , " & pp_modelli_rag.campo1_art & " "
            If pp_modelli_rag.campo2_art <> "" Then sql = sql & " , " & pp_modelli_rag.campo2_art & " "
            If pp_modelli_rag.campo3_art <> "" Then sql = sql & " , " & pp_modelli_rag.campo3_art & " "
            If pp_modelli_rag.campo4_art <> "" Then sql = sql & " , " & pp_modelli_rag.campo4_art & " "
            If pp_modelli_rag.campo5_art <> "" Then sql = sql & " , " & pp_modelli_rag.campo5_art & " "

            sql = sql & " , cod_art_pian " & vbCrLf

        End If

        'DB_DataAdapterOpen(da_pp_pianiprod, sql, "pp_pianiprod", "", DB2DataAdapterType.ReadOnly)

        dt_pp_pianiprod = New DataTable

        dt_pp_pianiprod.Clear()

        'da_pp_pianiprod.Fill(dt_pp_pianiprod)

        cmd_pp_pianiprod = DB_CommandCreate(sql)
        DB_DataReaderExecute(dr_pp_pianiprod, cmd_pp_pianiprod)
        dt_pp_pianiprod.Load(dr_pp_pianiprod)
        DB_DataReaderClose(dr_pp_pianiprod, cmd_pp_pianiprod)

        If nuovo_inserimento Then
            dt_piano_old = New DataTable
            dt_piano_old = dt_piano.Copy
        End If


        dt_piano.Clear()

        ' to_do  lettura giacenza
        ' to_do  lettura ordini fornitori
        ' to_do  lettura ordini clienti
        ' to_do  qta già prelevata

        For i_d = 0 To dt_pp_pianiprod.Rows.Count - 1

            data_piano = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("data_piano"))
            cod_art = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_art_pian"))
            pref_cmp = Cerca_Lista_Date_Prefisso(data_piano)

            If data_piano < Now.Date Then
                flag_periodo_passato = True
            Else
                flag_periodo_passato = False
            End If

            qta_pian = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian"))
            qta_pian_co = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_co"))
            qta_pian_cf = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_cf"))
            qta_pian_pe = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_pe"))
            qta_pian_pz = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_pz"))

            If Not Field_Null(qta_pian) Then
                qta_pian = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian"), 0)), 3)
            Else
                qta_pian = DBNull.Value
            End If
            If Not Field_Null(qta_pian_co) Then
                qta_pian_co = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_co"), 0)), 3)
            Else
                qta_pian_co = DBNull.Value
            End If
            If Not Field_Null(qta_pian_cf) Then
                qta_pian_cf = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_cf"), 0)), 3)
            Else
                qta_pian_cf = DBNull.Value
            End If
            If Not Field_Null(qta_pian_pe) Then
                qta_pian_pe = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_pe"), 0)), 3)
            Else
                qta_pian_pe = DBNull.Value
            End If
            If Not Field_Null(qta_pian_pz) Then
                qta_pian_pz = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pian_pz"), 0)), 3)
            Else
                qta_pian_pz = DBNull.Value
            End If

            qta_impr = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_impr"), 0)), 3)
            qta_impr_co = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_impr_co"), 0)), 3)
            qta_impr_cf = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_impr_cf"), 0)), 3)
            qta_impr_pe = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_impr_pe"), 0)), 3)
            qta_impr_pz = Math.Round(CDbl(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_impr_pz"), 0)), 3)

            '
            'GIACENZE, ORDINI CLIENTI, ORDINI FORNITORI, QTA PRODOTTA
            '
            If flag_periodo_passato = False Then
                qta_gia = Math.Round(Leggi_Giacenza("DATA", False, Tipo_Art_Prod_Testata, data_piano, cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)
            Else
                qta_gia = Math.Round(Leggi_Giacenza("ATT", True, Tipo_Art_Prod_Testata, data_piano, cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)
            End If

            qta_ordc = Math.Round(Object_Val(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_ordc"))), 3)
            qta_prod = Math.Round(Object_Val(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_prod"))), 3)
            qta_pora = Math.Round(Object_Val(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_pora"))), 3)
            qta_ordforn = Math.Round(Object_Val(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("qta_ordforn"))), 3)

            ' ricerca sul datatable dt_piano, che è quello collegato alla gridview, se è già presente l'articolo
            RowArray_Dt_Piano = dt_piano.Select("cod_art = '" & cod_art & "' ")

            ' se trovato record per articolo     DAVIDE: vale x  semilavorati
            If RowArray_Dt_Piano.GetUpperBound(0) >= 0 Then

                If Not Field_Null(qta_pian) Then
                    qta_pian = qta_pian + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_pian_data"), 0)), 3)
                    qta_pian_co = qta_pian_co + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_pian_data_co"), 0)), 3)
                    qta_pian_cf = qta_pian_cf + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_pian_data_cf"), 0)), 3)
                    qta_pian_pe = qta_pian_pe + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_pian_data_pe"), 0)), 3)
                    qta_pian_pz = qta_pian_pz + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_pian_data_pz"), 0)), 3)
                End If

                qta_impr = qta_impr + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_impr_data"), 0)), 3)
                qta_impr_co = qta_impr_co + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_impr_data_co"), 0)), 3)
                qta_impr_cf = qta_impr_cf + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_impr_data_cf"), 0)), 3)
                qta_impr_pe = qta_impr_pe + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_impr_data_pe"), 0)), 3)
                qta_impr_pz = qta_impr_pz + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_impr_data_pz"), 0)), 3)

                qta_gia = qta_gia + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "gia_data"), 0)), 3)
                qta_ordc = qta_ordc + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_ordc_data"), 0)), 3)
                qta_prod = qta_prod + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_prod_data"), 0)), 3)
                qta_pora = qta_pora + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "qta_pian_ora_data"), 0)), 3)
                qta_ordforn = qta_ordforn + Math.Round(CDbl(DB_Dsv(RowArray_Dt_Piano(0)(pref_cmp & "ordforn_data"), 0)), 3)

                data_row_agg = RowArray_Dt_Piano(0)

                trovato_record = True

            Else

                trovato_record = False

                data_row_agg = dt_piano.NewRow()

                data_row_agg("tipo_art_prod") = tipo_art_prod
                data_row_agg("des_tipo_art_prod") = ""
                data_row_agg("ragg_prod") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("ragg_prod"))
                data_row_agg("des_ragg_prod") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("des_ragg_prod"))
                data_row_agg("cod_art") = cod_art
                data_row_agg("des_art") = Trim(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("des_art")))

                data_row_agg("conf_collo") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("conf_collo"), 0)
                data_row_agg("pezzi_conf") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("pezzi_conf"), 0)
                data_row_agg("peso_netto_conf") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("peso_netto_conf"), 0)

                If leggi_pp_tabpzora(CStr(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_linea_prod_pre"))), CStr(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_ass_prod_pre"))), cod_art,
                                     azienda.tipo_cls_pian_prod, pz_ora_pref, min_lav_pref) Then
                    data_row_agg("prod_pz_ora_pref") = pz_ora_pref
                End If

                data_row_agg("cod_um") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_um"))
                data_row_agg("tipo_um") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("tipo_um"))

                data_row_agg("cod_linea_prod_pre") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_linea_prod_pre"))
                data_row_agg("des_linea_prod_pre") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("des_linea_prod_pre"))
                data_row_agg("cod_ass_prod_pre") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_ass_prod_pre"))
                data_row_agg("des_ass_prod_pre") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("des_ass_prod_pre"))
                data_row_agg("cod_dep_linea") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_dep_linea"))
                data_row_agg("des_dep_linea") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("des_dep_linea"))


                Leggi_Pianificato_Impegnato(tipo_art_prod, cod_art, da_data_prec, a_data_prec, _
                                      qta_pian_prec, qta_pian_co_prec, qta_pian_cf_prec, qta_pian_pe_prec, qta_pian_pz_prec, _
                                      qta_impr_prec, qta_impr_co_prec, qta_impr_cf_prec, qta_impr_pe_prec, qta_impr_pz_prec)


                ' giacenza attuale
                data_row_agg("gia_att") = Math.Round(Leggi_Giacenza("ATT", False, Tipo_Art_Prod_Testata, da_data, cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)

                ' giacenza iniziale
                data_row_agg("gia_ini") = Math.Round(Leggi_Giacenza("INI", flag_periodo_passato, Tipo_Art_Prod_Testata, da_data, cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)

                data_row_agg("qta_ordc_ini") = Math.Round(Leggi_Ordini_Clienti(cod_art, data_piano, sql_deposito_magazzino), 3)
                data_row_agg("ordforn_ini") = Math.Round(Leggi_Ordini_Fornitore("INI", cod_art, data_piano), 3)

                data_row_agg("qta_pian_ini") = qta_pian_prec
                data_row_agg("qta_pian_ini_co") = qta_pian_co_prec
                data_row_agg("qta_pian_ini_cf") = qta_pian_cf_prec
                data_row_agg("qta_pian_ini_pe") = qta_pian_pe_prec
                data_row_agg("qta_pian_ini_pz") = qta_pian_pz_prec

                data_row_agg("qta_impr_ini") = qta_impr_prec
                data_row_agg("qta_impr_ini_co") = qta_impr_co_prec
                data_row_agg("qta_impr_ini_cf") = qta_impr_cf_prec
                data_row_agg("qta_impr_ini_pe") = qta_impr_pe_prec
                data_row_agg("qta_impr_ini_pz") = qta_impr_pz_prec

                ' aggiornata già la quantità finale che poi eventualmente sarà aggiornata cone le quantità delle date
                data_row_agg("gia_fin") = data_row_agg("gia_ini")
                data_row_agg("qta_ordc_fin") = data_row_agg("qta_ordc_ini")
                data_row_agg("ordforn_fin") = data_row_agg("ordforn_ini")

                data_row_agg("qta_pian_fin") = qta_pian_prec
                data_row_agg("qta_pian_fin_co") = qta_pian_co_prec
                data_row_agg("qta_pian_fin_cf") = qta_pian_cf_prec
                data_row_agg("qta_pian_fin_pe") = qta_pian_pe_prec
                data_row_agg("qta_pian_fin_pz") = qta_pian_pz_prec

                data_row_agg("qta_impr_fin") = qta_impr_prec
                data_row_agg("qta_impr_fin_co") = qta_impr_co_prec
                data_row_agg("qta_impr_fin_cf") = qta_impr_cf_prec
                data_row_agg("qta_impr_fin_pe") = qta_impr_pe_prec
                data_row_agg("qta_impr_fin_pz") = qta_impr_pz_prec

            End If

            data_row_agg(pref_cmp & "id") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("id"))
            data_row_agg(pref_cmp & "cod_linea_prod") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_linea_prod"))
            data_row_agg(pref_cmp & "des_linea_prod") = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("des_linea_prod"))

            ' lista delle righe per la qta pianificata
            'If Not Field_Null(qta_pian) Then
            '    If Math.Round(qta_pian, 3) >= 0 Then

            nr_riga_str = "|" & DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("nr_riga")) & "|"
            lista_righe = DB_Dsv(data_row_agg(pref_cmp & "lista_righe_pian"), "")

            If InStr(lista_righe, nr_riga_str) > 0 Then
            Else
                data_row_agg(pref_cmp & "lista_righe_pian") = lista_righe & nr_riga_str
            End If

            '    End If
            'End If

            ' lista delle righe per la qta impegnata per produzione
            If Math.Round(qta_impr, 3) >= 0 Then

                nr_riga_str = "|" & DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("nr_riga")) & "|"
                lista_righe = DB_Dsv(data_row_agg(pref_cmp & "lista_righe_impr"), "")

                If InStr(lista_righe, nr_riga_str) > 0 Then
                Else
                    data_row_agg(pref_cmp & "lista_righe_impr") = lista_righe & nr_riga_str
                End If

            End If

            data_row_agg(pref_cmp & "qta_pian_data") = qta_pian

            If nuovo_inserimento Then

                rows_old = dt_piano_old.Select("cod_art = '" & cod_art & "' ")

                If rows_old.Length > 0 Then
                    qta_pian_old = DB_Dsv(rows_old(0)(pref_cmp & "qta_pian_data_old"), DBNull.Value)
                    data_row_agg(pref_cmp & "qta_pian_data_old") = qta_pian_old
                    rows_old = Nothing
                End If

            Else
                data_row_agg(pref_cmp & "qta_pian_data_old") = qta_pian
            End If



            data_row_agg(pref_cmp & "qta_pian_data_co") = qta_pian_co
            data_row_agg(pref_cmp & "qta_pian_data_cf") = qta_pian_cf
            data_row_agg(pref_cmp & "qta_pian_data_pe") = qta_pian_pe
            data_row_agg(pref_cmp & "qta_pian_data_pz") = qta_pian_pz

            data_row_agg(pref_cmp & "qta_impr_data") = qta_impr
            data_row_agg(pref_cmp & "qta_impr_data_co") = qta_impr_co
            data_row_agg(pref_cmp & "qta_impr_data_cf") = qta_impr_cf
            data_row_agg(pref_cmp & "qta_impr_data_pe") = qta_impr_pe
            data_row_agg(pref_cmp & "qta_impr_data_pz") = qta_impr_pz


            If flag_periodo_passato = False Then
                data_row_agg(pref_cmp & "gia_data") = qta_gia + data_row_agg("gia_ini")
            Else
                data_row_agg(pref_cmp & "gia_data") = qta_gia
            End If

            data_row_agg(pref_cmp & "qta_ordc_data") = qta_ordc
            data_row_agg(pref_cmp & "qta_prod_data") = qta_prod
            data_row_agg(pref_cmp & "qta_pian_ora_data") = qta_pora
            data_row_agg(pref_cmp & "ordforn_data") = qta_ordforn

            'timespan ha come unità di misura tick = 100ns

            If Not Field_Null(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_linea_prod"))) Then
                leggi_pp_tabpzora(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_linea_prod")), DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_ass_prod_pre")), cod_art, azienda.tipo_cls_pian_prod, pz_ora_linea_ut, min_lav_linea_ut)
            End If

            If Object_Val(qta_pian_pz) = 0 Or (Object_Val(pz_ora_pref) = 0 AndAlso Object_Val(pz_ora_linea_ut) = 0) Then
                data_row_agg(pref_cmp & "dur_prod_data") = DBNull.Value
            Else

                If Not Field_Null(DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("cod_linea_prod"))) Then
                    Calcolo_Tempo_PzOra(pz_ora_linea_ut, qta_pian_pz, durata_prod)
                Else
                    Calcolo_Tempo_PzOra(pz_ora_pref, qta_pian_pz, durata_prod)
                End If

                data_row_agg(pref_cmp & "dur_prod_data") = durata_prod

                If dct_durata.ContainsKey(pref_cmp & "dur_prod_data") Then
                    dct_durata.Item(pref_cmp & "dur_prod_data") = dct_durata.Item(pref_cmp & "dur_prod_data") + durata_prod
                Else
                    dct_durata.Add(pref_cmp & "dur_prod_data", durata_prod)
                End If

                'data_row_agg(pref_cmp & "dur_prod_data") = New TimeSpan((qta_pian_pz / pz_ora_pref) * 60 * 60 * 1000 * 1000 * 10)
            End If


            ' somma sulla qta finale

            If Not Field_Null(qta_pian) Then
                data_row_agg("qta_pian_fin") += qta_pian
                data_row_agg("qta_pian_fin_co") += qta_pian_co
                data_row_agg("qta_pian_fin_cf") += qta_pian_cf
                data_row_agg("qta_pian_fin_pe") += qta_pian_pe
                data_row_agg("qta_pian_fin_pz") += qta_pian_pz
            End If

            data_row_agg("qta_impr_fin") += qta_impr
            data_row_agg("qta_impr_fin_co") += qta_impr_co
            data_row_agg("qta_impr_fin_cf") += qta_impr_cf
            data_row_agg("qta_impr_fin_pe") += qta_impr_pe
            data_row_agg("qta_impr_fin_pz") += qta_impr_pz

            'If Trim(Getv(DB_Dsv(data_row_agg("cod_art"), ""))) = "110C" Then
            '    xx1 = xx1
            'End If

            Dim des_i_g_prec As String

            giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data_pian)), DateValue(Getv(a_data_pian)))
            If giorni_diff < 0 Then giorni_diff = 0

            'TO_DO DA rivedere ordini fornitore

            For i_g = 0 To giorni_diff

                des_i_g = Format(i_g, "0000") & "_"

                If Tipo_Art_Prod_Testata = "MP" Then

                    data_row_agg(des_i_g & "ordforn_data") = Leggi_Ordini_Fornitore("DATA", data_row_agg("cod_art"), Lista_Date(0, i_g))

                    des_i_g = Format(i_g, "0000") & "_"

                    If i_g = 0 Then

                        If Lista_Date(0, i_g) >= Now.Date Then
                            data_row_agg(des_i_g & "gia_data") = Object_Val(data_row_agg("gia_ini")) + Object_Val(data_row_agg(des_i_g & "qta_pian_data")) - Object_Val(data_row_agg(des_i_g & "qta_impr_data")) + Object_Val(data_row_agg(des_i_g & "ordforn_data"))
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg(des_i_g & "gia_data")
                        Else
                            data_row_agg(des_i_g & "gia_data") = Math.Round(Leggi_Giacenza("ATT", True, Tipo_Art_Prod_Testata, Lista_Date(0, i_g), cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg(des_i_g & "gia_data")
                        End If

                    Else

                        If Lista_Date(0, i_g) >= Now.Date Then
                            des_i_g_prec = Format(i_g - 1, "0000") & "_"
                            data_row_agg(des_i_g & "gia_data") = Object_Val(data_row_agg(des_i_g_prec & "gia_data")) + Object_Val(data_row_agg(des_i_g & "qta_pian_data")) - Object_Val(data_row_agg(des_i_g & "qta_impr_data")) + Object_Val(data_row_agg(des_i_g & "ordforn_data"))
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg(des_i_g & "gia_data")
                        Else
                            data_row_agg(des_i_g & "gia_data") = Math.Round(Leggi_Giacenza("ATT", True, Tipo_Art_Prod_Testata, Lista_Date(0, i_g), cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg(des_i_g & "gia_data")
                        End If

                    End If

                Else

                    If i_g = 0 Then

                        If Lista_Date(0, i_g) >= Now.Date Then
                            data_row_agg(des_i_g & "gia_data") = Object_Val(data_row_agg("gia_ini")) + Object_Val(data_row_agg(des_i_g & "qta_pian_data")) - Object_Val(data_row_agg(des_i_g & "qta_impr_data"))
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg("gia_ini")
                        Else
                            data_row_agg(des_i_g & "gia_data") = Math.Round(Leggi_Giacenza("ATT", True, Tipo_Art_Prod_Testata, Lista_Date(0, i_g), cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg(des_i_g & "gia_data")
                        End If

                    Else

                        If Lista_Date(0, i_g) >= Now.Date Then
                            des_i_g_prec = Format(i_g - 1, "0000") & "_"
                            data_row_agg(des_i_g & "gia_data") = Object_Val(data_row_agg(des_i_g_prec & "gia_data")) + Object_Val(data_row_agg(des_i_g & "qta_pian_data")) - Object_Val(data_row_agg(des_i_g & "qta_impr_data"))

                            ' BORT 09/01/2017 l'impegnato PRECEDENTE degli ordini clienti non va tolto dalla disponibilità se è di un periodo passato.
                            If Lista_Date(0, i_g - 1) < Now.Date Then
                                data_row_agg(des_i_g & "qta_disp_data") = Object_Val(data_row_agg(des_i_g_prec & "qta_disp_data"))
                            Else
                                data_row_agg(des_i_g & "qta_disp_data") = Object_Val(data_row_agg(des_i_g_prec & "qta_disp_data")) + Object_Val(data_row_agg(des_i_g_prec & "qta_pian_data")) - Object_Val(data_row_agg(des_i_g_prec & "qta_ordc_data"))
                            End If

                        Else
                            data_row_agg(des_i_g & "gia_data") = Math.Round(Leggi_Giacenza("ATT", True, Tipo_Art_Prod_Testata, Lista_Date(0, i_g), cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)
                            data_row_agg(des_i_g & "qta_disp_data") = data_row_agg(des_i_g & "gia_data")
                        End If

                    End If

                End If

                ' alla disponibilità va RI-aggiunto l'impegnato ordini clienti in quanto questo era già implicitamente incluso in "pp_giacepar"

                If azienda_agg.flag_pp_giacepar = "S" Then
                    data_row_agg(des_i_g & "qta_disp_data") = Object_Val(data_row_agg(des_i_g & "gia_data")) + leggi_qta_pp_ordpartdet(RTrim(data_row_agg("cod_art")), Getv(da_data_pian))
                End If

                'CALCOLO DELLE QTA
                If pp_modelli_col.flag_ordforn_data = "S" Then

                    DB_DataReaderClose(Dr_Sel_Qta_Ordforn_Data)
                    DB_CommandParametersReset(Cmd_Sel_Qta_Ordforn_Data)
                    Cmd_Sel_Qta_Ordforn_Data.Parameters.Item("cod_art").Value = Getv(DB_Dsv(data_row_agg("cod_art"), ""))
                    Cmd_Sel_Qta_Ordforn_Data.Parameters.Item("data").Value = CDate(Lista_Date(0, i_g))
                    DB_DataReaderExecute(Dr_Sel_Qta_Ordforn_Data, Cmd_Sel_Qta_Ordforn_Data)

                    If Dr_Sel_Qta_Ordforn_Data.Read Then

                        data_row_agg(des_i_g & "ordforn_data") = DB_Dsv(Dr_Sel_Qta_Ordforn_Data("qta"), 0)

                    Else

                        data_row_agg(des_i_g & "ordforn_data") = 0

                    End If

                    DB_DataReaderClose(Dr_Sel_Qta_Ordforn_Data)

                Else

                    'data_row_agg(des_i_g & "ordforn_data") = 0

                End If

                If pp_modelli_col.flag_qta_ordc_data = "S" Then

                    DB_DataReaderClose(Dr_Sel_Qta_Ordc_Data)
                    DB_CommandParametersReset(Cmd_Sel_Qta_Ordc_Data)
                    Cmd_Sel_Qta_Ordc_Data.Parameters.Item("cod_art").Value = Getv(DB_Dsv(data_row_agg("cod_art"), ""))
                    Cmd_Sel_Qta_Ordc_Data.Parameters.Item("data").Value = CDate(Lista_Date(0, i_g))
                    DB_DataReaderExecute(Dr_Sel_Qta_Ordc_Data, Cmd_Sel_Qta_Ordc_Data)

                    If Dr_Sel_Qta_Ordc_Data.Read Then

                        data_row_agg(des_i_g & "qta_ordc_data") = DB_Dsv(Dr_Sel_Qta_Ordc_Data("qta"), 0)

                    Else

                        data_row_agg(des_i_g & "qta_ordc_data") = 0

                    End If

                    DB_DataReaderClose(Dr_Sel_Qta_Ordc_Data)

                Else

                    'data_row_agg(des_i_g & "qta_ordc_data") = 0

                End If

                If pp_modelli_col.flag_qta_prod_data = "S" Then

                    DB_DataReaderClose(Dr_Sel_Qta_Prod_Data)
                    DB_CommandParametersReset(Cmd_Sel_Qta_Prod_Data)
                    Cmd_Sel_Qta_Prod_Data.Parameters.Item("cod_art").Value = Getv(DB_Dsv(data_row_agg("cod_art"), ""))
                    Cmd_Sel_Qta_Prod_Data.Parameters.Item("data").Value = CDate(Lista_Date(0, i_g))
                    DB_DataReaderExecute(Dr_Sel_Qta_Prod_Data, Cmd_Sel_Qta_Prod_Data)

                    If Dr_Sel_Qta_Prod_Data.Read Then

                        data_row_agg(des_i_g & "qta_prod_data") = DB_Dsv(Dr_Sel_Qta_Prod_Data("qta"), 0)

                    Else

                        data_row_agg(des_i_g & "qta_prod_data") = 0

                    End If

                    DB_DataReaderClose(Dr_Sel_Qta_Prod_Data)

                Else

                    'data_row_agg(des_i_g & "qta_prod_data") = 0

                End If

                If pp_modelli_col.flag_qta_pora_data = "S" Then

                    DB_DataReaderClose(Dr_Sel_Qta_Pora_Data)
                    DB_CommandParametersReset(Cmd_Sel_Qta_Pora_Data)
                    Cmd_Sel_Qta_Pora_Data.Parameters.Item("cod_art").Value = Getv(DB_Dsv(data_row_agg("cod_art"), ""))
                    Cmd_Sel_Qta_Pora_Data.Parameters.Item("data").Value = CDate(Lista_Date(0, i_g))
                    If Getv(cod_dep) <> "" Then
                        Cmd_Sel_Qta_Pora_Data.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                    End If
                    DB_DataReaderExecute(Dr_Sel_Qta_Pora_Data, Cmd_Sel_Qta_Pora_Data)

                    If Dr_Sel_Qta_Pora_Data.Read Then

                        data_row_agg(des_i_g & "qta_pian_ora_data") = DB_Dsv(Dr_Sel_Qta_Pora_Data("qta"), 0)

                        If Object_Val(data_row_agg(des_i_g & "qta_pian_ora_data")) > 0 Then
                            l_pian_ora_data.Add(Getv(Lista_Date(0, i_g)))
                        End If

                    Else

                        data_row_agg(des_i_g & "qta_pian_ora_data") = 0

                    End If

                    DB_DataReaderClose(Dr_Sel_Qta_Pora_Data)

                End If

            Next

            'la giacenza finale, essendo un progressivo, è sempre uguale alla giacenza dell'ultima data visualizzata
            data_row_agg("gia_fin") = data_row_agg(pref_cmp & "gia_data")
            data_row_agg("qta_ordc_fin") += qta_ordc
            data_row_agg("ordforn_fin") += qta_ordforn

            'lettura dalla tabella pp_pianiprod_det dei pianificati da ordine
            DB_DataReaderClose(dr_sel_id_pp_pianipord_det)

            qdf_sel_id_pp_pianipord_det.Parameters.Item("id_pianiprod").Value = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("id"))
            qdf_sel_id_pp_pianipord_det.Parameters.Item("nr_riga_pianiprod").Value = DB_Dsv(dt_pp_pianiprod.Rows(i_d).Item("nr_riga"))
            If Getv(cod_dep) <> "" Then
                qdf_sel_id_pp_pianipord_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
            End If
            DB_DataReaderExecute(dr_sel_id_pp_pianipord_det, qdf_sel_id_pp_pianipord_det)

            While dr_sel_id_pp_pianipord_det.Read

                data_row_agg(pref_cmp & "qta_pian_ord_data") = Object_Val(data_row_agg(pref_cmp & "qta_pian_ord_data")) + Object_Val(DB_Dsv(dr_sel_id_pp_pianipord_det("qta_pian"), 0))

            End While

            DB_DataReaderClose(dr_sel_id_pp_pianipord_det)

            ' se non trovato record su datatable collegato alla gridview, viene aggiunto
            If trovato_record = False Then
                dt_piano.Rows.Add(data_row_agg)
            End If

        Next i_d

        If nuovo_inserimento Then DB_DataTableClose(dt_piano_old)

        For Each key As String In dct_durata.Keys
            GridView.Columns(key).ToolTip = GridView.Columns(key).Caption & vbCrLf & "DURATA TOTALE: " & dct_durata.Item(key).ToString
        Next

        DB_DataTableClose(dt_pp_pianiprod)
        'DB_DataAdapterClose(da_pp_pianiprod)

        If Not GridView Is Nothing Then
            GridView.BestFitColumns()

            Reimposta_ColWidth_Qta(GridView, da_data, a_data)
        End If

        If dt_piano.Rows.Count > 0 Then
            GridView.SelectRow(GridView.GetRowHandle(0))
        End If

    End Sub

    Private Function leggi_qta_pp_ordpartdet(cod_art1 As String, data1 As String) As Double

        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim sql As String = ""
        Dim valore As Double = 0
        Dim tipo_um1 As String = ""
        Dim s_qta As String = ""

        leggi_qta_pp_ordpartdet = 0

        If Field_Null(cod_art1) Or Not IsDate(data1) Then
            Exit Function
        End If

        ' nel giorno di riferimento viene letta la quantità fino al giorno prima. Se il giorno prima è del passato allora esce

        data1 = DateAdd(DateInterval.Day, -1, DateValue(data1))

        If DateValue(data1) <= Now Then
            Exit Function
        End If

        DB_LookUp("tabum.tipo_um", "anaart, tabum", "anaart.cod_art = '" & RTrim(cod_art1) & "' AND anaart.cod_um = tabum.cod_um", tipo_um1)

        Select Case tipo_um1
            Case "L" : s_qta = "pp_ordpartdet.qta_co"
            Case "C" : s_qta = "pp_ordpartdet.qta_cf"
            Case "P" : s_qta = "pp_ordpartdet.qta_pz"
            Case "K" : s_qta = "pp_ordpartdet.qta_pe"
            Case Else : s_qta = "pp_ordpartdet.qta_pe"
        End Select

        sql = ""
        sql = sql & "SELECT SUM(" & s_qta & ") " & vbCrLf
        sql = sql & "  FROM pp_ordpartdet, ordclidet, ordcli " & vbCrLf
        sql = sql & " WHERE pp_ordpartdet.anno_ord = ordclidet.anno_ord " & vbCrLf
        sql = sql & "   AND pp_ordpartdet.nr_ord   = ordclidet.nr_ord " & vbCrLf
        sql = sql & "   AND pp_ordpartdet.nr_riga  = ordclidet.nr_riga_ord " & vbCrLf
        sql = sql & "   AND ordclidet.anno_ord     = ordcli.anno_ord " & vbCrLf
        sql = sql & "   AND ordclidet.nr_ord       = ordcli.nr_ord " & vbCrLf
        sql = sql & "   AND NVL(ordcli.data_spedizione, ordclidet.data_cons) <= '" & Getv(data1) & "' " & vbCrLf
        sql = sql & "   AND NVL((SELECT COUNT(*) " & vbCrLf
        sql = sql & "              FROM pp_giacepar " & vbCrLf
        sql = sql & "             WHERE pp_giacepar.anno_partita = pp_ordpartdet.anno_partita " & vbCrLf
        sql = sql & "               AND pp_giacepar.nr_partita   = pp_ordpartdet.nr_partita " & vbCrLf
        sql = sql & "               AND pp_giacepar.cod_dep      = ordcli.cod_dep " & vbCrLf
        sql = sql & "               AND pp_giacepar.cod_mag      = ordclidet.cod_mag " & vbCrLf
        If sql_deposito_magazzino <> "" Then
            sql = sql & "           AND " & sql_deposito_magazzino.Replace("movmag", "pp_giacepar") & vbCrLf
        End If
        sql = sql & "               AND pp_giacepar.cod_art      = '" & RTrim(cod_art1) & "'), 0) > 0 " & vbCrLf

        Cmd = DB_CommandCreate(sql)
        DB_DataReaderExecute(Dr, Cmd)

        If Dr.Read Then
            valore = DB_Dsv(Dr.Item(0), 0)
        End If

        DB_DataReaderClose(Dr, Cmd)

        If valore <> 0 Then
            leggi_qta_pp_ordpartdet = valore
        End If

    End Function

    Private Sub Copia_Dati_Piano(ByVal da_data As Object, ByVal a_data As Object)

        Dim max_giorni_prod_ant As Integer


        'Copia dei dati della tabella pp_pianiprod in una tabella temporanea in modo tale che in fase di salvataggio si possano avere i dati come erano prima di qualsiasi altra modifica
        'I dati da copiare sono quelli delle date a video ma in più come limite inferiore viene presa una data che corrisponde a N giorni di anticipo. Questi N giorni di anticipo sono il
        'massimo numero di giorni di anticipo letti dall'anagrafica articoli. Oltre a quelli, vengono aggiunti altri 7 giorni di margine per possibili festività o altro.

        DB_LookUp("MAX(giorni_prod_ant)", "anaart", , max_giorni_prod_ant)
        da_data_copia = Getv(da_data)
        da_data_copia = DateAdd(DateInterval.Day, -1 * (max_giorni_prod_ant + 7), da_data_copia)
        a_data_copia = Getv(a_data)

        Sql = ""
        sql = sql & "DELETE FROM " & TabTemp_pp_pianiprod_old
        DB_SqlExecute(sql)

        sql = ""
        sql = sql & "INSERT INTO " & TabTemp_pp_pianiprod_old & vbCrLf
        sql = sql & "SELECT * " & vbCrLf
        sql = sql & "  FROM pp_pianiprod " & vbCrLf
        sql = sql & " WHERE pp_pianiprod.data_piano      >= '" & DB_Sql_Date(da_data_copia) & "'" & vbCrLf
        sql = sql & "   AND pp_pianiprod.data_piano      <= '" & DB_Sql_Date(a_data_copia) & "'" & vbCrLf
        If Getv(cod_dep) <> "" Then
            Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "'" & vbCrLf
        End If

        DB_SqlExecute(sql)

        If azienda_agg.f_salva_pian_prod = "S" Then
            sql = ""
            sql = sql & "DELETE FROM " & dbtempname_pianiprod_old
            DB_SqlExecute(sql)
        End If

        min_data_prod = ""
        max_data_prod = ""

        If azienda_agg.flag_qta_pian_prod = "S" Then
            min_data_prod = da_data_copia
            max_data_prod = a_data_copia
        End If


    End Sub

    Private Sub Leggi_Pianificato_Impegnato(ByVal tipo_art_prod As String, ByVal cod_art As String, ByVal da_data As Object, ByVal a_data As Object, _
                                      ByRef qta_pian As Double, ByRef qta_pian_co As Double, ByRef qta_pian_cf As Double, ByRef qta_pian_pe As Double, ByRef qta_pian_pz As Double, _
                                      ByRef qta_impr As Double, ByRef qta_impr_co As Double, ByRef qta_impr_cf As Double, ByRef qta_impr_pe As Double, ByRef qta_impr_pz As Double)

        ' per la quantita pianificata
        qta_pian = 0
        qta_pian_co = 0
        qta_pian_cf = 0
        qta_pian_pe = 0
        qta_pian_pz = 0

        DB_DataReaderClose(dr_pp_pianiprod_pian_prec)

        qdf_pp_pianiprod_pian_prec.Parameters("tipo_art_prod").Value = tipo_art_prod
        qdf_pp_pianiprod_pian_prec.Parameters("cod_art_pian").Value = cod_art
        qdf_pp_pianiprod_pian_prec.Parameters("data_piano").Value = Getv(da_data)
        qdf_pp_pianiprod_pian_prec.Parameters("data_piano2").Value = Getv(a_data)
        If Getv(cod_dep) <> "" Then
            qdf_pp_pianiprod_pian_prec.Parameters("cod_dep").Value = Getv(cod_dep)
        End If

        qdf_pp_pianiprod_pian_prec.Transaction = DB_Transaction
        dr_pp_pianiprod_pian_prec = qdf_pp_pianiprod_pian_prec.ExecuteReader

        If dr_pp_pianiprod_pian_prec.HasRows Then

            If dr_pp_pianiprod_pian_prec.Read Then
                qta_pian = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_pian_prec("qta_pian"), 0)), 3)
                qta_pian_co = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_pian_prec("qta_pian_co"), 0)), 3)
                qta_pian_cf = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_pian_prec("qta_pian_cf"), 0)), 3)
                qta_pian_pe = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_pian_prec("qta_pian_pe"), 0)), 3)
                qta_pian_pz = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_pian_prec("qta_pian_pz"), 0)), 3)
            End If

        End If

        DB_DataReaderClose(dr_pp_pianiprod_pian_prec)

        ' per la quantita impegnata per produzione
        qta_impr = 0
        qta_impr_co = 0
        qta_impr_cf = 0
        qta_impr_pe = 0
        qta_impr_pz = 0

        DB_DataReaderClose(dr_pp_pianiprod_impr_prec)

        qdf_pp_pianiprod_impr_prec.Parameters("tipo_art_prod").Value = tipo_art_prod
        qdf_pp_pianiprod_impr_prec.Parameters("cod_art_pian").Value = cod_art
        qdf_pp_pianiprod_impr_prec.Parameters("data_impr").Value = Getv(da_data)
        qdf_pp_pianiprod_impr_prec.Parameters("data_impr2").Value = Getv(a_data)
        If Getv(cod_dep) <> "" Then
            qdf_pp_pianiprod_impr_prec.Parameters("cod_dep").Value = Getv(cod_dep)
        End If

        qdf_pp_pianiprod_impr_prec.Transaction = DB_Transaction
        dr_pp_pianiprod_impr_prec = qdf_pp_pianiprod_impr_prec.ExecuteReader

        If dr_pp_pianiprod_impr_prec.HasRows Then

            If dr_pp_pianiprod_impr_prec.Read Then
                qta_impr = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_impr_prec("qta_impr"), 0)), 3)
                qta_impr_co = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_impr_prec("qta_impr_co"), 0)), 3)
                qta_impr_cf = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_impr_prec("qta_impr_cf"), 0)), 3)
                qta_impr_pe = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_impr_prec("qta_impr_pe"), 0)), 3)
                qta_impr_pz = Math.Round(CDbl(DB_Dsv(dr_pp_pianiprod_impr_prec("qta_impr_pz"), 0)), 3)
            End If

        End If

        DB_DataReaderClose(dr_pp_pianiprod_impr_prec)

    End Sub


    Public Function Leggi_Giacenza(ByVal tipo_giacenza As String, ByVal flag_periodo_passato As Boolean, ByVal tipo_art_prod As String, ByVal da_data As Object, ByVal cod_art As Object, ByVal sql_giac As String, ByVal flag_impr As String) As Double

        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing

        Dim giace As Double = 0

        Try
            Leggi_Giacenza = 0

            Select Case tipo_giacenza

                'Per il calcolo della giacenza INIZIALE

                Case "ATT"

                    If azienda_agg.tipo_gia_pian_prod <> "S" Then

                        If flag_periodo_passato = False Then
                            '
                            ' Estrazione Periodo Attuale
                            '
                            If azienda_agg.flag_pp_giacepar = "S" Then
                                Sql = ""
                                Sql = Sql & "SELECT SUM(DECODE(tabum.tipo_um, 'L', pp_giacepar.esistenza_att_co, 'C', pp_giacepar.esistenza_att_cf, 'P', pp_giacepar.esistenza_att_pz, 'K', pp_giacepar.esistenza_att_pe)) AS giace " & vbCrLf
                                Sql = Sql & "  FROM pp_giacepar, anaart, tabum " & vbCrLf
                                Sql = Sql & " WHERE pp_giacepar.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                                Sql = Sql & "   AND pp_giacepar.cod_art = anaart.cod_art " & vbCrLf
                                Sql = Sql & "   AND anaart.cod_um = tabum.cod_um " & vbCrLf
                                If sql_giac <> "" Then
                                    Sql = Sql & "   AND " & Replace(sql_giac, "movmag.", "pp_giacepar.")
                                End If
                            Else
                                Sql = ""
                                Sql = Sql & "SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS giace " & vbCrLf
                                Sql = Sql & "  FROM movmag, anaart, causmag, tabum " & vbCrLf
                                Sql = Sql & " WHERE movmag.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                                Sql = Sql & "   AND movmag.data_mov <= '" & DB_Sql_Date(Now) & "' " & vbCrLf
                                Sql = Sql & "   AND anaart.cod_art = movmag.cod_art " & vbCrLf
                                Sql = Sql & "   AND tabum.cod_um = anaart.cod_um " & vbCrLf
                                Sql = Sql & "   AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf
                                If sql_giac <> "" Then
                                    Sql = Sql & "   AND " & sql_giac
                                End If
                            End If
                        Else
                            '
                            ' Estrazione Periodo Passato
                            '
                            Sql = ""
                            Sql = Sql & "SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS giace " & vbCrLf
                            Sql = Sql & "  FROM movmag, anaart, causmag, tabum " & vbCrLf
                            Sql = Sql & " WHERE movmag.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                            Sql = Sql & "   AND movmag.data_mov <= '" & DB_Sql_Date(da_data) & "' " & vbCrLf
                            Sql = Sql & "   AND anaart.cod_art = movmag.cod_art " & vbCrLf
                            Sql = Sql & "   AND tabum.cod_um = anaart.cod_um " & vbCrLf
                            Sql = Sql & "   AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf
                            If sql_giac <> "" Then
                                Sql = Sql & "   AND " & sql_giac
                            End If
                        End If
                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    Else

                        'Giacenza da magazzino automatizzato (ma deve essere presa anche quella contabile da certi depositi / magazzini o per certi
                        'articoli


                        '1) Aggiornamento della giacenza per la parte del magazzino contabile (articoli, depositi e magazzini non gestiti con magazzino automatizzato)
                        Sql = ""
                        Sql = Sql & "    SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS giace " & vbCrLf
                        Sql = Sql & "     FROM movmag, anaart, causmag, tabum " & vbCrLf
                        Sql = Sql & "     WHERE movmag.cod_art = '" & Getv(cod_art) & "'" & vbCrLf

                        If flag_periodo_passato = False Then
                            Sql = Sql & "       AND movmag.data_mov < '" & DB_Sql_Date(Now) & "' " & vbCrLf
                        Else
                            Sql = Sql & "       AND movmag.data_mov <= '" & DB_Sql_Date(da_data) & "' " & vbCrLf
                        End If

                        Sql = Sql & "       AND anaart.cod_art = movmag.cod_art " & vbCrLf
                        Sql = Sql & "       AND tabum.cod_um = anaart.cod_um " & vbCrLf
                        Sql = Sql & "       AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf

                        If sql_giac <> "" Then
                            Sql = Sql & "  AND " & sql_giac
                        End If

                        Sql = Sql & "       AND (   (movmag.cod_dep not in (SELECT cod_depuni FROM tabdepaut)) " & vbCrLf
                        Sql = Sql & "            OR (movmag.cod_dep     in (SELECT cod_depuni FROM tabdepaut) AND movmag.cod_mag not in (SELECT cod_maguni FROM tabmagaut)) " & vbCrLf
                        Sql = Sql & "            OR (movmag.cod_dep     in (SELECT cod_depuni FROM tabdepaut) AND movmag.cod_mag     in (SELECT cod_maguni FROM tabmagaut) AND movmag.cod_art not in (SELECT DISTINCT cod_art FROM anaartma)) " & vbCrLf
                        Sql = Sql & "            ) " & vbCrLf
                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)


                        '2) Aggiornamento della giacenza per la parte del magazzino automatizzato
                        'TO DO CHIEDERE DELLA DATA
                        Sql = ""
                        Sql = Sql & "  SELECT SUM( DECODE(tipo_um, 'L', gia_co, 'C', gia_cf, 'P', gia_pz, 'K', gia_pe) ) AS giace" & vbCrLf
                        Sql = Sql & "     FROM mappal, anaart, tabum, tabdepaut, tabmagaut " & vbCrLf
                        Sql = Sql & "     WHERE mappal.cod_art = anaart.cod_art " & vbCrLf
                        Sql = Sql & "       AND tabum.cod_um = anaart.cod_um " & vbCrLf
                        Sql = Sql & "       AND mappal.cod_art = '" & Getv(cod_art) & "'" & vbCrLf

                        If sql_giac <> "" Then

                            sql_giac = sql_giac.Replace("movmag.cod_dep", "tabdepaut.cod_depuni")
                            sql_giac = sql_giac.Replace("movmag.cod_mag", "tabmagaut.cod_maguni")

                            Sql = Sql & "  AND " & sql_giac
                        End If

                        Sql = Sql & "       AND tabdepaut.cod_dep = mappal.cod_dep " & vbCrLf
                        Sql = Sql & "       AND tabmagaut.cod_mag = mappal.cod_mag " & vbCrLf
                        Sql = Sql & "       AND (mappal.cod_dep in (SELECT cod_dep FROM tabdepaut) AND mappal.cod_mag in (SELECT cod_mag FROM tabmagaut) AND mappal.cod_art in (SELECT DISTINCT cod_art FROM anaartma)) " & vbCrLf
                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    End If

                    Leggi_Giacenza = giace

                Case "INI"

                    If azienda_agg.tipo_gia_pian_prod <> "S" Then

                        If flag_periodo_passato = False Then
                            '
                            ' Estrazione Periodo Attuale
                            '
                            If azienda_agg.flag_pp_giacepar = "S" Then
                                Sql = ""
                                Sql = Sql & "SELECT SUM(DECODE(tabum.tipo_um, 'L', pp_giacepar.esistenza_att_co, 'C', pp_giacepar.esistenza_att_cf, 'P', pp_giacepar.esistenza_att_pz, 'K', pp_giacepar.esistenza_att_pe)) AS giace " & vbCrLf
                                Sql = Sql & "  FROM pp_giacepar, anaart, tabum " & vbCrLf
                                Sql = Sql & " WHERE pp_giacepar.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                                Sql = Sql & "   AND pp_giacepar.cod_art = anaart.cod_art " & vbCrLf
                                Sql = Sql & "   AND anaart.cod_um = tabum.cod_um " & vbCrLf
                                If sql_giac <> "" Then
                                    Sql = Sql & "   AND " & Replace(sql_giac, "movmag.", "pp_giacepar.")
                                End If
                            Else
                                Sql = ""
                                Sql = Sql & "    SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS giace " & vbCrLf
                                Sql = Sql & "      FROM movmag, anaart, causmag, tabum " & vbCrLf
                                Sql = Sql & "     WHERE movmag.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                                Sql = Sql & "       AND movmag.data_mov < '" & DB_Sql_Date(Now) & "' " & vbCrLf
                                Sql = Sql & "       AND anaart.cod_art = movmag.cod_art " & vbCrLf
                                Sql = Sql & "       AND tabum.cod_um = anaart.cod_um " & vbCrLf
                                Sql = Sql & "       AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf
                                If sql_giac <> "" Then
                                    Sql = Sql & "       AND " & sql_giac
                                End If
                            End If
                        Else
                            '
                            ' Estrazione Periodo Passato
                            '
                            Sql = ""
                            Sql = Sql & "    SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS giace " & vbCrLf
                            Sql = Sql & "      FROM movmag, anaart, causmag, tabum " & vbCrLf
                            Sql = Sql & "     WHERE movmag.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                            Sql = Sql & "       AND movmag.data_mov <= '" & DB_Sql_Date(da_data) & "' " & vbCrLf
                            Sql = Sql & "       AND anaart.cod_art = movmag.cod_art " & vbCrLf
                            Sql = Sql & "       AND tabum.cod_um = anaart.cod_um " & vbCrLf
                            Sql = Sql & "       AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf
                            If sql_giac <> "" Then
                                Sql = Sql & "       AND " & sql_giac
                            End If
                        End If
                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    Else

                        'Giacenza da magazzino automatizzato (ma deve essere presa anche quella contabile da certi depositi / magazzini o per certi
                        'articoli


                        '1) Aggiornamento della giacenza per la parte del magazzino contabile (articoli, depositi e magazzini non gestiti con magazzino automatizzato)
                        Sql = ""
                        Sql = Sql & "    SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS giace " & vbCrLf
                        Sql = Sql & "     FROM movmag, anaart, causmag, tabum " & vbCrLf
                        Sql = Sql & "     WHERE movmag.cod_art = '" & Getv(cod_art) & "'" & vbCrLf

                        If flag_periodo_passato = False Then
                            Sql = Sql & "       AND movmag.data_mov < '" & DB_Sql_Date(Now) & "' " & vbCrLf
                        Else
                            Sql = Sql & "       AND movmag.data_mov <= '" & DB_Sql_Date(da_data) & "' " & vbCrLf
                        End If

                        Sql = Sql & "       AND anaart.cod_art = movmag.cod_art " & vbCrLf
                        Sql = Sql & "       AND tabum.cod_um = anaart.cod_um " & vbCrLf
                        Sql = Sql & "       AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf

                        If sql_giac <> "" Then
                            Sql = Sql & "  AND " & sql_giac
                        End If

                        Sql = Sql & "       AND (   (movmag.cod_dep not in (SELECT cod_depuni FROM tabdepaut)) " & vbCrLf
                        Sql = Sql & "            OR (movmag.cod_dep     in (SELECT cod_depuni FROM tabdepaut) AND movmag.cod_mag not in (SELECT cod_maguni FROM tabmagaut)) " & vbCrLf
                        Sql = Sql & "            OR (movmag.cod_dep     in (SELECT cod_depuni FROM tabdepaut) AND movmag.cod_mag     in (SELECT cod_maguni FROM tabmagaut) AND movmag.cod_art not in (SELECT DISTINCT cod_art FROM anaartma)) " & vbCrLf
                        Sql = Sql & "            ) " & vbCrLf
                        DB_DataReaderClose(Dr, Cmd)

                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)


                        '2) Aggiornamento della giacenza per la parte del magazzino automatizzato
                        'TO DO CHIEDERE DELLA DATA
                        Sql = ""
                        Sql = Sql & "  SELECT SUM( DECODE(tipo_um, 'L', gia_co, 'C', gia_cf, 'P', gia_pz, 'K', gia_pe) ) AS giace" & vbCrLf
                        Sql = Sql & "     FROM mappal, anaart, tabum, tabdepaut, tabmagaut " & vbCrLf
                        Sql = Sql & "     WHERE mappal.cod_art = anaart.cod_art " & vbCrLf
                        Sql = Sql & "       AND tabum.cod_um = anaart.cod_um " & vbCrLf
                        Sql = Sql & "       AND mappal.cod_art = '" & Getv(cod_art) & "'" & vbCrLf

                        If sql_giac <> "" Then

                            sql_giac = sql_giac.Replace("movmag.cod_dep", "tabdepaut.cod_depuni")
                            sql_giac = sql_giac.Replace("movmag.cod_mag", "tabmagaut.cod_maguni")

                            Sql = Sql & "  AND " & sql_giac
                        End If

                        Sql = Sql & "       AND tabdepaut.cod_dep = mappal.cod_dep " & vbCrLf
                        Sql = Sql & "       AND tabmagaut.cod_mag = mappal.cod_mag " & vbCrLf
                        Sql = Sql & "       AND (mappal.cod_dep in (SELECT cod_dep FROM tabdepaut) AND mappal.cod_mag in (SELECT cod_mag FROM tabmagaut) AND mappal.cod_art in (SELECT DISTINCT cod_art FROM anaartma)) " & vbCrLf
                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    End If


                    'a questo punto ho la giacenza reale alla data corrente - 1
                    'da adesso, fino alla data passata alla funzione - 1 calcolo giacenza da pp_pianiprod

                    If flag_periodo_passato = False Then

                        Sql = ""
                        Sql = Sql & "  SELECT SUM(qta_pian) AS giace " & vbCrLf
                        Sql = Sql & "    FROM pp_pianiprod " & vbCrLf
                        Sql = Sql & "   WHERE data_piano < '" & DB_Sql_Date(da_data) & "'" & vbCrLf
                        Sql = Sql & "     AND data_piano >= '" & DB_Sql_Date(Now) & "'" & vbCrLf
                        Sql = Sql & "     AND cod_art_pian ='" & Getv(cod_art) & "'"
                        If Getv(cod_dep) <> "" Then
                            Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                        End If
                        DB_DataReaderClose(Dr, Cmd)
                        Cmd = DB_CommandCreate(Sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.Read Then
                            giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                        'ora ho il totale della qta pianificata, devo calcolare l'impeganto produzione con la data determinata dal flag

                        ' 03/12/2018 --> Carlesso - Lupi --> commentato perché non ha senso sommare la qta componenti
                        ' In Novafunghi riporta giacenze errate.
                        'Sql = ""
                        'Sql = Sql & "  SELECT SUM(qta_comp) AS giace " & vbCrLf
                        'Sql = Sql & "    FROM pp_pianiprodrel " & vbCrLf

                        'If flag_impr = "P" Then
                        '    Sql = Sql & "   WHERE data_padre < '" & DB_Sql_Date(da_data) & "'" & vbCrLf
                        'Else
                        '    Sql = Sql & "   WHERE data_comp < '" & DB_Sql_Date(da_data) & "'" & vbCrLf
                        'End If

                        'Sql = Sql & "     AND art_comp ='" & Getv(cod_art) & "'"
                        'DB_DataReaderClose(Dr, Cmd)
                        'Cmd = DB_CommandCreate(Sql)
                        'DB_DataReaderExecute(Dr, Cmd)

                        'If Dr.Read Then
                        '    giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                        'End If

                        'DB_DataReaderClose(Dr, Cmd)

                    End If

                    Leggi_Giacenza = giace

                    'per il calcolo della giacenza alla data

                Case "DATA"

                    Sql = ""
                    Sql = Sql & "  SELECT SUM(qta_pian) AS giace " & vbCrLf
                    Sql = Sql & "    FROM pp_pianiprod " & vbCrLf
                    Sql = Sql & "   WHERE data_piano <= '" & DB_Sql_Date(da_data) & "'" & vbCrLf
                    Sql = Sql & "     AND data_piano >= '" & DB_Sql_Date(Now) & "'" & vbCrLf
                    Sql = Sql & "     AND cod_art_pian ='" & Getv(cod_art) & "'"
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql)
                    DB_DataReaderExecute(Dr, Cmd)

                    If Dr.Read Then
                        giace += Object_Val(DB_Dsv(Dr("giace"), 0))
                    End If

                    DB_DataReaderClose(Dr, Cmd)

                    'ora ho il totale della qta pianificata, devo calcolare l'impeganto produzione con la data definita dal flag

                    Sql = ""
                    Sql = Sql & "  SELECT SUM(qta_comp) AS giace " & vbCrLf
                    Sql = Sql & "    FROM pp_pianiprodrel " & vbCrLf

                    If flag_impr = "P" Then
                        Sql = Sql & "   WHERE data_padre < '" & DB_Sql_Date(da_data) & "'" & vbCrLf
                    Else
                        Sql = Sql & "   WHERE data_comp < '" & DB_Sql_Date(da_data) & "'" & vbCrLf
                    End If
                    Sql = Sql & "     AND art_comp ='" & Getv(cod_art) & "'"
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If

                    DB_DataReaderClose(Dr, Cmd)
                    Cmd = DB_CommandCreate(Sql)
                    DB_DataReaderExecute(Dr, Cmd)

                    If Dr.Read Then
                        giace -= Object_Val(DB_Dsv(Dr("giace"), 0))
                    End If

                    DB_DataReaderClose(Dr, Cmd)

                    Leggi_Giacenza = giace

            End Select

        Catch ex As Exception

            Leggi_Giacenza = 0
            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function

    Private Function Leggi_Ordini_Clienti(ByVal cod_art As Object, ByVal data_piano As Object, ByVal sql_depmag As String) As Double

        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing

        Leggi_Ordini_Clienti = 0

        sql = ""
        sql = sql & "   SELECT SUM(ordclidet.qta_in_sped) AS qta " & vbCrLf
        sql = sql & "     FROM ordclidet , ordcli " & vbCrLf
        sql = sql & "    WHERE ordclidet.anno_ord = ordcli.anno_ord " & vbCrLf
        sql = sql & "      AND ordclidet.nr_ord   = ordcli.nr_ord " & vbCrLf

        If sql_depmag <> "" Then
            sql = sql & " AND " & sql_depmag.Replace("movmag", "ordclidet") & vbCrLf
        End If

        sql = sql & "     AND ordclidet.cod_art  = '" & Getv(cod_art) & "'" & vbCrLf
        sql = sql & "     AND ordclidet.flag_evaso = 'N' " & vbCrLf
        sql = sql & "     AND ordclidet.tipo_riga  = 'N' " & vbCrLf
        sql = sql & "     AND qta_in_sped IS NOT NULL " & vbCrLf
        sql = sql & "     AND NVL(ordcli.data_spedizione, ordclidet.data_cons) < '" & Getv(data_piano) & "'" & vbCrLf

        'sql = sql & "     AND NVL(ordcli.data_spedizione, ordclidet.data_cons) >= TODAY " & vbCrLf

        cmd = DB_CommandCreate(sql)
        DB_DataReaderExecute(dr, cmd)

        If dr.Read Then
            Leggi_Ordini_Clienti = Object_Val(DB_Dsv(dr("qta"), 0))
        End If

        DB_DataReaderClose(dr, cmd)


    End Function

    Private Function Leggi_Ordini_Fornitore(ByVal tipo_ordine As String, ByVal cod_art As Object, ByVal data_piano As Object, Optional ByRef Data_Cons As Object = Nothing, Optional ByVal Cod_Dep_Lista As String = "") As Double
        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing

        Try

            Leggi_Ordini_Fornitore = 0

            Select Case tipo_ordine

                Case "INI"
                    Sql = ""
                    Sql = Sql & "   SELECT SUM(NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0)) AS qta " & vbCrLf
                    Sql = Sql & "     FROM ordforndet " & vbCrLf
                    Sql = Sql & "    WHERE ordforndet.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                    Sql = Sql & "      AND ordforndet.data_cons < '" & DB_Sql_Date(data_piano) & "'" & vbCrLf
                    Sql = Sql & "      AND NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0) > 0 " & vbCrLf
                    Sql = Sql & "      AND ordforndet.flag_evasa = 'N' " & vbCrLf ' per evitare di testare ordini creati ed evasi lo stesso giorno

                    If Cod_Dep_Lista <> "" Then
                        Sql = Sql & " AND cod_dep  IN " & Cod_Dep_Lista & vbCrLf
                    End If

                Case "DATA"
                    Sql = ""
                    Sql = Sql & "   SELECT SUM(NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0)) AS qta " & vbCrLf
                    Sql = Sql & "     FROM ordforndet " & vbCrLf
                    Sql = Sql & "    WHERE ordforndet.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                    Sql = Sql & "      AND ordforndet.data_cons = '" & DB_Sql_Date(data_piano) & "'" & vbCrLf
                    Sql = Sql & "      AND NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0) > 0 "
                    'sql = sql & "      AND ordforndet.flag_evasa = 'N' " & vbCrLf ' >> per i periodi successivi non va testato

                    If Cod_Dep_Lista <> "" Then
                        Sql = Sql & " AND cod_dep  IN " & Cod_Dep_Lista & vbCrLf
                    End If

                Case "ATT"
                    Sql = ""
                    Sql = Sql & "   SELECT FIRST 1 SUM(NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0)) AS qta, ordforndet.data_cons " & vbCrLf
                    Sql = Sql & "     FROM ordforndet " & vbCrLf
                    Sql = Sql & "    WHERE ordforndet.cod_art = '" & Getv(cod_art) & "'" & vbCrLf
                    Sql = Sql & "      AND ordforndet.data_cons > '" & DB_Sql_Date(data_piano) & "'" & vbCrLf
                    Sql = Sql & "      AND NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0) > 0 " & vbCrLf

                    If Cod_Dep_Lista <> "" Then
                        Sql = Sql & " AND cod_dep  IN " & Cod_Dep_Lista & vbCrLf
                    End If

                    Sql = Sql & " GROUP BY ordforndet.data_cons " & vbCrLf
                    Sql = Sql & " ORDER BY ordforndet.data_cons " & vbCrLf

            End Select

            DB_DataReaderClose(dr, cmd)
            cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(dr, cmd)

            If dr.Read Then
                Leggi_Ordini_Fornitore = Object_Val(DB_Dsv(dr("qta"), 0))
                If tipo_ordine = "ATT" Then
                    Setv(Data_Cons, DB_Dsv(dr("data_cons")))
                End If
            End If

            DB_DataReaderClose(dr, cmd)

        Catch ex As Exception

            Leggi_Ordini_Fornitore = 0
            MsgErr(ex)

        Finally

            DB_DataReaderClose(dr, cmd)

        End Try
    End Function

    Private Function Leggi_Impegnato_Produzione(ByVal Cod_Art As Object, ByVal Data_Piano As Object, Optional ByVal Cod_Dep_Lista As String = "") As Double
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing

        Try

            Leggi_Impegnato_Produzione = 0

            Sql = ""
            Sql = Sql & "   SELECT SUM(NVL(qta_impr,0)) AS qta " & vbCrLf
            Sql = Sql & "     FROM pp_pianiprod " & vbCrLf
            Sql = Sql & "    WHERE cod_art_pian = '" & Getv(Cod_Art) & "'" & vbCrLf
            Sql = Sql & "      AND data_piano  >= '" & DB_Sql_Date(Data_Piano) & "'" & vbCrLf
            If Cod_Dep_Lista <> "" Then
                Sql = Sql & " AND cod_dep  IN " & Cod_Dep_Lista & vbCrLf
            End If

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Leggi_Impegnato_Produzione = Object_Val(DB_Dsv(Dr("qta"), 0))
            End If

            DB_DataReaderClose(Dr, Cmd)

        Catch ex As Exception

            Leggi_Impegnato_Produzione = 0
            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function

    Private Function Leggi_Impegnato_Articolo(ByVal Cod_Art As Object, ByVal Cod_Art_Padre As Object) As Double
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing

        Try

            Leggi_Impegnato_Articolo = 0

            Sql = ""
            Sql = Sql & "   SELECT SUM(NVL(qta,0)) AS qta " & vbCrLf
            Sql = Sql & "     FROM " & Tab_Espl_Distinte & vbCrLf
            Sql = Sql & "    WHERE cod_art = '" & Getv(Cod_Art) & "'" & vbCrLf
            Sql = Sql & "      AND cod_art_padre <> '" & Getv(Cod_Art_Padre) & "'" & vbCrLf

            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            If Dr.Read Then
                Leggi_Impegnato_Articolo = Object_Val(DB_Dsv(Dr("qta"), 0))
            End If

            DB_DataReaderClose(Dr, Cmd)

        Catch ex As Exception

            Leggi_Impegnato_Articolo = 0
            MsgErr(ex)

        Finally

            DB_DataReaderClose(Dr, Cmd)

        End Try

    End Function

    ' ritorna l'indice del vettore delle date, se non lo trova restituisce -1
    Function Cerca_Lista_Date_Index(data_cerca As String) As Long

        For i = 0 To Lista_Date.GetUpperBound(1) - 1
            If Trim(data_cerca) = Trim(Lista_Date(0, i).ToString) Then
                Cerca_Lista_Date_Index = i
                Exit Function
            End If
        Next i

        Cerca_Lista_Date_Index = -1

        Exit Function

    End Function

    ' ritorna il prefisso del vettore delle date ( "0001_", "0002_" )
    Function Cerca_Lista_Date_Prefisso(data_cerca As String) As String
        Dim i_cerca As Long

        Cerca_Lista_Date_Prefisso = ""

        i_cerca = Cerca_Lista_Date_Index(data_cerca)
        If i_cerca <> -1 Then
            Cerca_Lista_Date_Prefisso = Format(i_cerca, "0000") & "_"
        End If

    End Function

    ' ritorna l'indice del vettore delle date, se non lo trova restituisce -1
    Function Cerca_Lista_Date_Col_View(data_cerca As String) As DevExpress.XtraGrid.Columns.GridColumn
        Dim col As DevExpress.XtraGrid.Columns.GridColumn = Nothing
        Dim str_col As String = ""
        Dim data_sel As String = ""
        Dim i_data As Long

        For i = 0 To grid_piano_view.Columns.Count

            col = grid_piano_view.Columns(i)
            str_col = Mid(col.FieldName, 1, 5)

            If Strings.Right(str_col, 1) = "_" And IsNumeric(Strings.Left(str_col, 4)) And col.Visible = True Then
                i_data = CLng(Strings.Left(str_col, 4))
                data_sel = Lista_Date(0, i_data)
                If Trim(data_cerca) = Trim(data_sel) Then
                    Cerca_Lista_Date_Col_View = col
                    Exit Function
                End If
            End If

        Next

        Cerca_Lista_Date_Col_View = Nothing

    End Function

    Private Sub grid_piano_view_CustomRowCellEdit(sender As Object, e As DevExpress.XtraGrid.Views.Grid.CustomRowCellEditEventArgs) Handles grid_piano_view.CustomRowCellEdit

        Dim data_piano As Object
        Dim col As GridColumn
        Dim data As Object

        col = e.Column
        data = col.Tag

        If dt_piano Is Nothing Then
            Exit Sub
        Else
            If dt_piano.Rows.Count <= 0 Then
                Exit Sub
            End If
        End If

        If e.Column.FieldName Like "*qta_pian_data" Then

            data_piano = e.Column.Tag

            If IsDate(data) Then


                If CDate(data) < Now.Date Or Esistono_Commesse(data_piano, dt_piano.Rows(e.RowHandle)("cod_art"), xx1) Then
                    If azienda_agg.flag_aggcomm_pp <> "S" Then
                        e.RepositoryItem.AllowFocused = False
                        e.RepositoryItem.ReadOnly = True
                    Else
                        e.RepositoryItem.AllowFocused = True
                        e.RepositoryItem.ReadOnly = False
                    End If
                Else
                    e.RepositoryItem.AllowFocused = True
                    e.RepositoryItem.ReadOnly = False
                End If

            End If

        End If

    End Sub

    Private Sub grid_piano_view_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grid_piano_view.PopupMenuShowing
        Dim View As DevExpress.XtraGrid.Views.Grid.GridView = Nothing
        Dim col As DevExpress.XtraGrid.Columns.GridColumn = Nothing
        Dim rowIndex As Long
        Dim str_col As String = ""
        Dim i_data As Long
        Dim des_i_g As String
        Dim cod_art As String = ""
        Dim data_sel As String = ""
        Dim menu1 As GridViewColumnMenu

        'Dim viewInfo As grid ViewInfoBase
        Dim baseHI As BaseHitInfo
        Dim gridHI As GridHitInfo
        Dim flag_festivo As Boolean
        Dim lista_righe_pian As String
        Dim vet_lista_righe_pian() As String

        Dim data_piano As Object

        View = DirectCast(sender, DevExpress.XtraGrid.Views.Grid.GridView)

        If Pp_Pianiprod_Bloccato = True Then
            Exit Sub
        End If

        If UCase(View.Name.ToString) = UCase("grid_piano_view") Then

            ' tasto destro su testata colonne o su dettaglio righe
            If e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Column Or e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Row Then

                If e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Column Then

                    menu1 = e.Menu
                    menu1.Items.Clear()

                    baseHI = View.CalcHitInfo(grid_piano.PointToClient(Cursor.Position))
                    gridHI = TryCast(baseHI, GridHitInfo)
                    col = gridHI.Column

                ElseIf e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Row Then

                    col = View.FocusedColumn

                End If

                flag_festivo = False
                If InStr(col.FieldName, "flag_festivo") >= 1 Then
                    flag_festivo = True
                End If

                'PER NON FARE ESPLOSIONI SUI MATERIA PRIMA
                'If Tipo_Art_Prod_Testata = "MP" Then Exit Sub

                data_piano = col.Tag

                If IsDate(data_piano) AndAlso CDate(data_piano) < Now.Date Then
                    Exit Sub
                End If

                str_col = Mid(col.FieldName, 1, 5)
                rowIndex_agg_prod = -1
                col_agg_prod = col
                last_column_edit = col

                If Strings.Right(str_col, 1) = "_" And IsNumeric(Strings.Left(str_col, 4)) Then

                    i_data = CLng(Strings.Left(str_col, 4))
                    data_sel = Lista_Date(0, i_data)
                    data_agg_prod = data_sel

                    If Tipo_Art_Prod_Testata <> "MP" Then

                        If flag_festivo = False Then

                            e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Aggiungere Produzione del " & data_sel, AddressOf Menu_Agg_Prod_Gen))
                            e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

                            If col.FieldName Like "*qta_pian_ord_data" Then
                                View.FocusedColumn = col
                                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Pianifica tutti gli ordini clienti del " & data_sel, AddressOf Menu_Pianifica_Tutto_Pian))
                                e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

                            ElseIf col.FieldName Like "*qta_impr_data" Then
                                View.FocusedColumn = col
                                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Pianifica tutte le quantità impegnate produzione " & data_sel, AddressOf Menu_Pianifica_Tutto_Impr))
                                e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

                            ElseIf col.FieldName Like "*qta_pian_data" Then
                                View.FocusedColumn = col
                                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Ripianifica + Salva la produzione", AddressOf Menu_Ripianifica_Tutto))
                                e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

                            End If


                            ' tasto destro su righe
                            If e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Row Then

                                Dim selection As Integer() = View.GetSelectedRows()

                                If Not selection Is Nothing Then

                                    rowIndex = selection(0)
                                    rowIndex_agg_prod = rowIndex

                                    cod_art = Getv(View.GetRowCellValue(rowIndex, "cod_art"))

                                    cod_art_agg_prod = cod_art
                                    des_art_agg_prod = Getv(View.GetRowCellValue(rowIndex, "des_art"))
                                    tipo_um_agg_prod = Getv(View.GetRowCellValue(rowIndex, "tipo_um"))

                                    ' to_do da rivedere perchè ci possono essere più righe per qta pianificate
                                    '       1 riga per ogni data, da pp_pianiprod?

                                    des_i_g = Format(i_data, "0000") & "_"
                                    des_i_g_agg = des_i_g

                                    id_pp_pianiprod_agg = Getv(DB_Dsv(View.GetRowCellValue(rowIndex, des_i_g & "id"), -1))
                                    lista_righe_pian = Getv(DB_Dsv(View.GetRowCellValue(rowIndex, des_i_g & "lista_righe_pian")))

                                    If lista_righe_pian <> "" AndAlso id_pp_pianiprod_agg <> -1 Then

                                        vet_lista_righe_pian = lista_righe_pian.Split("|")

                                        For i_r = 0 To UBound(vet_lista_righe_pian)

                                            If Trim(vet_lista_righe_pian(i_r)) <> "" Then
                                                nr_riga_pp_pianiprod_agg = vet_lista_righe_pian(i_r)
                                                Exit For
                                            End If

                                        Next i_r
                                    Else
                                        id_pp_pianiprod_agg = -1
                                        nr_riga_pp_pianiprod_agg = -1
                                    End If

                                    e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Aggiungere Produzione per Art. " & cod_art & " del " & data_sel, AddressOf Menu_Agg_Prod_Art))
                                    e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

                                    'se sono su impegnato produzione aggiungo menù per completamento qta

                                    If grid_piano_view.FocusedColumn.FieldName Like "*qta_impr_data" Then
                                        e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Funzione Completamento Quantità per Art. " & cod_art & " del " & data_sel, AddressOf Menu_Qta_Compl_Prod_Art))
                                        e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission
                                    ElseIf grid_piano_view.FocusedColumn.FieldName Like "*qta_pian_ord_data" Then
                                        e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Elimina Pianificazione Ordine per Art. " & cod_art & " del " & data_sel, AddressOf Menu_Elimina_Pian_Ord))
                                        e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission
                                    End If

                                    'e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Elimina Produzione per Art. " & cod_art & " del " & data_sel, AddressOf Menu_Del_Prod_Art))
                                    ' {da_data_pian, a_data_pian}
                                End If

                            End If

                        End If

                    End If

                    If flag_festivo = False Then
                        e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Cambia in Giorno Festivo", AddressOf Menu_Prod_Giorno_Festivo))
                        e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission
                    Else
                        e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Cambia in Giorno non Festivo", AddressOf Menu_Prod_Giorno_Feriale))
                        e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission
                    End If

                End If

            End If

        End If

    End Sub

    Private Sub Menu_Prod_Giorno_Festivo()
        Dim flag_presenti_articoli As Boolean

        Try

            ' controlli se presenti qta pianificate o impegnate in data

            flag_presenti_articoli = False

            If Ragg_Prod_Testata = "" Then

                DB_DataReaderClose(dr_pp_pianiprod_gendata)

                qdf_pp_pianiprod_gendata.Parameters.Item("data_piano").Value = DateValue(data_agg_prod)
                If Getv(cod_dep) <> "" Then
                    qdf_pp_pianiprod_gendata.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                End If

                qdf_pp_pianiprod_gendata.Transaction = DB_Transaction
                dr_pp_pianiprod_gendata = qdf_pp_pianiprod_gendata.ExecuteReader

                If dr_pp_pianiprod_gendata.HasRows Then

                    If dr_pp_pianiprod_gendata.Read Then
                        flag_presenti_articoli = True
                    End If

                End If

                DB_DataReaderClose(dr_pp_pianiprod_gendata)

            Else

                DB_DataReaderClose(dr_pp_pianiprod_raggdata)

                qdf_pp_pianiprod_raggdata.Parameters.Item("data_piano").Value = DateValue(data_agg_prod)
                qdf_pp_pianiprod_raggdata.Parameters.Item("ragg_prod").Value = Ragg_Prod_Testata
                If Getv(cod_dep) <> "" Then
                    qdf_pp_pianiprod_raggdata.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                End If
                qdf_pp_pianiprod_raggdata.Transaction = DB_Transaction
                dr_pp_pianiprod_raggdata = qdf_pp_pianiprod_raggdata.ExecuteReader

                If dr_pp_pianiprod_raggdata.HasRows Then

                    If dr_pp_pianiprod_raggdata.Read Then
                        flag_presenti_articoli = True
                    End If

                End If

                DB_DataReaderClose(dr_pp_pianiprod_raggdata)

            End If

            If flag_presenti_articoli = True Then
                XtraMessageBox.Show("Presenti Articoli Pianificati in questa data.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                Exit Sub
            End If

            f_pp_tabcaldata.Tipo_Ragg_Prod_Art_Sel_In = tipo_ragg_prod_art_sel.Text
            f_pp_tabcaldata.Tipo_Art_Prod_In = Tipo_Art_Prod_Testata
            f_pp_tabcaldata.Ragg_Prod_In = Ragg_Prod_Testata
            f_pp_tabcaldata.Data_Agg_Prod_In = data_agg_prod
            f_pp_tabcaldata.Flag_Festivo_In = False

            f_pp_tabcaldata.ShowDialog()
            f_pp_tabcaldata.Dispose()

            'Aggiorna_Giorno(Ragg_Prod_Testata, data_agg_prod, "F")

            Imposta_Grid_Piano(False, Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, da_data_pian, a_data_pian)

            grid_piano_view.FocusedRowHandle = 1
            If rowIndex_agg_prod <> -1 Then
                grid_piano_view.FocusedRowHandle = rowIndex_agg_prod
            End If
            grid_piano_view.FocusedColumn = Cerca_Lista_Date_Col_View(data_agg_prod)
            grid_piano_view.Focus()

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Sub

    Private Sub Menu_Prod_Giorno_Feriale()

        f_pp_tabcaldata.Tipo_Ragg_Prod_Art_Sel_In = tipo_ragg_prod_art_sel.Text
        f_pp_tabcaldata.Tipo_Art_Prod_In = Tipo_Art_Prod_Testata
        f_pp_tabcaldata.Ragg_Prod_In = Ragg_Prod_Testata
        f_pp_tabcaldata.Data_Agg_Prod_In = data_agg_prod
        f_pp_tabcaldata.Flag_Festivo_In = True

        f_pp_tabcaldata.ShowDialog()
        f_pp_tabcaldata.Dispose()

        'Aggiorna_Giorno(Ragg_Prod_Testata, data_agg_prod, "R")

        Imposta_Grid_Piano(False, Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, da_data_pian, a_data_pian)

        grid_piano_view.FocusedRowHandle = 1
        If rowIndex_agg_prod <> -1 Then
            grid_piano_view.FocusedRowHandle = rowIndex_agg_prod
        End If
        grid_piano_view.FocusedColumn = Cerca_Lista_Date_Col_View(data_agg_prod)

        grid_piano_view.Focus()

    End Sub


    ' aggiorna la data da feriale a festivo o viceversa
    ' se Tipo_Cambio = "R" il giorno deve diventare feriale
    ' se Tipo_Cambio = "F" il giorno deve diventare festivo

    Function Aggiorna_Giorno(ragg_prod As String, data_agg As String, Tipo_Cambio As String) As Boolean
        Dim flag_festivo_gioprod As Long
        Dim flag_festivo_gioprodsett As Long
        Dim Sql As String
        Dim NewRow As DataRow
        Dim da_det As DB2DataAdapter = Nothing
        Dim dt_det = New DataTable

        Aggiorna_Giorno = False

        DB_DataReaderClose(dr_pp_tabcaldatalin_coddata)

        qdf_pp_tabcaldatalin_coddata.Parameters.Item("tipo_art_prod_gio").Value = Tipo_Art_Prod_Testata
        If ragg_prod = "" Then
            qdf_pp_tabcaldatalin_coddata.Parameters.Item("ragg_prod_gio").Value = "***"
        Else
            qdf_pp_tabcaldatalin_coddata.Parameters.Item("ragg_prod_gio").Value = Getv(ragg_prod)
        End If
        qdf_pp_tabcaldatalin_coddata.Parameters.Item("data_prod").Value = DateValue(data_agg)
        qdf_pp_tabcaldatalin_coddata.Parameters.Item("cod_linea_prod").Value = "***"
        qdf_pp_tabcaldatalin_coddata.Transaction = DB_Transaction
        dr_pp_tabcaldatalin_coddata = qdf_pp_tabcaldatalin_coddata.ExecuteReader

        flag_festivo_gioprod = -1
        If dr_pp_tabcaldatalin_coddata.HasRows Then

            If dr_pp_tabcaldatalin_coddata.Read Then

                flag_festivo_gioprod = CLng(DB_Dsv(dr_pp_tabcaldatalin_coddata.Item("flag_festivo")))

            End If

        End If
        DB_DataReaderClose(dr_pp_tabcaldatalin_coddata)


        DB_DataReaderClose(dr_pp_tabcalsett_codgio)

        qdf_pp_tabcalsett_codgio.Parameters.Item("ragg_prod_sett").Value = Getv(ragg_prod)
        qdf_pp_tabcalsett_codgio.Parameters.Item("giorno_sett").Value = Weekday(DateValue(data_agg), Microsoft.VisualBasic.FirstDayOfWeek.Monday)
        qdf_pp_tabcalsett_codgio.Transaction = DB_Transaction
        dr_pp_tabcalsett_codgio = qdf_pp_tabcalsett_codgio.ExecuteReader

        If Not dr_pp_tabcalsett_codgio.HasRows Then

            DB_DataReaderClose(dr_pp_tabcalsett_codgio)

            qdf_pp_tabcalsett_codgio.Parameters.Item("ragg_prod_sett").Value = "***"
            qdf_pp_tabcalsett_codgio.Parameters.Item("giorno_sett").Value = Weekday(DateValue(data_agg), Microsoft.VisualBasic.FirstDayOfWeek.Monday)
            qdf_pp_tabcalsett_codgio.Transaction = DB_Transaction
            dr_pp_tabcalsett_codgio = qdf_pp_tabcalsett_codgio.ExecuteReader

        End If

        flag_festivo_gioprodsett = -1

        If dr_pp_tabcalsett_codgio.HasRows Then

            If dr_pp_tabcalsett_codgio.Read Then
                flag_festivo_gioprodsett = CLng(DB_Dsv(dr_pp_tabcalsett_codgio.Item("flag_festivo")))
            End If

        End If

        DB_DataReaderClose(dr_pp_tabcalsett_codgio)

        ' per passare da festivo a feriale
        If Tipo_Cambio = "R" Then

            ' se la Data specifica è festiva o il giorno della settimana è festivo

            If flag_festivo_gioprod = 1 Or flag_festivo_gioprodsett = 1 Then

                If flag_festivo_gioprod = 1 Then

                    Sql = ""
                    Sql = Sql & " DELETE FROM pp_tabcaldata " & vbCrLf
                    Sql = Sql & " WHERE pp_tabcaldata.ragg_prod_gio = " & vbCrLf
                    If ragg_prod = "" Then
                        Sql = Sql & " '***' " & vbCrLf
                    Else
                        Sql = Sql & " '" & ragg_prod & "' " & vbCrLf
                    End If
                    Sql &= "    AND pp_tabcaldata.data_prod         = '" & Getv(data_agg) & "' " & vbCrLf
                    Sql &= "    AND pp_tabcaldata.cod_linea_prod    = '***' " & vbCrLf

                    DB_SqlExecute(Sql)

                End If

                If flag_festivo_gioprodsett = 1 Then

                    DB_DataAdapterOpen(da_det, "SELECT * FROM pp_tabcaldata WHERE 1=0 ", _
                                       "pp_tabcaldata", "ragg_prod_gio, data_prod", DB2DataAdapterType.Optimistic)

                    da_det.Fill(dt_det)

                    NewRow = dt_det.NewRow()

                    NewRow("tipo_art_prod_gio") = Tipo_Art_Prod_Testata
                    NewRow("ragg_prod_gio") = IIf(ragg_prod = "", "***", ragg_prod)
                    NewRow("data_prod") = data_agg
                    NewRow("giorno_sett") = Weekday(DateValue(Getv(data_agg)), FirstDayOfWeek.Monday)
                    NewRow("nr_turno") = 1
                    NewRow("nr_ore_turno") = 24
                    NewRow("ora_inizio_turno") = "00:00"
                    NewRow("ora_fine_turno") = "23:59"
                    NewRow("flag_festivo") = 0
                    NewRow("flag_continuo") = 0
                    NewRow("cod_linea_prod") = "***"

                    dt_det.Rows.Add(NewRow)

                    da_det.Update(dt_det)

                End If

            End If

            ' per passare da feriale a festivo
        ElseIf Tipo_Cambio = "F" Then

            ' se la Data specifica NON è festiva o il giorno della settimana NON è festivo

            If flag_festivo_gioprod = 0 Or flag_festivo_gioprodsett = 0 Then

                If flag_festivo_gioprod = 0 Then

                    Sql = ""
                    Sql = Sql & " DELETE FROM pp_tabcaldata " & vbCrLf
                    Sql = Sql & " WHERE pp_tabcaldata.ragg_prod_gio = " & vbCrLf
                    If ragg_prod = "" Then
                        Sql = Sql & " '***' " & vbCrLf
                    Else
                        Sql = Sql & " '" & ragg_prod & "' " & vbCrLf
                    End If
                    Sql &= "    AND pp_tabcaldata.data_prod         = '" & Getv(data_agg) & "' " & vbCrLf
                    Sql &= "    AND pp_tabcaldata.cod_linea_prod    = '***' " & vbCrLf

                    DB_SqlExecute(Sql)

                End If

                If flag_festivo_gioprodsett = 0 Then

                    DB_DataAdapterOpen(da_det, "SELECT * FROM pp_tabcaldata WHERE 1=0 ", _
                                       "pp_tabcaldata", "ragg_prod_gio, data_prod", DB2DataAdapterType.Optimistic)

                    da_det.Fill(dt_det)

                    NewRow = dt_det.NewRow()

                    NewRow("tipo_art_prod_gio") = Tipo_Art_Prod_Testata
                    NewRow("ragg_prod_gio") = IIf(ragg_prod = "", "***", ragg_prod)
                    NewRow("data_prod") = data_agg
                    NewRow("giorno_sett") = Weekday(DateValue(Getv(data_agg)), FirstDayOfWeek.Monday)
                    NewRow("nr_turno") = 0
                    NewRow("nr_ore_turno") = 0
                    NewRow("ora_inizio_turno") = DBNull.Value
                    NewRow("ora_fine_turno") = DBNull.Value
                    NewRow("flag_festivo") = 1
                    NewRow("flag_continuo") = 0
                    NewRow("cod_linea_prod") = "***"

                    dt_det.Rows.Add(NewRow)

                    da_det.Update(dt_det)

                End If

            End If

        End If

        Aggiorna_Giorno = True

    End Function

    Private Sub Menu_Agg_Prod_Gen()

        If Tipo_Art_Prod_Testata = "PF" Then
            f_agg_prod_gen.Where_AppFiltri = Where_AppFiltri
        End If

        Setv(f_agg_prod_gen.Tipo_Art_Prod, Tipo_Art_Prod_Testata)
        Setv(f_agg_prod_gen.Ragg_Prod, Ragg_Prod_Testata)

        Setv(f_agg_prod_gen.data_piano, data_agg_prod)
        f_agg_prod_gen.EditMask = EditMask
        f_agg_prod_gen.Cod_Dep = Getv(cod_dep)

        f_agg_prod_gen.ShowDialog()

        If f_agg_prod_gen.Ok_Art = True Then
            flag_fatte_mod = True
        End If

        f_agg_prod_gen.Dispose()

        Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

    End Sub

    Private Sub Menu_Agg_Prod_Art()

        Setv(f_agg_prod_art.Tipo_Art_Prod_In, Tipo_Art_Prod_Testata)
        Setv(f_agg_prod_art.Data_Piano_In, data_agg_prod)
        Setv(f_agg_prod_art.Cod_Art_In, cod_art_agg_prod)
        Setv(f_agg_prod_art.Des_Art_In, des_art_agg_prod)
        Setv(f_agg_prod_art.Tipo_Um_In, tipo_um_agg_prod)
        f_agg_prod_art.EditMask = EditMask
        f_agg_prod_art.Cod_Dep = Getv(cod_dep)

        f_agg_prod_art.ShowDialog()

        If f_agg_prod_art.Ok_Qta = True Then
            flag_fatte_mod = True
        End If

        f_agg_prod_art.Dispose()

        Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian)

    End Sub

    Private Sub Menu_Qta_Compl_Prod_Art()

        Dim row As DataRow
        Dim cod_art As Object
        Dim col As GridColumn
        Dim qta As Double
        Dim dt_piano_pf As New DataTable
        Dim dt_completamento As DataTable = Nothing

        Dim data_piano As Object
        Dim pref As String

        Dim str_err As String

        col = grid_piano_view.FocusedColumn

        If grid_piano_view.GetFocusedDataSourceRowIndex >= 0 Then

            row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
            cod_art = DB_Dsv(row("cod_art"), "")

            qta = Object_Val(grid_piano_view.GetFocusedRowCellValue(col))
            f_completamento_qta.Cod_Art = cod_art
            f_completamento_qta.Data_Piano = col.Tag
            f_completamento_qta.Qta_Iniziale = qta
            f_completamento_qta.sql_deposito_magazzino_in = sql_deposito_magazzino
            f_completamento_qta.da_data_pian_in = Getv(da_data_pian)
            f_completamento_qta.EditMask = EditMask
            f_completamento_qta.Cod_Dep = Getv(cod_dep)

            f_completamento_qta.ShowDialog()

            dt_completamento = f_completamento_qta.dt_padri

        End If

        If f_completamento_qta.DialogResult = Windows.Forms.DialogResult.OK Then

            dt_piano_pf = dt_piano.Clone
            row = Nothing

            If Not dt_completamento Is Nothing Then

                For Each r As DataRow In dt_completamento.Rows

                    If Not Field_Null(r("qta_padre_new")) Then

                        data_piano = DB_Dsv(r("data_padre_pian"), "01/01/1900")

                        pref = Cerca_Lista_Date_Prefisso(data_piano)
                        row = dt_piano_pf.NewRow

                        row(pref & "id") = r("id_padre")
                        row(pref & "lista_righe_pian") = "|" & r("nr_riga_padre") & "|"
                        row("cod_art") = r("art_padre")
                        row(pref & "qta_pian_data") = r("qta_padre_new")
                        row(pref & "qta_pian_ord_data") = r("qta_pian_ord")

                        dt_piano_pf.Rows.Add(row)

                    End If

                Next

                If dt_piano_pf.Rows.Count > 0 Then

                    'controllo se nel frattempo sono state lanciate delle commesse

                    Leggi_Piani_Commesse(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_pianiprod_commesse, da_data_pian, a_data_pian, Getv(cod_dep))

                    str_err = Check_Valori_Pianificati()

                    If Not Field_Null(str_err) Then

                        DB_RollbackTrans()

                        grid_piano_view.FocusedColumn = grid_piano_view.Columns(Getv(str_err).Split("|")(1))
                        grid_piano_view.FocusedRowHandle = CInt(Getv(str_err).Split("|")(0))
                        grid_piano_view.ShowEditor()

                        Exit Sub

                    End If

                    Elabora_Produzione_Interna_e_Stato(dt_piano_pf)

                    If Salva_PP_Pianiprod_Dist(da_data_pian, a_data_pian, dt_piano_pf) Then

                        Salva_PP_Pianiprod_Var()

                        If azienda_agg.f_salva_pian_prod = "S" Then

                            'se ha salvato tutto senza problemi, allora salva anche su "pianiprod" standard

                            If Salva_Pianiprod() Then

                                ' chiusura transazione
                                DB_CommitTrans()

                                '' inizio della transazione
                                'DB_BeginTrans()

                                flag_fatte_mod = False

                                WaitForm_Close(Me, SplashScreenManager2)

                                Messaggio_Articoli_Non_Modificati()

                                cmd_leggi.PerformClick()

                            End If

                        Else

                            ' chiusura transazione
                            DB_CommitTrans()

                            '' inizio della transazione
                            'DB_BeginTrans()

                            flag_fatte_mod = False

                            WaitForm_Close(Me, SplashScreenManager2)

                            cmd_leggi.PerformClick()

                        End If

                    End If

                End If

            End If

        End If

        f_completamento_qta.Dispose()

    End Sub


    Private Sub Menu_Pianifica_Tutto_Pian()

        Dim col As GridColumn
        Dim data_piano As Object
        Dim pref As String

        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double

        Dim id As Integer
        Dim nr_riga As Integer

        col = grid_piano_view.FocusedColumn

        data_piano = col.Tag

        Try

            WaitForm_Show(Me, SplashScreenManager2, "Pianificazione delle quantità")

            If IsDate(data_piano) Then

                pref = Cerca_Lista_Date_Prefisso(CDate(data_piano))

                For Each row As DataRow In dt_piano.Rows

                    If Object_Val(row(pref & "qta_pian_data")) = 0 And Not Field_Null(row(pref & "qta_pian_ord_data")) Then

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                        DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                        Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                        DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                        If Pianprod_Dr_Sel_Anaart.Read Then

                            Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                          Math.Round(row(pref & "qta_pian_ord_data"), 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                            pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                            DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref & "cod_linea_prod"), "")), Getv(cod_dep))

                            flag_fatte_mod = True

                        End If

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                        'row(pref & "qta_pian_data") = row(pref & "qta_pian_ord_data")

                    End If

                Next

                If flag_fatte_mod Then Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

            End If

            WaitForm_Close(Me, SplashScreenManager2)

        Catch ex As Exception
            WaitForm_Close(Me, SplashScreenManager2)
            MsgErr(ex)

        End Try

    End Sub


    Private Sub Menu_Pianifica_Tutto_Impr()

        Dim col As GridColumn
        Dim data_piano As Object
        Dim pref As String

        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double

        Dim id As Integer
        Dim nr_riga As Integer

        col = grid_piano_view.FocusedColumn

        data_piano = col.Tag

        Try

            WaitForm_Show(Me, SplashScreenManager2, "Pianificazione delle quantità")

            If IsDate(data_piano) Then

                pref = Cerca_Lista_Date_Prefisso(CDate(data_piano))

                For Each row As DataRow In dt_piano.Rows

                    If Field_Null(row(pref & "qta_pian_data")) And Not Field_Null(row(pref & "qta_impr_data")) Then

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                        DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                        Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                        DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                        If Pianprod_Dr_Sel_Anaart.Read Then

                            Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                          Math.Round(row(pref & "qta_impr_data"), 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                            pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                            DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref & "cod_linea_prod"), "")), Getv(cod_dep))


                            flag_fatte_mod = True

                        End If

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                        'row(pref & "qta_pian_data") = row(pref & "qta_pian_ord_data")

                    End If

                Next

                If flag_fatte_mod Then Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

            End If

            WaitForm_Close(Me, SplashScreenManager2)

        Catch ex As Exception
            WaitForm_Close(Me, SplashScreenManager2)
            MsgErr(ex)

        End Try

    End Sub

    Private Sub Menu_Ripianifica_Tutto()
        Dim Messaggio As String = ""
        Dim col As GridColumn
        Dim pref As String
        Dim curr_data As Date = Nothing

        col = grid_piano_view.FocusedColumn
        f_data_da_a.Data_Da = col.Tag
        f_data_da_a.Data_A = col.Tag
        f_data_da_a.Data_Da_Min = Getv(da_data_pian)
        f_data_da_a.Data_A_Max = Getv(a_data_pian)
        f_data_da_a.Form_Text = "Date Da/A Ripianifica + Salta la produzione"
        f_data_da_a.ShowDialog()

        If f_data_da_a.DialogResult = Windows.Forms.DialogResult.Cancel OrElse XtraMessageBox.Show("Ripianificare il periodo selezionato ? ", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.No Then
            Exit Sub
        End If

        Try

            curr_data = f_data_da_a.Data_Da
            While IsDate(curr_data) AndAlso IsDate(f_data_da_a.Data_A) AndAlso curr_data <= CDate(f_data_da_a.Data_A)

                pref = Cerca_Lista_Date_Prefisso(curr_data)

                For Each row As DataRow In dt_piano.Rows

                    row(pref & "qta_pian_data_old") = DBNull.Value

                Next

                curr_data = curr_data.AddDays(1)

            End While

            cmd_salva.PerformClick()
            WaitForm_Close(Me, SplashScreenManager2)

        Catch ex As Exception

            WaitForm_Close(Me, SplashScreenManager2)
            MsgErr(ex)

        End Try

    End Sub


    Private Sub Menu_Elimina_Pian_Ord()

        Dim col As GridColumn
        Dim data_piano As Object
        Dim pref As String

        Dim cod_art As Object
        Dim id As Integer
        Dim nr_riga As Integer

        Dim row As DataRow = Nothing

        col = grid_piano_view.FocusedColumn

        data_piano = col.Tag

        Try

            If grid_piano_view.GetDataSourceRowIndex(grid_piano_view.FocusedRowHandle) >= 0 Then
                row = dt_piano.Rows(grid_piano_view.GetDataSourceRowIndex(grid_piano_view.FocusedRowHandle))
            End If

            If IsDate(data_piano) Then

                pref = Cerca_Lista_Date_Prefisso(CDate(data_piano))
                cod_art = DB_Dsv(row("cod_art"), "")

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, DBNull.Value, Getv(cod_dep))

                    sql = ""
                    sql = sql & " DELETE FROM pp_pianiprod_det " & vbCrLf
                    sql = sql & "       WHERE id_pianiprod = " & Getv(id) & vbCrLf
                    sql = sql & "         AND nr_riga_pianiprod = " & Getv(nr_riga) & vbCrLf

                    DB_SqlExecute(sql)

                    flag_fatte_mod = True

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            End If


            If flag_fatte_mod Then Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

        Catch ex As Exception

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            MsgErr(ex)

        End Try

    End Sub

    'CODICE COLORE:

    'alternato fra le date a seconda del vettore Lista_Colori_Col
    'GRIGIO: festivi e date passate
    'ROSSO: celle bloccate da commesse
    'ARANCIONE: qta_pian < qta_impr - giacenza al giorno prima

    Private Sub grid_piano_view_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles grid_piano_view.RowCellStyle

        Dim data_piano As Object
        Dim str_col As String = ""
        Dim i_data As Long

        Dim row As DataRow = Nothing
        Dim pref_cmp As String
        Dim giace As Object = Nothing
        Dim qta_impr As Object = Nothing
        Dim qta_pian As Object = Nothing

        If dt_piano Is Nothing Then
            Exit Sub
        Else
            If dt_piano.Rows.Count <= 0 Then
                Exit Sub
            End If
        End If

        'FASE 1: Sistemo backcolo delle celle

        If e.Column.FieldName Like "*qta_pian_data" Then

            data_piano = e.Column.Tag

            If IsDate(data_piano) AndAlso CDate(data_piano) < Now.Date Then

                e.Appearance.BackColor = col_bloccato1
                e.Appearance.BackColor2 = col_bloccato2

            Else

                str_col = Mid(e.Column.FieldName, 1, 5)

                If Strings.Right(str_col, 1) = "_" And IsNumeric(Strings.Left(str_col, 4)) Then

                    i_data = CLng(Strings.Left(str_col, 4))
                    e.Appearance.BackColor = Lista_Date(1, i_data)

                    If e.Appearance.BackColor = Lista_Colori_Col(0) Then
                        e.Appearance.BackColor2 = Lista_Colori_Col(2)
                    Else
                        e.Appearance.BackColor2 = Lista_Colori_Col(3)
                    End If

                End If

                'se qta_pian è nullo, non coloro di arancione (se qta_pian < qta_impr - giace) (devo visualizzare la colonna delle giacenze)
                If pp_modelli_col.flag_gia_data = "S" AndAlso pp_modelli_col.flag_gia_ini = "S" Then

                    If Not Field_Null(e.CellValue) AndAlso Tipo_Art_Prod_Testata = "SL" Then

                        row = dt_piano.Rows(grid_piano_view.GetDataSourceRowIndex(e.RowHandle))
                        i_data = Cerca_Lista_Date_Index(e.Column.Tag)

                        If i_data = 0 Then
                            'giacenza iniziale
                            giace = Object_Val(DB_Dsv(row("gia_ini"), 0))
                        Else
                            'giacenza giorno prima
                            pref_cmp = Cerca_Lista_Date_Prefisso(Lista_Date(0, i_data - 1))
                            giace = Object_Val(DB_Dsv(row(pref_cmp & "gia_data"), 0))
                        End If

                        pref_cmp = Cerca_Lista_Date_Prefisso(e.Column.Tag)
                        qta_impr = Object_Val(DB_Dsv(row(pref_cmp & "qta_impr_data"), 0))
                        qta_pian = Object_Val(e.CellValue)

                        If qta_pian < qta_impr - giace Then
                            e.Appearance.BackColor = col_pianimpr1
                            e.Appearance.BackColor2 = col_pianimpr2

                        End If

                    End If

                End If

                If dt_piano.Rows.Count > 0 Then

                    If Esistono_Commesse(data_piano, dt_piano.Rows(e.RowHandle)("cod_art"), xx1) Then

                        e.Appearance.BackColor = col_commesse1
                        e.Appearance.BackColor2 = col_commesse2

                    End If

                End If

            End If

        ElseIf e.Column.FieldName Like "*flag_festivo*" Then

            e.Appearance.BackColor = col_festivo1
            e.Appearance.BackColor2 = col_festivo2

        Else

            data_piano = e.Column.Tag

            If IsDate(data_piano) AndAlso CDate(data_piano) < Now.Date Then
                e.Appearance.BackColor = col_bloccato1

            Else

                str_col = Mid(e.Column.FieldName, 1, 5)

                If Strings.Right(str_col, 1) = "_" And IsNumeric(Strings.Left(str_col, 4)) Then
                    i_data = CLng(Strings.Left(str_col, 4))
                    e.Appearance.BackColor = Lista_Date(1, i_data)
                End If

            End If

        End If

        Dim qta_pian_ora_data As Object = Nothing
        Dim qta_pian_ord_data As Object = Nothing

        'FASE 2: sistemo forecolor
        'NEGATIVI
        If e.Column.FieldName Like "*gia*" Or e.Column.FieldName Like "*disp*" Then
            If Object_Val(e.CellValue) < 0 Then
                e.Appearance.ForeColor = col_qta_negative
            Else
                e.Appearance.ForeColor = Color.Black
            End If

            'EVIDENZIO IN ROSSO SE ORARIA è MINORE DI PIANIFICATA DA ORDINE
        ElseIf e.Column.FieldName Like "*pian_ora*" Then

            row = dt_piano.Rows(grid_piano_view.GetDataSourceRowIndex(e.RowHandle))
            pref_cmp = Cerca_Lista_Date_Prefisso(e.Column.Tag)

            qta_pian_ora_data = Object_Val(DB_Dsv(row(pref_cmp & "qta_pian_ora_data"), 0))
            qta_pian_ord_data = Object_Val(DB_Dsv(row(pref_cmp & "qta_pian_ord_data"), 0))

            If l_pian_ora_data.Contains(e.Column.Tag.ToString) AndAlso qta_pian_ora_data < qta_pian_ord_data Then
                e.Appearance.ForeColor = col_qta_negative
            Else
                e.Appearance.ForeColor = Color.Black
            End If

        End If

    End Sub

    '-------------------------DAVIDE------------------------------------


    'sistemazione degli header della griglia

    Private Sub Imposta_Grid(ByRef grid As GridControl, ByRef grid_view As GridView, ByRef dt As DataTable)

        Dim i_vis As Integer
        Dim col As GridColumn = Nothing

        Dim col2 As DataColumn = Nothing

        grid.DataSource = Nothing

        With grid_view

            .Columns.Clear()
            .BestFitColumns()

            .OptionsCustomization.AllowSort = True
            ' \\\\ opzioni per copia
            .OptionsBehavior.CopyToClipboardWithColumnHeaders = False
            .OptionsSelection.MultiSelect = True
            ' ////
            .OptionsCustomization.AllowFilter = False
            .OptionsNavigation.UseTabKey = False
            .OptionsSelection.EnableAppearanceFocusedCell = False
            .OptionsView.ShowGroupPanel = False
            .OptionsView.ColumnAutoWidth = False
            .OptionsSelection.EnableAppearanceFocusedRow = False
            .OptionsNavigation.AutoMoveRowFocus = False
            .OptionsView.ShowAutoFilterRow = True
        End With

        ' creazione datatable per le ricerche di righe da assegnare e assegnate



        Crea_Grid_Pianipord_Det(dt)

        col2 = dt.Columns.Add
        col2.ColumnName = "sel"
        col2.DataType = GetType(Boolean)
        col2.Caption = "Selezione"
        col2.DefaultValue = False
        col2.SetOrdinal(0)

        grid.DataSource = dt

        ' impostazione datasource per grid lavorazioni da assegnare ed assegnate e impostazione di tutte le colonne

        For i = 0 To grid_view.Columns.Count - 1
            grid_view.Columns(i).OptionsColumn.AllowEdit = False
            grid_view.Columns(i).Visible = False
            grid_view.Columns(i).Caption = grid_view.Columns(i).Name.ToString
        Next i

        'i_vis = 1
        i_vis = 0

        col = grid_view.Columns("sel")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Selezione"
        col.Fixed = DevExpress.XtraGrid.Columns.FixedStyle.Left
        col.OptionsColumn.AllowEdit = True

        col = grid_view.Columns("cod_art")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Codice" & vbCrLf & "Articolo"
        col.Fixed = DevExpress.XtraGrid.Columns.FixedStyle.Left

        col = grid_view.Columns("des_art")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Descrizione Articolo"
        col.Fixed = DevExpress.XtraGrid.Columns.FixedStyle.Left

        col = grid_view.Columns("cod_cli")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Cod. Cliente"
        col = grid_view.Columns("rag_soc")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Rag. Sociale"

        col = grid_view.Columns("data_spedizione_ordcli")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Data Sped. Ordine"
        col = grid_view.Columns("ora_spedizione_ordcli")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Ora Sped. Ordine"
        col = grid_view.Columns("data_cons_ordcli")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Data Cons. Ordine"
        col = grid_view.Columns("flag_data_cons")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "A-T-M"

        col = grid_view.Columns("cod_um")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "UM"
        col = grid_view.Columns("qta_ordcli")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Qta Ordinata"
        col.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric
        col.DisplayFormat.FormatString = EditMask
        col = grid_view.Columns("qta_rif_pian")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Qta da Pian."
        col.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric
        col.DisplayFormat.FormatString = EditMask
        col = grid_view.Columns("qta_gia_pian")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Qta già Pian."
        col.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric
        col.DisplayFormat.FormatString = EditMask
        col = grid_view.Columns("qta_spedita")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Qta Spedita"
        col.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric
        col.DisplayFormat.FormatString = EditMask


        col = grid_view.Columns("cod_linea_prod_pre")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Linea Pref."
        col = grid_view.Columns("des_linea_prod_pre")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Descrizione Linea Pref."
        col = grid_view.Columns("cod_ass_prod_pre")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Assetto Pref."
        col = grid_view.Columns("des_ass_prod_pre")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Descrizione Assetto Pref."
        col = grid_view.Columns("prod_pz_ora_pref")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Prod. PZ / ORA Pref."

        col = grid_view.Columns("min_lav_pref")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Min. Lav. Pref."
        col = grid_view.Columns("tempo_pref")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Tempo Pref."


        col = grid_view.Columns("anno_ord")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Anno Ord."
        col = grid_view.Columns("nr_ord")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Nr. Ord."
        col = grid_view.Columns("nr_riga_ord")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Nr Riga"


        col = grid_view.Columns("cod_dep")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Deposito"

        col = grid_view.Columns("cod_doc")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Tipo"


        col = grid_view.Columns("data_ordinam")
        col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = "Data Ordinamento"

        ' colonne per raggruppamento/ordinamento ordini clienti

        col = grid_view.Columns("cod_campo1_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False
        col = grid_view.Columns("des_campo1_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False : If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo1_ord <> "" Then col.Group() Else col.UnGroup()

        col = grid_view.Columns("cod_campo2_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False
        col = grid_view.Columns("des_campo2_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False : If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo2_ord <> "" Then col.Group() Else col.UnGroup()

        col = grid_view.Columns("cod_campo3_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False
        col = grid_view.Columns("des_campo3_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False : If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo3_ord <> "" Then col.Group() Else col.UnGroup()

        col = grid_view.Columns("cod_campo4_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False
        col = grid_view.Columns("des_campo4_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False : If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo4_ord <> "" Then col.Group() Else col.UnGroup()

        col = grid_view.Columns("cod_campo5_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False
        col = grid_view.Columns("des_campo5_ord") : col.VisibleIndex = i_vis : i_vis += 1 : col.Caption = " " : col.Visible = False : If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo5_ord <> "" Then col.Group() Else col.UnGroup()

    End Sub


    Private Function Leggi_Grid(ByRef grid As GridControl, ByRef grid_view As GridView, ByRef dt As DataTable, ByVal tipo_grid As String) As Boolean
      
        Try

            dt.Clear()

            sql = ""
            sql = sql & " SELECT "
            sql = sql & "        NVL(ordcli.data_spedizione, ordclidet.data_cons) AS data_ordinam   " & vbCrLf
            sql = sql & "      , ordclidet.anno_ord                                                 " & vbCrLf
            sql = sql & "      , ordclidet.nr_ord                                                   " & vbCrLf
            sql = sql & "      , ordclidet.nr_riga_ord                                              " & vbCrLf
            sql = sql & "      , ordclidet.cod_dep                                                  " & vbCrLf
            sql = sql & "      , ordclidet.cod_doc                                                  " & vbCrLf
            sql = sql & "      , ordclidet.cod_art                                                  " & vbCrLf
            sql = sql & "      , TRIM(anaart.des_art) as des_art                                    " & vbCrLf
            sql = sql & "      , anaart.cod_um                                                      " & vbCrLf
            sql = sql & "      , tabum.tipo_um                                                      " & vbCrLf
            sql = sql & "      , anaart.cod_linea_prod_pre                                          " & vbCrLf
            sql = sql & "      , tabgen_linea.des_cod AS des_linea_prod_pre                         " & vbCrLf
            sql = sql & "      , anaart.cod_ass_prod_pre                                            " & vbCrLf
            sql = sql & "      , tabgen_assetto.des_cod AS des_ass_prod_pre                         " & vbCrLf
            sql = sql & "      , ordclidet.qta_ordinata AS qta                                      " & vbCrLf
            sql = sql & "      , ordclidet.cod_cli                                                  " & vbCrLf
            sql = sql & "      , anacli.rag_soc                                                     " & vbCrLf
            sql = sql & "      , ordclidet.cod_giro                                                 " & vbCrLf
            sql = sql & "      , ordclidet.data_cons                                                " & vbCrLf
            sql = sql & "      , ordclidet.cod_int                                                  " & vbCrLf
            sql = sql & "      , ordcli.cod_vet1                                                    " & vbCrLf
            sql = sql & "      , ordclidet.qta_ordinata AS qta_ordcli                               " & vbCrLf
            sql = sql & "      , ordclidet.qta_co AS qta_co_ordcli                                  " & vbCrLf
            sql = sql & "      , ordclidet.qta_cf AS qta_cf_ordcli                                  " & vbCrLf
            sql = sql & "      , ordclidet.qta_pe AS qta_pe_ordcli                                  " & vbCrLf
            sql = sql & "      , ordclidet.qta_pz AS qta_pz_ordcli                                  " & vbCrLf
            sql = sql & "      , ordclidet.data_cons AS data_cons_ordcli                            " & vbCrLf
            sql = sql & "      , ordcli.flag_data_cons                                              " & vbCrLf

            sql = sql & "      , (select sum(qta_in_sped) from ordspedet "
            sql = sql & "         where  ordspedet.anno_ord = ordclidet.anno_ord "
            sql = sql & "         and    ordspedet.nr_ord   = ordclidet.nr_ord "
            sql = sql & "         and    ordspedet.nr_riga  = ordclidet.nr_riga_ord ) as qta_spedita    " & vbCrLf

            sql = sql & "      , (select sum(qta_in_sped_co) from ordspedet "
            sql = sql & "         where  ordspedet.anno_ord = ordclidet.anno_ord "
            sql = sql & "         and    ordspedet.nr_ord   = ordclidet.nr_ord "
            sql = sql & "         and    ordspedet.nr_riga  = ordclidet.nr_riga_ord ) as qta_co_spedita " & vbCrLf

            sql = sql & "      , (select sum(qta_in_sped_cf) from ordspedet "
            sql = sql & "         where  ordspedet.anno_ord = ordclidet.anno_ord "
            sql = sql & "         and    ordspedet.nr_ord   = ordclidet.nr_ord "
            sql = sql & "         and    ordspedet.nr_riga  = ordclidet.nr_riga_ord ) as qta_cf_spedita " & vbCrLf

            sql = sql & "      , (select sum(qta_in_sped_pe) from ordspedet "
            sql = sql & "         where  ordspedet.anno_ord = ordclidet.anno_ord "
            sql = sql & "         and    ordspedet.nr_ord   = ordclidet.nr_ord "
            sql = sql & "         and    ordspedet.nr_riga  = ordclidet.nr_riga_ord ) as qta_pe_spedita " & vbCrLf

            sql = sql & "      , (select sum(qta_in_sped_pz) from ordspedet "
            sql = sql & "         where  ordspedet.anno_ord = ordclidet.anno_ord "
            sql = sql & "         and    ordspedet.nr_ord   = ordclidet.nr_ord "
            sql = sql & "         and    ordspedet.nr_riga  = ordclidet.nr_riga_ord ) as qta_pz_spedita " & vbCrLf

            sql = sql & "      , (select sum(qta_pian) from pp_calend_ora "
            sql = sql & "         where  pp_calend_ora.anno_ord       = ordclidet.anno_ord "
            Sql = Sql & "         and    pp_calend_ora.nr_ord         = ordclidet.nr_ord "
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "     AND    pp_calend_ora.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            sql = sql & "         and    pp_calend_ora.nr_riga_ord    = ordclidet.nr_riga_ord ) as qta_gia_pian " & vbCrLf

            sql = sql & "      , (select sum(qta_pian_co) from pp_calend_ora "
            sql = sql & "         where  pp_calend_ora.anno_ord   = ordclidet.anno_ord "
            Sql = Sql & "         and    pp_calend_ora.nr_ord     = ordclidet.nr_ord "
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "     AND    pp_calend_ora.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            sql = sql & "         and    pp_calend_ora.nr_riga_ord  = ordclidet.nr_riga_ord ) as qta_gia_pian_co " & vbCrLf

            sql = sql & "      , (select sum(qta_pian_cf) from pp_calend_ora "
            sql = sql & "         where  pp_calend_ora.anno_ord   = ordclidet.anno_ord "
            Sql = Sql & "         and    pp_calend_ora.nr_ord     = ordclidet.nr_ord "
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "     AND    pp_calend_ora.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            sql = sql & "         and    pp_calend_ora.nr_riga_ord  = ordclidet.nr_riga_ord ) as qta_gia_pian_cf " & vbCrLf

            sql = sql & "      , (select sum(qta_pian_pe) from pp_calend_ora "
            sql = sql & "         where  pp_calend_ora.anno_ord   = ordclidet.anno_ord "
            Sql = Sql & "         and    pp_calend_ora.nr_ord     = ordclidet.nr_ord "
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "     AND    pp_calend_ora.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            sql = sql & "         and    pp_calend_ora.nr_riga_ord  = ordclidet.nr_riga_ord ) as qta_gia_pian_pe " & vbCrLf

            sql = sql & "      , (select sum(qta_pian_pz) from pp_calend_ora "
            sql = sql & "         where  pp_calend_ora.anno_ord   = ordclidet.anno_ord "
            Sql = Sql & "         and    pp_calend_ora.nr_ord     = ordclidet.nr_ord "
            If Getv(cod_dep) <> "" Then
                Sql = Sql & "     AND    pp_calend_ora.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If
            sql = sql & "         and    pp_calend_ora.nr_riga_ord  = ordclidet.nr_riga_ord ) as qta_gia_pian_pz " & vbCrLf

            sql = sql & "      , ordcli.data_spedizione AS data_spedizione_ordcli                   " & vbCrLf
            Sql = Sql & "      , CASE WHEN TRIM(replace(NVL(ordcli.ora_spedizione, ''), '.',':')) = '' THEN NULL ELSE TRIM(replace(NVL(ordcli.ora_spedizione, ''), '.',':')) END AS ora_spedizione_ordcli   " & vbCrLf

            Sql = sql & "      , 0 AS flag_art_spec         " & vbCrLf
            sql = sql & "      , 0 AS flag_prop_inizio      " & vbCrLf
            sql = sql & "      , 0 AS flag_prop_ini_seq      " & vbCrLf
            sql = sql & "      , 0 AS flag_prop_cam_seq     " & vbCrLf
            sql = sql & "      , 0 AS flag_prop_fine        " & vbCrLf

            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo1_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo1_ord & ",'')) AS cod_campo1_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo1_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo2_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo2_ord & ",'')) AS cod_campo2_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo2_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo3_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo3_ord & ",'')) AS cod_campo3_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo3_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo4_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo4_ord & ",'')) AS cod_campo4_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo4_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo5_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo5_ord & ",'')) AS cod_campo5_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo5_ord " & vbCrLf

            sql = sql & "   FROM ordclidet , ordcli, anacli , anaart, tabum, OUTER tabgen AS tabgen_linea, OUTER tabgen AS tabgen_assetto " & vbCrLf
            sql = sql & "  WHERE 1 = 1                                                  " & vbCrLf
            sql = sql & "    AND ordclidet.anno_ord         = ordcli.anno_ord           " & vbCrLf
            sql = sql & "    AND ordclidet.nr_ord           = ordcli.nr_ord             " & vbCrLf
            sql = sql & "    AND anacli.cod_cli             = ordclidet.cod_cli         " & vbCrLf
            sql = sql & "    AND anaart.cod_art             = ordclidet.cod_art         " & vbCrLf
            sql = sql & "    AND anaart.cod_um              = tabum.cod_um              " & vbCrLf
            sql = sql & "    AND anaart.cod_linea_prod_pre  = tabgen_linea.cod_tab      " & vbCrLf
            sql = sql & "    AND tabgen_linea.tipo_tab      = 'LPR'                     " & vbCrLf
            sql = sql & "    AND anaart.cod_ass_prod_pre  = tabgen_assetto.cod_tab      " & vbCrLf
            sql = sql & "    AND tabgen_assetto.tipo_tab    = 'ASS'                     " & vbCrLf
            sql = sql & "    AND anaart.tipo_art_prod       = '" & Tipo_Art_Prod_Testata & "' " & vbCrLf

            If Not Field_Null(Ragg_Prod_Testata) Then
                sql = sql & "    AND anaart.ragg_prod             = '" & Ragg_Prod_Testata & "' " & vbCrLf
            End If

            sql = sql & "    AND NVL(ordclidet.flag_evaso, 'N') <> 'S' " & vbCrLf

            If tipo_grid = "ESCL" Then

                sql = sql & "    AND EXISTS    (SELECT anno_ord, nr_ord, nr_riga_ord "
                sql = sql & "                        FROM pp_pianiprod_det   " & vbCrLf
                sql = sql & "                       WHERE pp_pianiprod_det.anno_ord     = ordclidet.anno_ord    " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.nr_ord       = ordclidet.nr_ord      " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.nr_riga_ord  = ordclidet.nr_riga_ord " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.id_pianiprod IS NULL   " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.nr_riga_pianiprod IS NULL " & vbCrLf
                Sql = Sql & "                         AND pp_pianiprod_det.data_piano   IS NULL  " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & "                     AND pp_pianiprod_det.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If
                sql = sql & "                         )" & vbCrLf

            Else

                sql = sql & "    AND NOT EXISTS   (SELECT anno_ord, nr_ord, nr_riga_ord "
                sql = sql & "                        FROM pp_pianiprod_det   " & vbCrLf
                sql = sql & "                       WHERE pp_pianiprod_det.anno_ord     = ordclidet.anno_ord    " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.nr_ord       = ordclidet.nr_ord      " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.nr_riga_ord  = ordclidet.nr_riga_ord " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.id_pianiprod IS NULL " & vbCrLf
                sql = sql & "                         AND pp_pianiprod_det.nr_riga_pianiprod IS NULL" & vbCrLf
                Sql = Sql & "                         AND pp_pianiprod_det.id_pianiprod IS NULL " & vbCrLf
                If Getv(cod_dep) <> "" Then
                    Sql = Sql & "                     AND pp_pianiprod_det.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                End If
                sql = sql & "                         )" & vbCrLf

            End If

            If Not Field_Null(azienda_agg.tipo_doc_ord_escl) Then
                sql = sql & " AND ordcli.cod_doc NOT IN ('" & Getv(azienda_agg.tipo_doc_ord_escl).Replace(" - ", "','") & "')" & vbCrLf
            End If

            If Getv(pp_modelli_piano.Flag_Dep_Ordini) = "S" Then
                Sql = Sql & " AND ordclidet.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            'FILTRO SOLAMENTE ARTICOLI PRODOTTI (ESCLUDO COMMERCIALIZZATI)
            sql = sql & " AND NVL(anaart.flag_pc,'P') = 'P'" & vbCrLf

            'AppFiltri
            If Where_AppFiltri <> "" AndAlso Tipo_Art_Prod_Testata = "PF" Then
                Sql = Sql & Where_AppFiltri & vbCrLf
            End If

            sql = sql & Filtri_Ordclidet() & vbCrLf

            sql = sql & Ordinamento_Ordclidet() & vbCrLf

            'DB_DataAdapterOpen(da_grid_pianiprod_det, sql, "ordclidet", "", DB2DataAdapterType.ReadOnly) ', conn2)

            'da_grid_pianiprod_det.Fill(dt)

            cmd_grid_pianiprod_det = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr_grid_pianiprod_det, cmd_grid_pianiprod_det)
            dt.Load(dr_grid_pianiprod_det)
            DB_DataReaderClose(dr_grid_pianiprod_det, cmd_grid_pianiprod_det)

            ' funzione che serve impostare colore e stato della lavorazione, funzione da implementare

            Lettura_Dati_Lavorazioni(dt, True, "O", True, tipo_grid) 'flag_lav_da_ass)        'calcolo i valori per le nuove colonne 

            grid_view.BestFitColumns()

            grid_view.CollapseAllGroups()

            If pp_modelli_rag.cod_mod <> "" Then
                If pp_modelli_rag.campo1_ord <> "" And pp_modelli_rag.campo1_ord_flagesp = "S" Then grid_view.ExpandGroupLevel(0)
                If pp_modelli_rag.campo2_ord <> "" And pp_modelli_rag.campo2_ord_flagesp = "S" Then grid_view.ExpandGroupLevel(1)
                If pp_modelli_rag.campo3_ord <> "" And pp_modelli_rag.campo3_ord_flagesp = "S" Then grid_view.ExpandGroupLevel(2)
                If pp_modelli_rag.campo4_ord <> "" And pp_modelli_rag.campo4_ord_flagesp = "S" Then grid_view.ExpandGroupLevel(3)
                If pp_modelli_rag.campo5_ord <> "" And pp_modelli_rag.campo5_ord_flagesp = "S" Then grid_view.ExpandGroupLevel(4)
            End If

            'DB_DataAdapterClose(da_grid_pianiprod_det)

        Catch ex As Exception

            'DB_DataAdapterClose(da_grid_pianiprod_det)

            DB_DataReaderClose(dr_grid_pianiprod_det, cmd_grid_pianiprod_det)

            MsgErr(ex)

        End Try

    End Function

    Function Filtri_Ordclidet(Optional Nome_Alias_Ordclidet As String = "", Optional Nome_Alias_Ordcli As String = "") As String

        Dim sql As String = ""
        Dim nome_ordclidet As String
        Dim nome_ordcli As String

        If Nome_Alias_Ordclidet = "" Then
            nome_ordclidet = "ordclidet"
        Else
            nome_ordclidet = Nome_Alias_Ordclidet
        End If

        If Nome_Alias_Ordcli = "" Then
            nome_ordcli = "ordcli"
        Else
            nome_ordcli = Nome_Alias_Ordcli
        End If

        If Not Field_Null(da_data_ord) Then
            sql = sql & " AND " & nome_ordclidet & ".data_ord >= '" & DB_Sql_Date(da_data_ord) & "' "
        End If

        If Not Field_Null(a_data_ord) Then
            sql = sql & " AND " & nome_ordclidet & ".data_ord <= '" & DB_Sql_Date(a_data_ord) & "' "
        End If

        If Not Field_Null(da_data_cons_ord) Then
            sql = sql & " AND " & nome_ordclidet & ".data_cons >= '" & DB_Sql_Date(da_data_cons_ord) & "' "
        End If

        If Not Field_Null(a_data_cons_ord) Then
            sql = sql & " AND " & nome_ordclidet & ".data_cons <= '" & DB_Sql_Date(a_data_cons_ord) & "' "
        End If

        If Not Field_Null(da_data_spedizione) Then
            sql = sql & " AND " & nome_ordcli & ".data_spedizione >= '" & DB_Sql_Date(da_data_spedizione) & "' "
        End If

        If Not Field_Null(a_data_spedizione) Then
            sql = sql & " AND " & nome_ordcli & ".data_spedizione <= '" & DB_Sql_Date(a_data_spedizione) & "' "
        End If

        If Not Field_Null(da_ora_spedizione) Then
            sql = sql & " AND " & nome_ordcli & ".ora_spedizione >= '" & Getv(da_ora_spedizione) & "' "
        End If

        If Not Field_Null(a_ora_spedizione) Then
            sql = sql & " AND " & nome_ordcli & ".ora_spedizione <= '" & Getv(a_ora_spedizione) & "' "
        End If

        If Not Field_Null(cod_art_pf_ord_da) Then
            sql = sql & " AND " & nome_ordclidet & ".cod_art >= '" & Getv(cod_art_pf_ord_da) & "' "
        End If

        If Not Field_Null(cod_art_pf_ord_a) Then
            sql = sql & " AND " & nome_ordclidet & ".cod_art <= '" & Getv(cod_art_pf_ord_a) & "' "
        End If

        If Not Field_Null(da_cod_cli) Then
            sql = sql & " AND " & nome_ordclidet & ".cod_cli >= '" & Getv(da_cod_cli) & "' "
        End If

        If Not Field_Null(a_cod_cli) Then
            sql = sql & " AND " & nome_ordclidet & ".cod_cli <= '" & Getv(a_cod_cli) & "' "
        End If

        Filtri_Ordclidet = sql

    End Function

    Function Ordinamento_Ordclidet(Optional Nome_Alias_Ordclidet As String = "", Optional Nome_Alias_Ordcli As String = "") As String

        Dim sql As String = ""
        Dim nome_ordclidet As String
        Dim nome_ordcli As String

        If Nome_Alias_Ordclidet = "" Then
            nome_ordclidet = "ordclidet"
        Else
            nome_ordclidet = Nome_Alias_Ordclidet
        End If

        If Nome_Alias_Ordcli = "" Then
            nome_ordcli = "ordcli"
        Else
            nome_ordcli = Nome_Alias_Ordcli
        End If


        If ord_data_ora.Checked Then
            sql = sql & " ORDER BY data_ordinam, ora_spedizione_ordcli, ordcli.cod_cli, ordclidet.cod_art, ordclidet.anno_ord , ordclidet.nr_ord "
        End If

        If ord_cod_cli.Checked Then
            sql = sql & " ORDER BY ordcli.cod_cli, data_ordinam, ora_spedizione_ordcli, ordclidet.cod_art, ordclidet.anno_ord , ordclidet.nr_ord "
        End If

        If ord_rag_soc_cli.Checked Then
            sql = sql & " ORDER BY anacli.rag_soc, data_ordinam, ora_spedizione_ordcli, ordclidet.cod_art, ordclidet.anno_ord , ordclidet.nr_ord "
        End If

        If ord_cod_art.Checked Then
            sql = sql & " ORDER BY ordclidet.cod_art, data_ordinam, ora_spedizione_ordcli, ordcli.cod_cli, ordclidet.anno_ord , ordclidet.nr_ord "
        End If

        If ord_des_art.Checked Then
            sql = sql & " ORDER BY anaart.des_art, data_ordinam, ora_spedizione_ordcli, ordcli.cod_cli, ordclidet.anno_ord , ordclidet.nr_ord "
        End If

        Ordinamento_Ordclidet = sql

    End Function


    Private Sub Lettura_Dati_Lavorazioni(ByRef dt As DataTable, ByVal Ricalcolo_QtaPian_Tempo As Boolean, ByVal Tipo_Archivio As String, ByVal Elimina_Righe_SenzaQta As Boolean, ByVal Considera_Ordini_Esclusi As String)

        Dim ID_Colore As Integer
        Dim flag_stato_R As Boolean = False
        Dim flag_stato_T As Boolean = False
        Dim flag_stato_lav_sospesa As Boolean = False
        Dim flag_stato_lav_chiusa As Boolean = False
        Dim cod_linea_pref As String
        Dim cod_ass_pref As String
        Dim cod_art_rif As String
        Dim pz_ora_pref As Double
        Dim min_lav_pref As Integer
        Dim tempo_calc As TimeSpan
        Dim nome_campo_qta As String = ""
        Dim nome_campo_ordcli As String = ""
        Dim nome_campo_rif_pian As String = ""
        Dim nome_campo_gia_pian As String = ""
        Dim nome_campo_spedita As String = ""
        Dim filtro_campo_ord As String = ""
        Dim Cod_Dep_Linea As Object = Nothing
        Dim Cod_Ass_Prod_Veloce As Object = Nothing
        Dim Cod_Linea_Prod_Veloce As Object = Nothing

        If Tipo_Archivio = "O" Then      ' da ordclidet

            For i As Integer = 0 To dt.Rows.Count - 1

                dt.Rows(i).Item("cod_art_rif_pian") = dt.Rows(i).Item("cod_art")

                ' usata ora la qta ordinata in pezzi
                If Ricalcolo_QtaPian_Tempo Then

                    ' ricerca NON Pianificate
                    dt.Rows(i).Item("qta_rif_pian") = DB_Dsv(dt.Rows(i).Item("qta_ordcli"), 0)
                    dt.Rows(i).Item("qta_pian_pe") = DB_Dsv(dt.Rows(i).Item("qta_pe_ordcli"), 0)
                    dt.Rows(i).Item("qta_pian_co") = DB_Dsv(dt.Rows(i).Item("qta_co_ordcli"), 0)
                    dt.Rows(i).Item("qta_pian_cf") = DB_Dsv(dt.Rows(i).Item("qta_cf_ordcli"), 0)
                    dt.Rows(i).Item("qta_pian_pz") = DB_Dsv(dt.Rows(i).Item("qta_pz_ordcli"), 0)

                    'da documenti di spedizione
                    dt.Rows(i).Item("qta_rif_pian") = DB_Dsv(dt.Rows(i).Item("qta_rif_pian"), 0) - DB_Dsv(dt.Rows(i).Item("qta_spedita"), 0)
                    dt.Rows(i).Item("qta_pian_pe") = DB_Dsv(dt.Rows(i).Item("qta_pian_pe"), 0) - DB_Dsv(dt.Rows(i).Item("qta_pe_spedita"), 0)
                    dt.Rows(i).Item("qta_pian_co") = DB_Dsv(dt.Rows(i).Item("qta_pian_co"), 0) - DB_Dsv(dt.Rows(i).Item("qta_co_spedita"), 0)
                    dt.Rows(i).Item("qta_pian_cf") = DB_Dsv(dt.Rows(i).Item("qta_pian_cf"), 0) - DB_Dsv(dt.Rows(i).Item("qta_cf_spedita"), 0)
                    dt.Rows(i).Item("qta_pian_pz") = DB_Dsv(dt.Rows(i).Item("qta_pian_pz"), 0) - DB_Dsv(dt.Rows(i).Item("qta_pz_spedita"), 0)

                    'da pianificazione oraria
                    dt.Rows(i).Item("qta_rif_pian") = DB_Dsv(dt.Rows(i).Item("qta_rif_pian"), 0) - DB_Dsv(dt.Rows(i).Item("qta_gia_pian"), 0)
                    dt.Rows(i).Item("qta_pian_pe") = DB_Dsv(dt.Rows(i).Item("qta_pian_pe"), 0) - DB_Dsv(dt.Rows(i).Item("qta_gia_pian_pe"), 0)
                    dt.Rows(i).Item("qta_pian_co") = DB_Dsv(dt.Rows(i).Item("qta_pian_co"), 0) - DB_Dsv(dt.Rows(i).Item("qta_gia_pian_co"), 0)
                    dt.Rows(i).Item("qta_pian_cf") = DB_Dsv(dt.Rows(i).Item("qta_pian_cf"), 0) - DB_Dsv(dt.Rows(i).Item("qta_gia_pian_cf"), 0)
                    dt.Rows(i).Item("qta_pian_pz") = DB_Dsv(dt.Rows(i).Item("qta_pian_pz"), 0) - DB_Dsv(dt.Rows(i).Item("qta_gia_pian_pz"), 0)

                    'pianificati su medio/lungo termine pp_pianiprod_det
                    If Not Considera_Ordini_Esclusi = "ESCL" Then

                        DB_DataReaderClose(dr_sel_ord_pp_pianipord_det)

                        qdf_sel_ord_pp_pianipord_det.Parameters.Item("anno_ord").Value = DB_Dsv(dt.Rows(i).Item("anno_ord"), 0)
                        qdf_sel_ord_pp_pianipord_det.Parameters.Item("nr_ord").Value = DB_Dsv(dt.Rows(i).Item("nr_ord"), 0)
                        qdf_sel_ord_pp_pianipord_det.Parameters.Item("nr_riga_ord").Value = DB_Dsv(dt.Rows(i).Item("nr_riga_ord"), 0)
                        If Getv(cod_dep) <> "" Then
                            qdf_sel_ord_pp_pianipord_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                        End If

                        DB_DataReaderExecute(dr_sel_ord_pp_pianipord_det, qdf_sel_ord_pp_pianipord_det)

                        If dr_sel_ord_pp_pianipord_det.Read Then
                            dt.Rows(i).Item("qta_rif_pian") = DB_Dsv(dt.Rows(i).Item("qta_rif_pian"), 0) - DB_Dsv(dr_sel_ord_pp_pianipord_det("qta_pian"), 0)
                        End If

                        DB_DataReaderClose(dr_sel_ord_pp_pianipord_det)

                    End If

                    cod_linea_pref = RTrim(DB_Dsv(dt.Rows(i).Item("cod_linea_prod_pre"), ""))
                    cod_ass_pref = RTrim(DB_Dsv(dt.Rows(i).Item("cod_ass_prod_pre"), ""))
                    cod_art_rif = DB_Dsv(dt.Rows(i).Item("cod_art_rif_pian"), "")

                    If Getv(cod_dep) <> "" Then

                        DB_LookUp("cod_dep_linea", "pp_tabpzora", "cod_linea_prod = '" & Getv(cod_linea_pref) & "' AND cod_ass_prod = '" & Getv(cod_ass_pref) & "' AND nr_riga = 1", Cod_Dep_Linea)

                        If Getv(Cod_Dep_Linea) <> Getv(cod_dep) Then
                            Cerca_Linea_Veloce(Getv(cod_art_rif), Getv(cod_dep), Cod_Linea_Prod_Veloce, Cod_Ass_Prod_Veloce)
                            cod_linea_pref = Cod_Linea_Prod_Veloce
                            cod_ass_pref = Cod_Ass_Prod_Veloce
                            dt.Rows(i).Item("cod_linea_prod_pre") = cod_linea_pref
                            dt.Rows(i).Item("cod_ass_prod_pre") = cod_ass_pref
                        End If

                    End If

                    If RTrim(cod_linea_pref) <> "" Then

                        If leggi_pp_tabpzora(cod_linea_pref, cod_ass_pref, cod_art_rif, azienda.tipo_cls_pian_prod, pz_ora_pref, min_lav_pref) Then
                            dt.Rows(i).Item("prod_pz_ora_pref") = pz_ora_pref

                            'calcolo tempo durata preferenziale, in base alla linea preferenziale

                            If DB_Dsv(dt.Rows(i).Item("flag_art_spec"), 0) = 1 Then
                                dt.Rows(i).Item("prod_pz_ora_pref") = 60
                                dt.Rows(i).Item("qta_rif_pian") = min_lav_pref
                            End If

                            If Calcolo_Tempo_PzOra(DB_Dsv(dt.Rows(i).Item("prod_pz_ora_pref"), 0), DB_Dsv(dt.Rows(i).Item("qta_rif_pian"), 0), tempo_calc) Then
                                dt.Rows(i).Item("tempo_pref") = tempo_calc
                            End If

                        End If

                    End If


                End If

                ID_Colore = 0
                If DB_Dsv(dt.Rows(i).Item("flag_art_spec"), 0) = 1 Then
                    'ID_Colore = ID_LAB_ART_SPEC
                End If

                dt.Rows(i).Item("id_colore") = ID_Colore

            Next

            ' cancellazione righe con residuo da pianificare a zero 
            If Elimina_Righe_SenzaQta Then

                For i As Integer = dt.Rows.Count - 1 To 0 Step -1

                    If Math.Round(dt.Rows(i).Item("qta_rif_pian"), 3) <= 0 Then

                        'dt.Rows(i).Delete()
                        dt.Rows.RemoveAt(i)

                    End If

                Next

            End If

            ' RAGGRUPPAMENTO DATI A DETTAGLIO ORDINI (CON TOTALE DELLE QTA NEI NOMI DEI GRUPPI)

            If pp_modelli_rag.cod_mod <> "" Then

                ' tipo quantità da visualizzare nei gruppi

                Select Case pp_modelli_rag.tipo_um_qta_ord
                    Case "L"
                        nome_campo_qta = "Co"
                        nome_campo_ordcli = "qta_co_ordcli"
                        nome_campo_rif_pian = "qta_pian_co"
                        nome_campo_gia_pian = "qta_gia_pian_co"
                        nome_campo_spedita = "qta_co_spedita"
                    Case "C"
                        nome_campo_qta = "Cf"
                        nome_campo_ordcli = "qta_cf_ordcli"
                        nome_campo_rif_pian = "qta_pian_cf"
                        nome_campo_gia_pian = "qta_gia_pian_cf"
                        nome_campo_spedita = "qta_cf_spedita"
                    Case "P"
                        nome_campo_qta = "Pz"
                        nome_campo_ordcli = "qta_pz_ordcli"
                        nome_campo_rif_pian = "qta_pian_pz"
                        nome_campo_gia_pian = "qta_gia_pian_pz"
                        nome_campo_spedita = "qta_pz_spedita"
                    Case "K"
                        nome_campo_qta = "KG"
                        nome_campo_ordcli = "qta_pe_ordcli"
                        nome_campo_rif_pian = "qta_pian_pe"
                        nome_campo_gia_pian = "qta_gia_pian_pe"
                        nome_campo_spedita = "qta_pe_spedita"
                    Case "U"
                        nome_campo_qta = "UM"
                        nome_campo_ordcli = "qta_ordcli"
                        nome_campo_rif_pian = "qta_rif_pian"
                        nome_campo_gia_pian = "qta_gia_pian"
                        nome_campo_spedita = "qta_spedita"
                    Case Else '  default = PZ
                        nome_campo_qta = "Pz"
                        nome_campo_ordcli = "qta_pz_ordcli"
                        nome_campo_rif_pian = "qta_pian_pz"
                        nome_campo_gia_pian = "qta_gia_pian_pz"
                        nome_campo_spedita = "qta_pz_spedita"
                End Select

                For i = 0 To dt.Rows.Count - 1

                    If pp_modelli_rag.campo1_ord <> "" Then
                        filtro_campo_ord = "     cod_campo1_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), "")) & "' "
                        dt.Rows(i).Item("des_campo1_ord") = "(" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), "")) & ")" &
                                                            " " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo1_ord, Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), ""))) &
                                                            "    (" & nome_campo_qta & ")" &
                                                            "    Ordinata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_ordcli).ToString &
                                                            "    da Pianificare:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_rif_pian).ToString &
                                                            "    già Pianificata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_gia_pian).ToString &
                                                            "    Spedita:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_spedita).ToString
                    End If

                    If pp_modelli_rag.campo2_ord <> "" Then
                        filtro_campo_ord = "     cod_campo1_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), "")) & "' " &
                                           " AND cod_campo2_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo2_ord"), "")) & "' "
                        dt.Rows(i).Item("des_campo2_ord") = "(" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo2_ord"), "")) & ")" &
                                                            " " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo2_ord, Trim(DB_Dsv(dt.Rows(i).Item("cod_campo2_ord"), ""))) &
                                                            "    (" & nome_campo_qta & ")" &
                                                            "    Ordinata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_ordcli).ToString &
                                                            "    da Pianificare:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_rif_pian).ToString &
                                                            "    già Pianificata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_gia_pian).ToString &
                                                            "    Spedita:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_spedita).ToString

                    End If

                    If pp_modelli_rag.campo3_ord <> "" Then
                        filtro_campo_ord = "     cod_campo1_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), "")) & "' " &
                                           " AND cod_campo2_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo2_ord"), "")) & "' " &
                                           " AND cod_campo3_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo3_ord"), "")) & "' "
                        dt.Rows(i).Item("des_campo3_ord") = "(" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo3_ord"), "")) & ")" &
                                                            " " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo3_ord, Trim(DB_Dsv(dt.Rows(i).Item("cod_campo3_ord"), ""))) &
                                                            "    (" & nome_campo_qta & ")" &
                                                            "    Ordinata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_ordcli).ToString &
                                                            "    da Pianificare:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_rif_pian).ToString &
                                                            "    già Pianificata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_gia_pian).ToString &
                                                            "    Spedita:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_spedita).ToString
                    End If

                    If pp_modelli_rag.campo4_ord <> "" Then
                        filtro_campo_ord = "     cod_campo1_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), "")) & "' " &
                                           " AND cod_campo2_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo2_ord"), "")) & "' " &
                                           " AND cod_campo3_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo3_ord"), "")) & "' " &
                                           " AND cod_campo4_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo4_ord"), "")) & "' "
                        dt.Rows(i).Item("des_campo4_ord") = "(" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo4_ord"), "")) & ")" &
                                                            " " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo4_ord, Trim(DB_Dsv(dt.Rows(i).Item("cod_campo4_ord"), ""))) &
                                                            "    (" & nome_campo_qta & ")" &
                                                            "    Ordinata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_ordcli).ToString &
                                                            "    da Pianificare:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_rif_pian).ToString &
                                                            "    già Pianificata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_gia_pian).ToString &
                                                            "    Spedita:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_spedita).ToString
                    End If

                    If pp_modelli_rag.campo5_ord <> "" Then
                        filtro_campo_ord = "     cod_campo1_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo1_ord"), "")) & "' " &
                                           " AND cod_campo2_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo2_ord"), "")) & "' " &
                                           " AND cod_campo3_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo3_ord"), "")) & "' " &
                                           " AND cod_campo4_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo4_ord"), "")) & "' " &
                                           " AND cod_campo5_ord = '" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo5_ord"), "")) & "' "
                        dt.Rows(i).Item("des_campo5_ord") = "(" & Trim(DB_Dsv(dt.Rows(i).Item("cod_campo5_ord"), "")) & ")" &
                                                            " " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo5_ord, Trim(DB_Dsv(dt.Rows(i).Item("cod_campo5_ord"), ""))) &
                                                            "    (" & nome_campo_qta & ")" &
                                                            "    Ordinata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_ordcli).ToString &
                                                            "    da Pianificare:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_rif_pian).ToString &
                                                            "    già Pianificata:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_gia_pian).ToString &
                                                            "    Spedita:  " & calcola_totale(dt, filtro_campo_ord, nome_campo_spedita).ToString
                    End If

                Next

            End If

        End If

    End Sub

    Private Function leggi_descrizione(ByVal tipo_classe As String, ByVal nome_campo As String, ByVal cod_campo As String) As String
        Dim des_campo As String = ""

        If InStr(nome_campo, "anaart.cod_sott") > 0 Then
            Leggi_Clsart_Sottofamiglia(tipo_classe, cod_campo, des_campo)
        ElseIf InStr(nome_campo, "anaart.cod_fam") > 0 Then
            Leggi_Clsart_Famiglia(tipo_classe, cod_campo, des_campo)
        ElseIf InStr(nome_campo, "anaart.cod_sett") > 0 Then
            Leggi_Clsart_Settore(tipo_classe, cod_campo, des_campo)
        ElseIf InStr(nome_campo, "anaart.cod_linea") > 0 Then
            Leggi_Clsart_Linea(tipo_classe, cod_campo, des_campo)
        ElseIf InStr(nome_campo, "anaart.cod_art") > 0 Then
            Leggi_Anaart(cod_campo, des_campo)
        Else
            des_campo = ""
        End If

        leggi_descrizione = des_campo

    End Function

    Private Function leggi_descrizione_breve(ByVal nome_campo As String) As String
        Dim des_campo As String = ""

        If InStr(nome_campo, "anaart.cod_sott") > 0 Then
            des_campo = "Sott."
        ElseIf InStr(nome_campo, "anaart.cod_fam") > 0 Then
            des_campo = "Fam."
        ElseIf InStr(nome_campo, "anaart.cod_sett") > 0 Then
            des_campo = "Sett."
        ElseIf InStr(nome_campo, "anaart.cod_linea") > 0 Then
            des_campo = "Lin."
        ElseIf InStr(nome_campo, "anaart.cod_art") > 0 Then
            des_campo = "Art."
        Else
            des_campo = ""
        End If

        leggi_descrizione_breve = des_campo

    End Function

    Private Function calcola_totale(dt As DataTable, filtro As String, nome_campo As String) As Double

        Dim tt As Double
        Dim RowArray() As DataRow = Nothing

        RowArray = dt.Select(filtro)

        tt = 0

        For i_r = 0 To RowArray.GetUpperBound(0)
            If Trim(DB_Dsv(RowArray(i_r)(nome_campo))) <> "" Then
                tt = tt + Object_Val(DB_Dsv(RowArray(i_r).Item(nome_campo), 0))
            End If
        Next i_r

        calcola_totale = tt

    End Function

    Sub Crea_Grid_Pianipord_Det(ByRef dt As DataTable)

        If DT_Create_Temp_DataTable(dt,
                " anno_ord              , integer   ; " &
                " nr_ord                , integer   ; " &
                " nr_riga_ord           , integer   ; " &
                " cod_dep			    , char      ; " &
                " cod_doc			    , char      ; " &
                " cod_art               , string    ; " &
                " des_art               , string    ; " &
                " cod_um                , string    ; " &
                " tipo_um               , string    ; " &
                " cod_linea_prod_pre    , string    ; " &
                " des_linea_prod_pre    , string    ; " &
                " cod_ass_prod_pre      , string    ; " &
                " des_ass_prod_pre      , string    ; " &
                " prod_pz_ora_pref      , float     ; " &
                " min_lav_pref          , float     ; " &
                " tempo_pref            , timespan  ; " &
                " qta                   , float     ; " &
                " cod_cli               , integer   ; " &
                " rag_soc               , string    ; " &
                " cod_giro              , string    ; " &
                " data_cons             , date      ; " &
                " cod_int               , integer   ; " &
                " cod_vet1              , char      ; " &
                " data_pian             , date      ; " &
                " ora_pian              , datetime  ; " &
                " id_colore             , integer   ; " &
                " qta_ordcli            , float     ; " &
                " qta_co_ordcli         , float     ; " &
                " qta_cf_ordcli         , float     ; " &
                " qta_pe_ordcli         , float     ; " &
                " qta_pz_ordcli         , float     ; " &
                " qta_spedita           , float     ; " &
                " qta_co_spedita        , float     ; " &
                " qta_cf_spedita        , float     ; " &
                " qta_pe_spedita        , float     ; " &
                " qta_pz_spedita        , float     ; " &
                " qta_gia_pian          , float     ; " &
                " qta_gia_pian_co       , float     ; " &
                " qta_gia_pian_cf       , float     ; " &
                " qta_gia_pian_pe       , float     ; " &
                " qta_gia_pian_pz       , float     ; " &
                " data_cons_ordcli      , date      ; " &
                " flag_data_cons        , string    ; " &
                " prod_pz_ora           , float     ; " &
                " min_inizio            , float     ; " &
                " min_lav               , float     ; " &
                " tempo                 , timespan  ; " &
                " cod_linea_pian        , string    ; " &
                " des_linea_pian        , string    ; " &
                " qta_rif_pian          , float     ; " &
                " qta_pian_pe           , float     ; " &
                " qta_pian_co           , float     ; " &
                " qta_pian_cf           , float     ; " &
                " qta_pian_pz           , float     ; " &
                " cod_art_rif_pian      , string    ; " &
                " data_spedizione_ordcli, date      ; " &
                " ora_spedizione_ordcli , timespan  ; " &
                " data_ordinam          , date      ; " &
                " flag_art_spec         , integer   ; " &
                " flag_prop_inizio      , integer   ; " &
                " flag_prop_ini_seq      , integer   ; " &
                " flag_prop_cam_seq     , integer   ; " &
                " flag_prop_fine        , integer   ; " &
                " cod_campo1_ord        , string    ; " &
                " cod_campo2_ord        , string    ; " &
                " cod_campo3_ord        , string    ; " &
                " cod_campo4_ord        , string    ; " &
                " cod_campo5_ord        , string    ; " &
                " des_campo1_ord        , string    ; " &
                " des_campo2_ord        , string    ; " &
                " des_campo3_ord        , string    ; " &
                " des_campo4_ord        , string    ; " &
                " des_campo5_ord        , string    ; " &
                    "", ";", ",") = False Then

        End If

    End Sub

    Private Sub view_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles grid_pianiprod_det_view.MouseDown, gridview_artmag.MouseDown

        Dim view As GridView
        Dim hitInfo As GridHitInfo

        down_hitInfo = Nothing

        view = TryCast(sender, GridView)
        hitInfo = view.CalcHitInfo(New Point(e.X, e.Y))

        If Control.ModifierKeys <> Keys.None Then
            Return
        End If

        If e.Button = MouseButtons.Left AndAlso hitInfo.RowHandle >= 0 Then
            down_hitInfo = hitInfo
        End If

    End Sub

    Private Sub view_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles grid_pianiprod_det_view.MouseMove, grid_piano_view.MouseMove, gridview_artmag.MouseMove

        Dim view As GridView
        Dim dragSize As Size
        Dim dragRect As Rectangle
        Dim row As DataRow

        Try

            view = TryCast(sender, GridView)

            If e.Button = MouseButtons.Left AndAlso down_hitInfo IsNot Nothing Then

                dragSize = SystemInformation.DragSize
                dragRect = New Rectangle(New Point(down_hitInfo.HitPoint.X - dragSize.Width / 2, down_hitInfo.HitPoint.Y - dragSize.Height / 2), dragSize)

                If (Not dragRect.Contains(New Point(e.X, e.Y))) Then
                    row = view.GetDataRow(down_hitInfo.RowHandle)

                    If Not row Is Nothing Then

                        view.GridControl.DoDragDrop(row, DragDropEffects.Move)
                        down_hitInfo = Nothing
                        DevExpress.Utils.DXMouseEventArgs.GetMouseArgs(e).Handled = True

                    End If

                End If

            End If

        Catch ex As Exception

        End Try

    End Sub

    Private Sub grid_DragOver(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles grid_piano.DragOver, grid_pianiprod_det.DragOver, gridctrl_artmag.DragOver

        Dim grid As GridControl
        Dim pt As Point
        Dim view As GridView

        grid = CType(sender, GridControl)

        pt = New Point(e.X, e.Y)
        pt = grid.PointToClient(pt)

        view = TryCast(grid.GetViewAt(pt), GridView)

        If view Is Nothing Then
            Return
        End If

        Dim hitInfo As GridHitInfo = view.CalcHitInfo(pt)

        If hitInfo.HitTest = GridHitTest.EmptyRow Then
            r_handle_drop = -1
            col_drop = Nothing
        Else
            r_handle_drop = hitInfo.RowHandle
            col_drop = hitInfo.Column
        End If

        If Not col_drop Is Nothing AndAlso Not vet_colonne_valide.Contains(col_drop.FieldName) Then
            e.Effect = DragDropEffects.None
        Else
            e.Effect = DragDropEffects.Move
            autoScrollHelper.ScrollIfNeeded()
        End If

    End Sub

    Private Sub grid_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles grid_piano.DragDrop, grid_pianiprod_det.DragDrop, gridctrl_artmag.DragDrop

        Dim grid As GridControl = TryCast(sender, GridControl)
        Dim table As DataTable = TryCast(grid.DataSource, DataTable)
        Dim row As DataRow = TryCast(e.Data.GetData(GetType(DataRow)), DataRow)
        Dim view As GridView = grid.Views(0)
        Dim hitInfo As GridHitInfo
        Dim data_sped As Object
        Dim data_piano As Object
        Dim id_comp_agg As Long
        Dim nr_riga_comp_agg As Long
        Dim qta_um As Double
        Dim DtRowHandle As Integer
        Dim GridRowHandle As Integer
        Dim Messaggio As String = ""

        If Not Timer_Refresh_Ordini Is Nothing Then
            Timer_Refresh_Ordini.Stop()
        End If

        grid = TryCast(sender, GridControl)
        table = TryCast(grid.DataSource, DataTable)
        row = TryCast(e.Data.GetData(GetType(DataRow)), DataRow)
        view = TryCast(grid.Views(0), GridView)

        down_hitInfo = Nothing

        hitInfo = view.CalcHitInfo(New Point(e.X, e.Y))

        If Control.ModifierKeys <> Keys.None Then
            Return
        End If

        If Pp_Pianiprod_Bloccato = True Then
            Messaggio = ""
            Messaggio = Messaggio & "Un utente sta modificando i tuoi stessi dati." & vbCrLf
            Messaggio = Messaggio & "Attendere che l'altro utente completi le operazioni e riprovare."
            XtraMessageBox.Show(Messaggio, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Warning)
            Exit Sub
        End If

        If row IsNot Nothing AndAlso table IsNot Nothing AndAlso row.Table IsNot table Then


            ' MsgBox("Riga: " & r_handle_drop)
            ' MsgBox("Colonna: " & col_drop.ToString)

            If col_drop Is Nothing Then Exit Sub

            'controllo su date. Se data scelta è maggiore della data spedizione e data spedizione non è vuota. BLOCCO

            data_piano = col_drop.Tag
            data_sped = DB_Dsv(row("data_spedizione_ordcli"))

            '
            ' \\\\ l'articolo è stato trascinato partendo dalla griglia degli articoli di magazzino
            '

            If Trim(DB_Dsv(row("data_spedizione_ordcli"), "")) = "ARTMAG" Then

                qta_um = DB_Dsv(row("qta_um"), 0)

                If Trim(DB_Dsv(row("cod_art"), "")) = "" Then

                    XtraMessageBox.Show("Indicare l'articolo.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    gridview_artmag.FocusedColumn = gridview_artmag.Columns("cod_art")
                    gridview_artmag.ShowEditor()
                    Exit Sub

                ElseIf Math.Round(qta_um, 3) = 0 Then

                    XtraMessageBox.Show("Indicare la Quantità da Produrre per l'articolo " & Trim(DB_Dsv(row("cod_art"), "")) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    gridview_artmag.FocusedColumn = gridview_artmag.Columns("qta_um")
                    gridview_artmag.ShowEditor()
                    Exit Sub

                Else

                    If Esistono_Commesse(data_piano, Trim(DB_Dsv(row("cod_art"), "")), xx1) Then
                        If azienda_agg.flag_aggcomm_pp <> "S" Then
                            XtraMessageBox.Show("Articolo " & Trim(DB_Dsv(row("cod_art"), "")) & " già presente in commessa di produzione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                            Exit Sub
                        Else
                            If XtraMessageBox.Show("Articolo " & Trim(DB_Dsv(row("cod_art"), "")) & " già presente in commessa di produzione." & vbCrLf & vbCrLf & "Si vuole continuare?", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.No Then
                                Exit Sub
                            End If
                        End If
                    End If

                    pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), data_piano, Trim(DB_Dsv(row("ragg_prod"), "")), Trim(DB_Dsv(row("cod_linea_prod_pre"), "")),
                                           Trim(DB_Dsv(row("cod_ass_prod_pre"), "")), "P", DB_Dsv(row("qta_um"), 0), DB_Dsv(row("qta_co"), 0), DB_Dsv(row("qta_cf"), 0), DB_Dsv(row("qta_pe"), 0),
                                           DB_Dsv(row("qta_pz"), 0), id_comp_agg, nr_riga_comp_agg, DBNull.Value, Getv(cod_dep))

                    dt_grid_pianiprod_det.AcceptChanges()

                    XtraMessageBox.Show("Aggiunto articolo " & Trim(DB_Dsv(row("cod_art"), "")) & ", quantità " & Trim(DB_Dsv(row("qta_um"), 0)) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)

                    flag_fatte_mod = True

                    GridRowHandle = gridview_artmag.GetSelectedRows(0)
                    DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)

                    Call dt_artmag_pulisci_riga(DtRowHandle)

                    Call dt_artmag_calcola_valori(DtRowHandle)

                    Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)


                End If

                Exit Sub

            End If

            ' ////

            If IsDate(data_piano) AndAlso CDate(data_piano) < Now.Date Then

                XtraMessageBox.Show("Impossibile pianificare un ordine in una data inferiore ad oggi.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Sub
            End If


            If Not Field_Null(data_sped) Then

                If CDate(data_piano) > CDate(data_sped) Then

                    XtraMessageBox.Show("La data di spedizione (" & Getv(data_sped) & ") è inferiore alla data di pianificazione indicata (" & Getv(data_piano) & "). ", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Exit Sub
                End If

            End If

            f_pp_pianiprod_det_qta.Row_Ordine = row
            f_pp_pianiprod_det_qta.EditMask = EditMask

            f_pp_pianiprod_det_qta.ShowDialog()

            If f_pp_pianiprod_det_qta.DialogResult = Windows.Forms.DialogResult.OK Then

                'su pp_pianiprod inserisco solamente la riga con quantità a ZERO
                Aggiungi_Ordine_Pianificazione(Tipo_Art_Prod_Testata, row, data_piano, f_pp_pianiprod_det_qta.Qta_Pian)

                dt_grid_pianiprod_det.AcceptChanges()

                flag_fatte_mod = True

                'Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)
                Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

            End If

            '    table.ImportRow(row)
            '    row.Delete()

        End If

        grid_pianiprod_det_view.RefreshData()

        If Not Timer_Refresh_Ordini Is Nothing Then

            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End If

    End Sub

    Private Sub Aggiungi_Ordine_Pianificazione(ByVal tipo_art_prod As Object, ByRef r As DataRow, ByVal data_piano As Object, ByVal qta_associata As Double)
        Dim qta As Double
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double
        Dim rows() As DataRow
        Dim pref_cmp As String
        Dim id_comp_agg As Integer
        Dim nr_riga_comp_agg As Integer
        Dim nr_record_upd As Integer
        Dim Cod_Dep_Linea As Object = Nothing
        Dim Cod_Ass_Prod_Veloce As Object = Nothing
        Dim Cod_Linea_Prod_Veloce As Object = Nothing

        Try

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
            DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
            Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(r("cod_art"), ""))
            DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

            If Pianprod_Dr_Sel_Anaart.Read Then

                '                '
                '0a: QTA ASSOCIATA PER ORDINE
                '
                rows = dt_piano.Select("cod_art = '" & Trim(DB_Dsv(r("cod_art"), "")) & "' ")

                If rows.Length > 0 Then

                    'esiste già qualcosa di pianificato x questo articolo
                    '1: Esiste già una parte dello stesso ordine associato a questa produzione per cui faccio UPDATE delle quentità

                    pref_cmp = Cerca_Lista_Date_Prefisso(data_piano)
                    ' \\\\ 
                    ' OLD
                    'qta = Math.Round(Object_Val(qta_associata), 3) + Math.Round(Object_Val(DB_Dsv(rows(0).Item(pref_cmp & "qta_pian_ord_data"), 0)), 3)
                    ' NEW
                    qta = Math.Round(Object_Val(qta_associata), 3)
                    ' ////

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                qta, qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    DB_CommandParametersReset(qdf_upd_pp_pianiprod_det)

                    qdf_upd_pp_pianiprod_det.Parameters.Item("qta_pian").Value = CInt(Object_Val(qta))
                    qdf_upd_pp_pianiprod_det.Parameters.Item("qta_pian_co").Value = CInt(Object_Val(qta_co))
                    qdf_upd_pp_pianiprod_det.Parameters.Item("qta_pian_cf").Value = CInt(Object_Val(qta_cf))
                    qdf_upd_pp_pianiprod_det.Parameters.Item("qta_pian_pe").Value = CInt(Object_Val(qta_pe))
                    qdf_upd_pp_pianiprod_det.Parameters.Item("qta_pian_pz").Value = CInt(Object_Val(qta_pz))
                    qdf_upd_pp_pianiprod_det.Parameters.Item("anno_ord").Value = DB_Dsv(r("anno_ord"), 0)
                    qdf_upd_pp_pianiprod_det.Parameters.Item("nr_ord").Value = DB_Dsv(r("nr_ord"), 0)
                    qdf_upd_pp_pianiprod_det.Parameters.Item("nr_riga_ord").Value = DB_Dsv(r("nr_riga_ord"), 0)
                    qdf_upd_pp_pianiprod_det.Parameters.Item("data_piano").Value = CDate(data_piano)
                    If Getv(cod_dep) <> "" Then
                        qdf_upd_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                    End If
                    nr_record_upd = DB_CommandExecute(qdf_upd_pp_pianiprod_det)

                    If nr_record_upd = 0 Then

                        '2: Esiste una pianificazione interna (con già un ordine associato diverso da quello corrente oppure senza nessun ordine)
                        '   per cui vado in insert su pp_pianiprod_det con id della pianificazione esistente per associare il nuovo ordine trascinato

                        pp_pianiprod_Aggiungi(Getv(tipo_art_prod), Trim(DB_Dsv(r("cod_art"), "")), Getv(data_piano), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                          DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", 0, 0, 0, 0, 0, id_comp_agg, nr_riga_comp_agg, DBNull.Value, Getv(cod_dep))

                        Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                  Math.Round(Object_Val(qta_associata), 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                        'nuovo inserimetno ordine
                        DB_CommandParametersReset(qdf_ins_pp_pianiprod_det)

                        qdf_ins_pp_pianiprod_det.Parameters.Item("id_pianiprod").Value = id_comp_agg
                        qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_pianiprod").Value = nr_riga_comp_agg
                        qdf_ins_pp_pianiprod_det.Parameters.Item("anno_ord").Value = DB_Dsv(r("anno_ord"), 0)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("nr_ord").Value = DB_Dsv(r("nr_ord"), 0)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_ord").Value = DB_Dsv(r("nr_riga_ord"), 0)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("cod_art_pian").Value = Trim(DB_Dsv(r("cod_art"), ""))
                        qdf_ins_pp_pianiprod_det.Parameters.Item("data_piano").Value = CDate(data_piano)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian").Value = Math.Round(Object_Val(qta_associata), 3)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_co").Value = qta_co
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_cf").Value = qta_cf
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pe").Value = qta_pe
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pz").Value = qta_pz
                        qdf_ins_pp_pianiprod_det.Parameters.Item("stato_pian").Value = 0
                        If Getv(cod_dep) <> "" Then
                            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                        End If
                        qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")
                        qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")

                        If Getv(cod_dep) <> "" Then

                            DB_LookUp("cod_dep_linea", "pp_tabpzora", "cod_linea_prod = '" & Getv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")) & "' AND cod_ass_prod = '" & Getv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")) & "' AND nr_riga = 1", Cod_Dep_Linea)

                            If Getv(Cod_Dep_Linea) <> Getv(cod_dep) Then
                                Cerca_Linea_Veloce(Trim(DB_Dsv(r("cod_art"), "")), Getv(cod_dep), Cod_Linea_Prod_Veloce, Cod_Ass_Prod_Veloce)
                                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Cod_Linea_Prod_Veloce
                                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Cod_Ass_Prod_Veloce
                            End If

                        End If

                        DB_CommandExecute(qdf_ins_pp_pianiprod_det)

                    End If



                Else

                    'in pp_pianiprod aggiungo una riga con qta pianificata e impr a zero
                    pp_pianiprod_Aggiungi(Getv(tipo_art_prod), Trim(DB_Dsv(r("cod_art"), "")), Getv(data_piano), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                           DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", 0, 0, 0, 0, 0, id_comp_agg, nr_riga_comp_agg, DBNull.Value, Getv(cod_dep))

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                              Math.Round(Object_Val(qta_associata), 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    'nuovo inserimetno ordine
                    DB_CommandParametersReset(qdf_ins_pp_pianiprod_det)

                    qdf_ins_pp_pianiprod_det.Parameters.Item("id_pianiprod").Value = id_comp_agg
                    qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_pianiprod").Value = nr_riga_comp_agg
                    qdf_ins_pp_pianiprod_det.Parameters.Item("anno_ord").Value = DB_Dsv(r("anno_ord"), 0)
                    qdf_ins_pp_pianiprod_det.Parameters.Item("nr_ord").Value = DB_Dsv(r("nr_ord"), 0)
                    qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_ord").Value = DB_Dsv(r("nr_riga_ord"), 0)
                    qdf_ins_pp_pianiprod_det.Parameters.Item("cod_art_pian").Value = Trim(DB_Dsv(r("cod_art"), ""))
                    qdf_ins_pp_pianiprod_det.Parameters.Item("data_piano").Value = CDate(data_piano)
                    qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian").Value = Math.Round(Object_Val(qta_associata), 3)
                    qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_co").Value = qta_co
                    qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_cf").Value = qta_cf
                    qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pe").Value = qta_pe
                    qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pz").Value = qta_pz
                    qdf_ins_pp_pianiprod_det.Parameters.Item("stato_pian").Value = 0
                    If Getv(cod_dep) <> "" Then
                        qdf_ins_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                    End If
                    qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")
                    qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")

                    If Getv(cod_dep) <> "" Then

                        DB_LookUp("cod_dep_linea", "pp_tabpzora", "cod_linea_prod = '" & Getv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")) & "' AND cod_ass_prod = '" & Getv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")) & "' AND nr_riga = 1", Cod_Dep_Linea)

                        If Getv(Cod_Dep_Linea) <> Getv(cod_dep) Then
                            Cerca_Linea_Veloce(Trim(DB_Dsv(r("cod_art"), "")), Getv(cod_dep), Cod_Linea_Prod_Veloce, Cod_Ass_Prod_Veloce)
                            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Cod_Linea_Prod_Veloce
                            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Cod_Ass_Prod_Veloce
                        End If

                    End If

                    DB_CommandExecute(qdf_ins_pp_pianiprod_det)

                    End If


                    If Math.Round(Object_Val(qta_associata), 3) < Math.Round(Object_Val(r("qta_rif_pian")), 3) Then

                        'riduco l'ordine in griglia
                        r("qta_rif_pian") = Object_Val(r("qta_rif_pian")) - Object_Val(qta_associata)

                    Else   'If Math.Round(Object_Val(qta_associata), 3) > Math.Round(Object_Val(r("qta_ordcli")), 3) Then

                        'cancello la riga dalla lista deglio ordini
                        r.Delete()

                    End If

            End If

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

        Catch ex As Exception

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            MsgErr(ex)

        Finally
            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

        End Try

    End Sub


    Private Sub grid_piano_view_ord_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)

        Dim row As DataRow
        Dim col As GridColumn
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double

        Dim qta_pian_ord As Double
        Dim qta_gia_pian As Double

        Dim id As Integer
        Dim nr_riga As Integer

        Dim pref_cmp As String
        Dim prev_focus_row As Integer

        Dim data_piano As Object

        If Field_Null(e.Button.Tag) Then Exit Sub

        Select Case e.Button.Tag

            Case "conf_qta"

                col = grid_piano_view.FocusedColumn

                data_piano = col.Tag

                If IsDate(data_piano) And CDate(data_piano) < Now.Date Then
                    Exit Sub
                End If

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                prev_focus_row = grid_piano_view.FocusedRowHandle

                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                qta_gia_pian = Object_Val(row(pref_cmp & "qta_pian_data"))
                qta_pian_ord = Object_Val(row(pref_cmp & "qta_pian_ord_data"))

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                  Math.Round(qta_pian_ord, 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))


                    flag_fatte_mod = True

                    Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

                    grid_piano_view.FocusedRowHandle = prev_focus_row

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            Case "vis_ord"

                col = grid_piano_view.FocusedColumn
                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                prev_focus_row = grid_piano_view.FocusedRowHandle

                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                If Field_Null(row(pref_cmp & "id")) Then Exit Sub

                f_pp_pianipord_det_ord.Id_Pianiprod = DB_Dsv(row(pref_cmp & "id"), 0)
                f_pp_pianipord_det_ord.Nr_Riga_Pianiprod = Getv(DB_Dsv(row(pref_cmp & "lista_righe_pian"), "")).Split("|")(1)
                f_pp_pianipord_det_ord.Qta_Pian = CDbl(DB_Dsv(row(pref_cmp & "qta_pian_data"), 0))
                f_pp_pianipord_det_ord.Cod_Art_Cerca = DB_Dsv(row("cod_art"), "")
                f_pp_pianipord_det_ord.Data_Piano_Cerca = col.Tag
                f_pp_pianipord_det_ord.EditMask = EditMask
                f_pp_pianipord_det_ord.Cod_Dep = Getv(cod_dep)

                f_pp_pianipord_det_ord.ShowDialog()

                If f_pp_pianipord_det_ord.DialogResult = Windows.Forms.DialogResult.OK Then
                    Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)
                    Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")
                End If

                grid_piano_view.UnselectRow(0)
                grid_piano_view.SelectRow(prev_focus_row)
                grid_piano_view.FocusedRowHandle = prev_focus_row

                f_pp_pianipord_det_ord.Dispose()

        End Select


    End Sub

    Private Sub grid_piano_view_qta_impr_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)

        Dim row As DataRow
        Dim cod_art As Object
        Dim col As GridColumn
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double

        Dim qta_pian_impr As Double
        Dim qta_gia_pian As Double

        Dim id As Integer
        Dim nr_riga As Integer

        Dim pref_cmp As String
        Dim prev_focus_row As Integer

        Dim data_piano As Object

        If Field_Null(e.Button.Tag) Then Exit Sub

        Select Case e.Button.Tag

            Case "conf_qta"

                col = grid_piano_view.FocusedColumn

                data_piano = col.Tag

                If IsDate(data_piano) And CDate(data_piano) < Now.Date Then
                    Exit Sub
                End If

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                prev_focus_row = grid_piano_view.FocusedRowHandle
                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                qta_gia_pian = Object_Val(row(pref_cmp & "qta_pian_data"))
                qta_pian_impr = Object_Val(row(pref_cmp & "qta_impr_data"))

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                  Math.Round(qta_pian_impr, 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))


                    flag_fatte_mod = True

                    Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

                    grid_piano_view.FocusedRowHandle = prev_focus_row

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            Case "relazioni"

                col = grid_piano_view.FocusedColumn
                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                cod_art = DB_Dsv(row("cod_art"), "")

                qta_um = DB_Dsv(row(pref_cmp & "qta_pian_data"), 0)

                'se non ho pianificato, allora metto impegnato prod
                If qta_um = 0 Then
                    qta_um = DB_Dsv(row(pref_cmp & "qta_impr_data"), 0)
                End If

                f_relazioni.Cod_Art = cod_art
                f_relazioni.Data_Piano = col.Tag
                f_relazioni.Qta_Pian = qta_um
                f_relazioni.EditMask = EditMask
                f_relazioni.Cod_Dep = Getv(cod_dep)

                f_relazioni.ShowDialog()

        End Select


    End Sub

    Private Sub grid_piano_view_qta_pian_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)

        Dim DtRow As DataRow
        Dim cod_art As Object
        Dim col As GridColumn
        Dim qta_pian As Double
        Dim pref_cmp As String
        Dim data_piano As Object
        Dim id As Object = Nothing
        Dim nr_riga As Object = Nothing
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double
        Dim id_comp_agg As Integer
        Dim nr_riga_comp_agg As Integer
        Dim utente_agg As String = DB_GetConnectionInfo("uid")
        Dim data_agg As String = Format(Now, "dd/MM/yyyy")
        Dim ora_agg As String = Format(Now, "HH:mm:ss")
        Dim cod_linea_prod As String = ""

        If Trim(e.Button.Tag) = "" Then
            Exit Sub
        End If

        col = grid_piano_view.FocusedColumn
        pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

        DtRow = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)

        cod_art = DB_Dsv(DtRow("cod_art"), "")
        qta_pian = DB_Dsv(DtRow(pref_cmp & "qta_pian_data"), 0)
        cod_linea_prod = DB_Dsv(DtRow(pref_cmp & "cod_linea_prod"), "")

        Select Case e.Button.Tag

            Case "relazioni"

                'se non ho pianificato, allora metto impegnato prod
                If qta_pian = 0 Then
                    qta_pian = DB_Dsv(DtRow(pref_cmp & "qta_impr_data"), 0)
                End If

                f_relazioni.Cod_Art = cod_art
                f_relazioni.Data_Piano = col.Tag
                f_relazioni.Qta_Pian = qta_pian
                f_relazioni.EditMask = EditMask
                f_relazioni.Cod_Dep = Getv(cod_dep)

                f_relazioni.ShowDialog()

            Case "sposta_qta"

                If grid_piano_view.ActiveEditor.IsEditorActive Then
                    qta_pian = DB_Dsv(grid_piano_view.ActiveEditor.EditValue, 0)
                Else
                    qta_pian = DB_Dsv(DtRow(pref_cmp & "qta_pian_data"), 0)
                End If

                If Math.Round(qta_pian, 3) = 0 Then
                    Beep()
                    'XtraMessageBox.Show("Nessuna quantità pianificata da spostare.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    Exit Sub
                End If

                ' chiede nuova data produzione

                f_data_pian.Data_Pian_Max = a_data_pian.EditValue
                f_data_pian.Data_Pian_Min = da_data_pian.EditValue
                f_data_pian.Form_Text = "Spostamento Produzione"
                f_data_pian.Label_Text = "Nuova Data Produzione:"

                If f_data_pian.ShowDialog = Windows.Forms.DialogResult.Cancel Then
                    f_data_pian.Dispose()
                    Exit Sub
                End If

                ' nuova data produzione

                data_piano = f_data_pian.Data_Pian

                If DateValue(data_piano) = DateValue(col.Tag) Then
                    Beep()
                    XtraMessageBox.Show("La nuova data produzione è la stessa!", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                    Exit Sub
                End If

                ' legge dati articolo

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(DtRow("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    '
                    ' 1) aggiorna tabella con data-ora inserimento originali (servirà in fase di salvataggio --> Salva_Pianiprod())
                    '

                    ' elimina eventuali spostamenti precedenti per lo stesso articolo di riferimento e data
                    sql = ""
                    sql = sql & "DELETE FROM " & dbtempname_pianiprod_old & vbCrLf
                    sql = sql & " WHERE cod_art_rif = '" & Trim(DB_Dsv(Pianprod_Dr_Sel_Anaart.Item("cod_art"), "")) & "'" & vbCrLf
                    sql = sql & "   AND data_piano  = '" & DB_Sql_Date(data_piano) & "'" & vbCrLf

                    DB_SqlExecute(sql)

                    sql = ""
                    sql = sql & "INSERT INTO " & dbtempname_pianiprod_old & " (cod_art_rif, cod_art_piano, data_piano, utente_ins, data_ins, ora_ins, utente_agg, data_agg, ora_agg) " & vbCrLf
                    sql = sql & "SELECT DISTINCT '" & Trim(DB_Dsv(Pianprod_Dr_Sel_Anaart.Item("cod_art"), "")) & "' AS cod_art_rif, " & vbCrLf  ' articolo di riferimento per operazione di spostamento produzione
                    sql = sql & "       pianiprod.cod_art_piano, " & vbCrLf                                                                     ' articolo del piano di produzione
                    sql = sql & "       DATE('" & DB_Sql_Date(data_piano) & "'), " & vbCrLf                                                     ' nuova data produzione
                    sql = sql & "       pianiprod.utente_ins, pianiprod.data_ins, pianiprod.ora_ins, " & vbCrLf                                 ' riferimenti originali a utente-data-ora
                    sql = sql & "       '" & utente_agg & "', " & vbCrLf
                    sql = sql & "       '" & data_agg & "', " & vbCrLf
                    sql = sql & "       '" & ora_agg & "' " & vbCrLf
                    sql = sql & "  FROM pp_pianiprod, pianiprod " & vbCrLf
                    sql = sql & " WHERE pianiprod.data_piano    = '" & DB_Sql_Date(col.Tag) & "'" & vbCrLf
                    Sql = Sql & "   AND pp_pianiprod.id         = pianiprod.id_pp_pianiprod   " & vbCrLf
                    sql = sql & "   AND pp_pianiprod.nr_riga    = pianiprod.riga_pp_pianiprod " & vbCrLf
                    If Getv(cod_dep) <> "" Then
                        Sql = Sql & " AND pp_pianiprod.cod_dep  = pianiprod.cod_dep      " & vbCrLf
                        Sql = Sql & " AND pp_pianiprod.cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
                    End If
                    DB_SqlExecute(sql)

                    '
                    ' 2) toglie da vecchia data produzione
                    '

                    id = DB_Dsv(DtRow(pref_cmp & "id"))

                    'se id nullo significa che sto aggiungendo una nuova pianificazione

                    If Field_Null(id) Then

                        pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(DtRow("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                               DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, DBNull.Value, Getv(cod_dep))

                        DtRow(pref_cmp & "lista_righe_pian") = "|0|"

                    Else

                        pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(DtRow("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, DBNull.Value, Getv(cod_dep))

                        DtRow(pref_cmp & "lista_righe_pian") = "|0|"

                    End If

                    '
                    ' 3) aggiunge a nuova data produzione
                    '

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), Math.Round(qta_pian, 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(Pianprod_Dr_Sel_Anaart.Item("cod_art"), "")), data_piano, Trim(DB_Dsv(Pianprod_Dr_Sel_Anaart.Item("ragg_prod"), "")), Trim(DB_Dsv(Pianprod_Dr_Sel_Anaart.Item("cod_linea_prod_pre"), "")),
                                           Trim(DB_Dsv(Pianprod_Dr_Sel_Anaart.Item("cod_ass_prod_pre"), "")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id_comp_agg, nr_riga_comp_agg, cod_linea_prod, Getv(cod_dep))

                    dt_grid_pianiprod_det.AcceptChanges()

                    ' refresh dati a video

                    Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

                    flag_fatte_mod = True

                End If

        End Select

    End Sub

    Private Sub grid_piano_view_qta_ordforn_ButtonClick()

        Dim data_cons As Object = Nothing
        Dim row As DataRow = Nothing
        Dim col As GridColumn = Nothing
        Dim cod_art As Object = Nothing
        Dim pref_cmp As String

        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim anno_ord As Integer
        Dim nr_ord As Integer
        Dim tot_ord As Integer

        Try


            col = grid_piano_view.FocusedColumn
            pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)
            row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)

            cod_art = DB_Dsv(row("cod_art"), "")
            data_cons = col.Tag

            tot_ord = 0

            sql = ""
            sql = sql & " SELECT o.anno_ord, o.nr_ord " & vbCrLf
            sql = sql & "   FROM ordforn AS o, ordforndet AS od " & vbCrLf
            sql = sql & "  WHERE o.anno_ord  = od.anno_ord " & vbCrLf
            sql = sql & "    AND o.nr_ord    = od.nr_ord " & vbCrLf
            sql = sql & "    AND od.data_cons = '" & Getv(data_cons) & "'" & vbCrLf
            sql = sql & "    AND od.cod_art  = '" & Getv(cod_art) & "'" & vbCrLf

            cmd = DB_CommandCreate(sql)
            DB_DataReaderExecute(dr, cmd)

            While dr.Read

                tot_ord += 1
                anno_ord = CInt(DB_Dsv(dr("anno_ord"), 0))
                nr_ord = CInt(DB_Dsv(dr("nr_ord"), 0))

            End While

            DB_DataReaderClose(dr, cmd)

            'nessun ordine, NON FACCIO NIENTE
            If tot_ord = 0 Then
                Exit Sub

                'un solo ordine, APRO DIRETTAMENT ORDFORN
            ElseIf tot_ord = 1 Then
                TaskCli_Start("ordforn.exe", "AUTO " & Getv(anno_ord) & " " & Getv(nr_ord))

                'più ordini, APRO RICERCA ORDFORN
            Else

                f_dett_ordini.Data_Cons = data_cons
                f_dett_ordini.Cod_Art = cod_art
                f_dett_ordini.EditMask = EditMask

                If f_dett_ordini.ShowDialog = Windows.Forms.DialogResult.OK Then

                    TaskCli_Start("ordforn.exe", "AUTO " & Getv(f_dett_ordini.Anno_Ord) & " " & Getv(f_dett_ordini.Nr_Ord))

                End If

            End If



        Catch ex As Exception
            DB_DataReaderClose(dr, cmd)

            MsgErr(ex)

        Finally
            DB_DataReaderClose(dr, cmd)

        End Try

    End Sub

    Private Sub grid_piano_view_ora_ButtonClick()

        Dim row As DataRow = Nothing
        Dim col As GridColumn = Nothing
        Dim cod_art As Object = Nothing
        Dim pref_cmp As String
        Dim prev_focus_row As Integer

        Try

            col = grid_piano_view.FocusedColumn
            row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
            prev_focus_row = grid_piano_view.FocusedRowHandle

            pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

            f_pp_pianiprod_det_orario.Cod_Art_Cerca = DB_Dsv(row("cod_art"), "")
            f_pp_pianiprod_det_orario.Data_Piano_Cerca = col.Tag
            f_pp_pianiprod_det_orario.EditMask = EditMask
            f_pp_pianiprod_det_orario.Cod_Dep = Getv(cod_dep)

            f_pp_pianiprod_det_orario.ShowDialog()

            grid_piano_view.FocusedRowHandle = prev_focus_row

            f_pp_pianipord_det_ord.Dispose()

        Catch ex As Exception

            MsgErr(ex)

        Finally

        End Try

    End Sub


    Private Function Check_Valori_Pianificati() As String

        Dim giorni_diff As Integer
        Dim data_piano As String
        Dim i_g As Integer
        Dim des_i_g As String
        Dim qta_pian As Double
        Dim qta_pian_old As Double
        Dim cod_art As Object

        Dim str As String = ""
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pz As Double
        Dim qta_pe As Double
        Dim cod_linea_prod As String = ""

        Dim qta_comm As Object = Nothing

        Dim flag_anulla_modif As Boolean


        Try

            Check_Valori_Pianificati = ""

            giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data_pian)), DateValue(Getv(a_data_pian)))

            If giorni_diff < 0 Then giorni_diff = 0

            For i As Integer = 0 To dt_piano.Rows.Count - 1

                For i_g = 0 To giorni_diff

                    data_piano = Lista_Date(0, i_g)
                    des_i_g = Format(i_g, "0000") & "_"
                    cod_art = DB_Dsv(dt_piano.Rows(i).Item("cod_art"), "")
                    qta_pian = Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data"))
                    qta_pian_old = Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data_old"))
                    cod_linea_prod = DB_Dsv(dt_piano.Rows(i).Item(des_i_g & "cod_linea_prod"), "")

                    If Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data")) < Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_ord_data")) AndAlso Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data")) <> 0 Then

                        If XtraMessageBox.Show("Quantità pianificata minore della quantità pianificata per gli ordini dell'articolo " & cod_art & ". Continuare ugualmente?", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Warning) = Windows.Forms.DialogResult.No Then
                            Check_Valori_Pianificati = Getv(i) & "|" & Getv(des_i_g & "qta_pian_ord_data")
                            Exit Function
                        End If

                    End If

                    If qta_pian_old <> 0 AndAlso qta_pian <> qta_pian_old Then

                        If Esistono_Commesse(data_piano, cod_art, qta_comm) Then

                            flag_anulla_modif = False

                            If azienda_agg.flag_aggcomm_pp <> "S" Then
                                str = ""
                                str &= " Pianificazione dell'articolo " & Getv(cod_art) & " in data " & Getv(data_piano) & " non modificata in quanto è già stata lanciata la commessa."

                                XtraMessageBox.Show(str, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                                flag_anulla_modif = True
                            Else
                                str = ""
                                str &= " L'articolo " & Getv(cod_art) & " in data " & Getv(data_piano) & " ha già una commessa lanciata. Si vuole continuare?"

                                If XtraMessageBox.Show(str, My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.No Then
                                    flag_anulla_modif = True
                                End If

                            End If

                            If flag_anulla_modif Then

                                dt_piano.Rows(i).Item(des_i_g & "qta_pian_data") = Object_Val(qta_comm)

                                'ripristino il valore su pp_pianiprod in quanto questo viene modificato in fase di INPUT
                                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(cod_art)
                                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                                If Pianprod_Dr_Sel_Anaart.Read Then

                                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                                   Math.Round(qta_comm, 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)


                                    pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(cod_art), data_piano, DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                                DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_ass_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, xx1, xx1, cod_linea_prod, Getv(cod_dep))


                                End If

                                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                            End If

                        End If

                    End If

                Next

            Next

        Catch ex As Exception

            Check_Valori_Pianificati = -1

            MsgErr(ex)

        End Try

    End Function

    Private Sub Elabora_Produzione_Interna_e_Stato(ByRef dt_piano As DataTable)
        Dim giorni_diff As Integer
        Dim i_g As Integer
        Dim des_i_g As String
        Dim data_piano As Object
        Dim cod_art As Object
        Dim qta_diff As Double
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double
        Dim cod_linea_prod As String = ""
        Dim Cod_Dep_Linea As Object = Nothing
        Dim Cod_Ass_Prod_Veloce As Object = Nothing
        Dim Cod_Linea_Prod_Veloce As Object = Nothing

        Try

            giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data_pian)), DateValue(Getv(a_data_pian)))

            If giorni_diff < 0 Then giorni_diff = 0

            'elimino le produzioni interne esistenti dato che poi le ricalcolo
            For i As Integer = 0 To dt_piano.Rows.Count - 1

                For i_g = 0 To giorni_diff

                    des_i_g = Format(i_g, "0000") & "_"

                    data_piano = Lista_Date(0, i_g)
                    cod_art = DB_Dsv(dt_piano.Rows(i).Item("cod_art"), "")

                    DB_CommandParametersReset(qdf_del_pp_pianiprod_det)
                    qdf_del_pp_pianiprod_det.Parameters.Item("data_piano").Value = CDate(data_piano)
                    qdf_del_pp_pianiprod_det.Parameters.Item("cod_art_pian").Value = Trim(cod_art)
                    If Getv(cod_dep) <> "" Then
                        qdf_del_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                    End If
                    DB_CommandExecute(qdf_del_pp_pianiprod_det)

                Next

            Next

            For i As Integer = 0 To dt_piano.Rows.Count - 1

                For i_g = 0 To giorni_diff

                    des_i_g = Format(i_g, "0000") & "_"

                    data_piano = Lista_Date(0, i_g)
                    cod_art = DB_Dsv(dt_piano.Rows(i).Item("cod_art"), "")


                    'la differenza va inserita come produzione interna su pp_pianiprod_det
                    If Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data")) > Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_ord_data")) Then

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                        DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                        Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(cod_art)
                        DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                        Pianprod_Dr_Sel_Anaart.Read()

                        qta_diff = Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data")) - Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_ord_data"))

                        Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                            qta_diff, qta_um, qta_co, qta_cf, qta_pz, qta_pe)


                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                        DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                        Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = dt_piano.Rows(i).Item("cod_art")
                        DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                        'nuovo inserimetno ordine
                        DB_CommandParametersReset(qdf_ins_pp_pianiprod_det)

                        qdf_ins_pp_pianiprod_det.Parameters.Item("id_pianiprod").Value = dt_piano.Rows(i).Item(des_i_g & "id")
                        qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_pianiprod").Value = Getv(DB_Dsv(dt_piano.Rows(i).Item(des_i_g & "lista_righe_pian"), "")).Split("|")(1)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("anno_ord").Value = 0
                        qdf_ins_pp_pianiprod_det.Parameters.Item("nr_ord").Value = 0
                        qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_ord").Value = 0
                        qdf_ins_pp_pianiprod_det.Parameters.Item("cod_art_pian").Value = Trim(cod_art)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("data_piano").Value = CDate(data_piano)
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian").Value = qta_diff
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_co").Value = qta_co
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_cf").Value = qta_cf
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pe").Value = qta_pe
                        qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pz").Value = qta_pz
                        qdf_ins_pp_pianiprod_det.Parameters.Item("stato_pian").Value = 1
                        If Getv(cod_dep) <> "" Then
                            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                        End If
                        cod_linea_prod = DB_Dsv(dt_piano.Rows(i).Item(des_i_g & "cod_linea_prod"), "")

                        If Not Field_Null(cod_linea_prod) Then
                            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = cod_linea_prod
                        Else

                            If Pianprod_Dr_Sel_Anaart.Read Then
                                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")
                            Else
                                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = DBNull.Value
                            End If
                        End If

                        qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")

                        If Getv(cod_dep) <> "" Then

                            DB_LookUp("cod_dep_linea", "pp_tabpzora", "cod_linea_prod = '" & Getv(qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value) & "' AND cod_ass_prod = '" & Getv(qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value) & "' AND nr_riga = 1", Cod_Dep_Linea)

                            If Getv(Cod_Dep_Linea) <> Getv(cod_dep) Then
                                Cerca_Linea_Veloce(Getv(cod_art), Getv(cod_dep), Cod_Linea_Prod_Veloce, Cod_Ass_Prod_Veloce)
                                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Cod_Linea_Prod_Veloce
                                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Cod_Ass_Prod_Veloce
                            End If

                        End If

                        DB_CommandExecute(qdf_ins_pp_pianiprod_det)

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                    End If

                    'aggiorno stato ordini pianificati in pianificabile
                    '0: qta pianificata ordini ma devo ancora pianificare realmente la produzione
                    '1: ho pianificato la qta quindi l'ordine è pianificabile

                    If Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data")) = 0 AndAlso Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_ord_data")) > 0 Then

                        DB_CommandParametersReset(qdf_upd_stato_pp_pianiprod_det)

                        qdf_upd_stato_pp_pianiprod_det.Parameters.Item("stato_pian").Value = 0
                        qdf_upd_stato_pp_pianiprod_det.Parameters.Item("id_pianiprod").Value = dt_piano.Rows(i).Item(des_i_g & "id")
                        qdf_upd_stato_pp_pianiprod_det.Parameters.Item("nr_riga_pianiprod").Value = Getv(DB_Dsv(dt_piano.Rows(i).Item(des_i_g & "lista_righe_pian"), "")).Split("|")(1)
                        If Getv(cod_dep) <> "" Then
                            qdf_upd_stato_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                        End If
                        DB_CommandExecute(qdf_upd_stato_pp_pianiprod_det)

                    ElseIf Object_Val(dt_piano.Rows(i).Item(des_i_g & "qta_pian_data")) > 0 Then

                        DB_CommandParametersReset(qdf_upd_stato_pp_pianiprod_det)

                        qdf_upd_stato_pp_pianiprod_det.Parameters.Item("stato_pian").Value = 1
                        qdf_upd_stato_pp_pianiprod_det.Parameters.Item("id_pianiprod").Value = dt_piano.Rows(i).Item(des_i_g & "id")
                        qdf_upd_stato_pp_pianiprod_det.Parameters.Item("nr_riga_pianiprod").Value = Getv(DB_Dsv(dt_piano.Rows(i).Item(des_i_g & "lista_righe_pian"), "")).Split("|")(1)
                        If Getv(cod_dep) <> "" Then
                            qdf_upd_stato_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                        End If
                        DB_CommandExecute(qdf_upd_stato_pp_pianiprod_det)

                    End If

                Next

            Next

        Catch ex As Exception

            MsgErr(ex)

        End Try


    End Sub

    Private Sub Messaggio_Articoli_Non_Modificati()
        Dim cnt As Long = 0

        DB_LookUp("COUNT(*) ", dbtempame_art_no_mod, , cnt)

        If cnt > 0 Then
            f_dett_art_no_mod.Tabella_Dist = dbtempame_art_no_mod
            f_dett_art_no_mod.EditMask = EditMask
            f_dett_art_no_mod.Cod_Dep = Getv(cod_dep)

            f_dett_art_no_mod.ShowDialog()
            f_dett_art_no_mod.Dispose()
        End If

        DB_SqlExecute("DELETE FROM " & dbtempame_art_no_mod)

    End Sub

    Private Sub grid_pianiprod_det_view_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grid_pianiprod_det_view.PopupMenuShowing

        Dim vw As DevExpress.XtraGrid.Views.Grid.GridView = Nothing
        Dim rowIndex As Long
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer
        Dim s_sel_all As String = ""
        Dim idx_image As Integer
        Dim Livello_Gruppo_Selezionato As Integer

        vw = DirectCast(sender, DevExpress.XtraGrid.Views.Grid.GridView)

        ' tasto destro su righe della griglia
        If e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Row Then

            rowIndex = vw.FocusedRowHandle 'vw.GetFocusedDataSourceRowIndex

            e.Menu.Items.Clear()

            '
            ' menù esclusione ordini
            '

            If rowIndex >= 0 Then

                'memorizzo la riga ordine e il relativo indice nella dt_grid_pianiporddet
                'row_ord = dt_grid_pianiprod_det.Rows(rowIndex) 01/06/2018
                row_ord = dt_grid_pianiprod_det.Rows(vw.GetFocusedDataSourceRowIndex)
                row_ord_index = rowIndex

                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Escludi Ordine Selezionato", AddressOf Menu_Escludi_Ordine, img_small.Images(3)))
                e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

            End If

            '
            ' menù seleziona tutto
            '

            ' Se viene selezionato la riga filtro
            If grid_pianiprod_det_view.GetSelectedRows.Length < 1 Then
                Exit Sub
            End If

            GridRowHandle = grid_pianiprod_det_view.GetSelectedRows(0)
            DtRowHandle = grid_pianiprod_det_view.GetDataSourceRowIndex(GridRowHandle)

            If DtRowHandle >= 0 Then

                Livello_Gruppo_Selezionato = grid_pianiprod_det_view.GetRowLevel(GridRowHandle)
                If grid_pianiprod_det_view.IsGroupRow(GridRowHandle) = False Then
                    Livello_Gruppo_Selezionato = Livello_Gruppo_Selezionato - 1
                End If

                If dt_grid_pianiprod_det.Rows(DtRowHandle).Item("sel") = True Then
                    s_sel_all = "Deseleziona Tutto"
                    idx_image = 7
                Else
                    s_sel_all = "Seleziona Tutto"
                    idx_image = 6
                End If

                If pp_modelli_rag.cod_mod <> "" Then

                    ' gestione del tasto dx con selezione di tutte le righe del gruppo selezionato

                    If Livello_Gruppo_Selezionato = 0 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo1_ord) & "  (" & Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo1_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 1 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo2_ord) & "  (" & Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo2_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 2 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo3_ord) & "  (" & Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo3_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 3 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo4_ord) & "  (" & Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo4_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 4 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo5_ord) & "  (" & Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo5_ord")) & ")"
                    End If

                End If

                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem(s_sel_all, AddressOf Menu_Sel_All, img_small.Images(idx_image)))

            End If

        End If

    End Sub

    Private Sub grid_pianiprod_det_view_escl_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grid_pianiprod_det_view_escl.PopupMenuShowing

        Dim vw As DevExpress.XtraGrid.Views.Grid.GridView = Nothing
        Dim rowIndex As Long

        vw = DirectCast(sender, DevExpress.XtraGrid.Views.Grid.GridView)

        ' tasto destro su righe della griglia
        If e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Row Then

            rowIndex = vw.FocusedRowHandle 'vw.GetFocusedDataSourceRowIndex

            If rowIndex >= 0 Then

                'memorizzo la riga ordine e il relativo indice nella dt_grid_pianiporddet
                'row_ord = dt_grid_pianiprod_det_escl.Rows(rowIndex) 01/06/2018
                row_ord = dt_grid_pianiprod_det_escl.Rows(vw.GetFocusedDataSourceRowIndex)
                row_ord_index = rowIndex

                e.Menu.Items.Clear()

                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem("Includi Ordine Selezionato", AddressOf Menu_Includi_Ordine, img_small.Images(2)))
                e.Menu.Items(e.Menu.Items.Count - 1).Enabled = DB_UpdatePermission

            End If

        End If

    End Sub

    Private Sub Menu_Escludi_Ordine()
        Dim anno_ord As Integer
        Dim nr_ord As Integer
        Dim nr_riga_ord As Integer
        Dim qta_rif_pian As Double
        Dim cod_art As Object
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double
        Dim Cod_Dep_Linea As Object = Nothing
        Dim Cod_Ass_Prod_Veloce As Object = Nothing
        Dim Cod_Linea_Prod_Veloce As Object = Nothing

        If XtraMessageBox.Show("Escludere l'ordine  " & DB_Dsv(row_ord("anno_ord"), 0) & "-" & DB_Dsv(row_ord("nr_ord"), 0) & "  dalla pianificazione? ", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.No Then
            Exit Sub
        End If

        If Not row_ord Is Nothing Then

            anno_ord = DB_Dsv(row_ord("anno_ord"), 0)
            nr_ord = DB_Dsv(row_ord("nr_ord"), 0)
            nr_riga_ord = DB_Dsv(row_ord("nr_riga_ord"), 0)
            qta_rif_pian = DB_Dsv(row_ord("qta_rif_pian"), 0)
            cod_art = DB_Dsv(row_ord("cod_art"), "")

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
            DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
            Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(cod_art)
            DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

            Pianprod_Dr_Sel_Anaart.Read()

            Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                qta_rif_pian, qta_um, qta_co, qta_cf, qta_pz, qta_pe)


            'nuovo inserimetno ordine senza riferimento ad ID PIANIPORD
            'stato pianificazione = 2 cioè ordine escluso e quindi non pianificabile su pianificazizone oraria
            DB_CommandParametersReset(qdf_ins_pp_pianiprod_det)

            qdf_ins_pp_pianiprod_det.Parameters.Item("id_pianiprod").Value = DBNull.Value
            qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_pianiprod").Value = DBNull.Value
            qdf_ins_pp_pianiprod_det.Parameters.Item("anno_ord").Value = anno_ord
            qdf_ins_pp_pianiprod_det.Parameters.Item("nr_ord").Value = nr_ord
            qdf_ins_pp_pianiprod_det.Parameters.Item("nr_riga_ord").Value = nr_riga_ord
            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_art_pian").Value = Trim(cod_art)
            qdf_ins_pp_pianiprod_det.Parameters.Item("data_piano").Value = DBNull.Value
            qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian").Value = qta_rif_pian
            qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_co").Value = qta_co
            qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_cf").Value = qta_cf
            qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pe").Value = qta_pe
            qdf_ins_pp_pianiprod_det.Parameters.Item("qta_pian_pz").Value = qta_pz
            qdf_ins_pp_pianiprod_det.Parameters.Item("stato_pian").Value = 2
            If Getv(cod_dep) <> "" Then
                qdf_ins_pp_pianiprod_det.Parameters.Item("cod_dep").Value = Getv(cod_dep)
            End If
            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")
            qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")

            If Getv(cod_dep) <> "" Then

                DB_LookUp("cod_dep_linea", "pp_tabpzora", "cod_linea_prod = '" & Getv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")) & "' AND cod_ass_prod = '" & Getv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")) & "' AND nr_riga = 1", Cod_Dep_Linea)

                If Getv(Cod_Dep_Linea) <> Getv(cod_dep) Then
                    Cerca_Linea_Veloce(Getv(cod_art), Getv(cod_dep), Cod_Linea_Prod_Veloce, Cod_Ass_Prod_Veloce)
                    qdf_ins_pp_pianiprod_det.Parameters.Item("cod_linea_prod_pre").Value = Cod_Linea_Prod_Veloce
                    qdf_ins_pp_pianiprod_det.Parameters.Item("cod_ass_prod_pre").Value = Cod_Ass_Prod_Veloce
                End If

            End If

            DB_CommandExecute(qdf_ins_pp_pianiprod_det)

        End If

        Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")
        Leggi_Grid(grid_pianiprod_det_escl, grid_pianiprod_det_view_escl, dt_grid_pianiprod_det_escl, "ESCL")

        row_ord = Nothing

    End Sub

    Private Sub Menu_Includi_Ordine()

        Dim anno_ord As Integer
        Dim nr_ord As Integer
        Dim nr_riga_ord As Integer

        If XtraMessageBox.Show("Includere l'ordine dalla pianificazione ? ", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.No Then
            Exit Sub
        End If

        If Not row_ord Is Nothing Then

            anno_ord = DB_Dsv(row_ord("anno_ord"), 0)
            nr_ord = DB_Dsv(row_ord("nr_ord"), 0)
            nr_riga_ord = DB_Dsv(row_ord("nr_riga_ord"), 0)

            sql = ""
            sql &= "  DELETE FROM pp_pianiprod_det " & vbCrLf
            sql &= "        WHERE anno_ord = " & Getv(anno_ord) & vbCrLf
            sql &= "          AND nr_ord = " & Getv(nr_ord) & vbCrLf
            sql &= "          AND nr_riga_ord = " & Getv(nr_riga_ord) & vbCrLf
            sql &= "          AND id_pianiprod IS NULL " & vbCrLf
            sql &= "          AND nr_riga_pianiprod IS NULL" & vbCrLf
            Sql &= "          AND data_piano IS NULL " & vbCrLf
            If Getv(cod_dep) <> "" Then
                Sql = Sql & " AND cod_dep = '" & Getv(cod_dep) & "' " & vbCrLf
            End If

            DB_SqlExecute(sql)

        End If


        Leggi_Grid(grid_pianiprod_det_escl, grid_pianiprod_det_view_escl, dt_grid_pianiprod_det_escl, "ESCL")
        Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")

        row_ord = Nothing

    End Sub

    Private Sub grid_piano_view_qta_pian_Enter(sender As Object, e As System.EventArgs)

        Oldv1 = TryCast(sender, TextEdit).EditValue

        TryCast(sender, TextEdit).SelectAll()

    End Sub

    Private Sub grid_piano_view_qta_pian_Validating(sender As Object, e As System.ComponentModel.CancelEventArgs)

        Dim txt As TextEdit
        Dim row As DataRow
        Dim col As GridColumn
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double
        Dim cod_linea_prod As String = ""

        Dim qta_pian_art As Double
        Dim qta_pian_oraria As Double

        Dim id As Object = Nothing
        Dim nr_riga As Object = Nothing

        'utilizzati per il calcolo della giacenza
        Dim giorni_diff As Integer
        Dim des_i_g As String
        Dim des_i_g_prec As String
        Dim tot_giac As Double

        Dim pref_cmp As String
        Dim i_g As Integer


        txt = TryCast(sender, TextEdit)

        If Field_Null(txt.EditValue) And Not Field_Null(Oldv1) Then

            If grid_piano_view.GetFocusedDataSourceRowIndex >= 0 Then

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                col = grid_piano_view.FocusedColumn
                last_column_edit = col

                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                id = DB_Dsv(row(pref_cmp & "id"))

                qta_pian_art = txt.EditValue
                qta_pian_oraria = DB_Dsv(row(pref_cmp & "qta_pian_ora_data"))

                If Object_Val(qta_pian_art) < Object_Val(qta_pian_oraria) Then
                    XtraMessageBox.Show("Impossibile diminuire la quantità in quanto è già stata pianificata nella pianificazione oraria.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Setv(txt, Oldv1)
                    Exit Sub
                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    'se id nullo significa che sto aggiungendo una nuova pianificazione
                    If Field_Null(id) Then

                        'in pp_pianiprod aggiungo una riga con qta pianificata e impr a zero
                        pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                               DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, DBNull.Value, Getv(cod_dep))

                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    Else

                        pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))

                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    End If

                    flag_fatte_mod = True

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                '
                'Aggiorna giacenze
                '
                'INIZIALE
                row(pref_cmp & "gia_data") = Object_Val(row(pref_cmp & "gia_data")) - Object_Val(Oldv1) + Object_Val(txt.EditValue)

                tot_giac = row(pref_cmp & "gia_data")

                'ALLA DATA
                giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data_pian)), DateValue(Getv(a_data_pian)))
                If giorni_diff < 0 Then giorni_diff = 0

                For i_g = Cerca_Lista_Date_Index(col.Tag) + 1 To giorni_diff

                    des_i_g = Format(i_g, "0000") & "_"
                    row(des_i_g & "gia_data") = tot_giac + Object_Val(row(des_i_g & "qta_pian_data")) - Object_Val(row(des_i_g & "qta_impr_data"))

                    tot_giac += Object_Val(row(des_i_g & "qta_pian_data")) - Object_Val(row(des_i_g & "qta_impr_data"))

                    'FINALE
                    row("gia_fin") = row(des_i_g & "gia_data")

                Next

            End If

        ElseIf (Not Field_Null(txt.EditValue) And Field_Null(Oldv1)) Or (Object_Val(txt.EditValue) <> Object_Val(Oldv1)) Then

            If grid_piano_view.GetFocusedDataSourceRowIndex >= 0 Then

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                col = grid_piano_view.FocusedColumn
                last_column_edit = col

                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                id = DB_Dsv(row(pref_cmp & "id"))

                qta_pian_art = Object_Val(txt.EditValue)
                qta_pian_oraria = DB_Dsv(row(pref_cmp & "qta_pian_ora_data"))
                cod_linea_prod = DB_Dsv(row(pref_cmp & "cod_linea_prod"))

                If Object_Val(qta_pian_art) < Object_Val(qta_pian_oraria) Then
                    XtraMessageBox.Show("Impossibile diminuire la quantità in quanto è già stata pianificata nella pianificazione oraria.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                    Setv(txt, Oldv1)
                    Exit Sub
                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                  Math.Round(qta_pian_art, 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    'se id nullo significa che sto aggiungendo una nuova pianificazione
                    If Field_Null(id) Then

                        pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                               DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))

                        row(pref_cmp & "id") = id
                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    Else

                        pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))

                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    End If


                    flag_fatte_mod = True

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                '
                'Aggiorna giacenze
                '
                'INIZIALE
                row(pref_cmp & "gia_data") = Object_Val(row(pref_cmp & "gia_data")) - Object_Val(Oldv1) + Object_Val(txt.EditValue)

                tot_giac = row(pref_cmp & "gia_data")

                'ALLA DATA
                giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data_pian)), DateValue(Getv(a_data_pian)))
                If giorni_diff < 0 Then giorni_diff = 0

                For i_g = Cerca_Lista_Date_Index(col.Tag) + 1 To giorni_diff

                    des_i_g = Format(i_g, "0000") & "_"
                    row(des_i_g & "gia_data") = tot_giac + Object_Val(row(des_i_g & "qta_pian_data")) - Object_Val(row(des_i_g & "qta_impr_data"))

                    tot_giac += Object_Val(row(des_i_g & "qta_pian_data")) - Object_Val(row(des_i_g & "qta_impr_data"))

                    'FINALE
                    row("gia_fin") = row(des_i_g & "gia_data")

                Next

            End If

        End If

        '
        ' ricalcola la quantità disponibile per i giorni che seguono
        '

        row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
        col = grid_piano_view.FocusedColumn

        If Field_Null(txt) Then
            qta_pian_art = 0
        Else
            qta_pian_art = txt.EditValue
        End If

        ' forza la scrittura del nuovo valore nel datatable (durante il "_Validating" il datatable non è ancora aggiornato)
        i_g = Cerca_Lista_Date_Index(col.Tag)
        des_i_g = Format(i_g, "0000") & "_"
        row(des_i_g & "qta_pian_data") = qta_pian_art

        giorni_diff = DateDiff(DateInterval.Day, DateValue(Getv(da_data_pian)), DateValue(Getv(a_data_pian)))
        If giorni_diff < 0 Then giorni_diff = 0

        For i_g = Cerca_Lista_Date_Index(col.Tag) + 1 To giorni_diff

            des_i_g = Format(i_g, "0000") & "_"

            If Tipo_Art_Prod_Testata = "MP" Then

                des_i_g = Format(i_g, "0000") & "_"
                row(des_i_g & "qta_disp_data") = row(des_i_g & "gia_data")

            Else

                If i_g = 0 Then
                    If Lista_Date(0, i_g) >= Now.Date Then
                        row(des_i_g & "qta_disp_data") = row("gia_ini")
                    Else
                        row(des_i_g & "qta_disp_data") = row(des_i_g & "gia_data")
                    End If
                Else
                    If Lista_Date(0, i_g) >= Now.Date Then
                        des_i_g_prec = Format(i_g - 1, "0000") & "_"
                        row(des_i_g & "qta_disp_data") = Object_Val(row(des_i_g_prec & "qta_disp_data")) + Object_Val(row(des_i_g_prec & "qta_pian_data")) - Object_Val(row(des_i_g_prec & "qta_ordc_data"))
                    Else
                        row(des_i_g & "qta_disp_data") = row(des_i_g & "gia_data")
                    End If
                End If

            End If

            ' alla disponibilità va RI-aggiunto l'impegnato ordini clienti in quanto questo era già implicitamente incluso in "pp_giacepar"

            If azienda_agg.flag_pp_giacepar = "S" Then
                row(des_i_g & "qta_disp_data") = Object_Val(row(des_i_g & "gia_data")) + leggi_qta_pp_ordpartdet(RTrim(row("cod_art")), Getv(da_data_pian))
            End If

        Next

    End Sub

    Private Sub cmd_ordforn_Click(sender As System.Object, e As System.EventArgs) Handles cmd_ordforn.Click

        cmd_ordforn.Focus()
        Application.DoEvents()

        TaskCli_Start("ordforn.exe")

    End Sub

    Private Sub grid_piano_view_RowCellClick(sender As System.Object, e As DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs) Handles grid_piano_view.RowCellClick

        Dim data_cons As Object = Nothing
        Dim row As DataRow = Nothing
        Dim cod_art As Object = Nothing

        Dim dr As DB2DataReader = Nothing
        Dim cmd As DB2Command = Nothing
        Dim anno_ord As Integer
        Dim nr_ord As Integer
        Dim tot_ord As Integer

        Try

            If e.Column Is Nothing Then Exit Sub

            If e.Column.FieldName Like "*ordforn_data*" Then

                If e.Button = Windows.Forms.MouseButtons.Left And e.Clicks = 2 Then

                    If e.RowHandle >= 0 Then

                        row = dt_piano.Rows(grid_piano_view.GetDataSourceRowIndex(e.RowHandle))

                        cod_art = DB_Dsv(row("cod_art"), "")
                        data_cons = e.Column.Tag

                        tot_ord = 0

                        sql = ""
                        sql = sql & " SELECT o.anno_ord, o.nr_ord " & vbCrLf
                        sql = sql & "   FROM ordforn AS o, ordforndet AS od " & vbCrLf
                        sql = sql & "  WHERE o.anno_ord  = od.anno_ord " & vbCrLf
                        sql = sql & "    AND o.nr_ord    = od.nr_ord " & vbCrLf
                        sql = sql & "    AND o.data_cons = '" & Getv(data_cons) & "'" & vbCrLf
                        sql = sql & "    AND od.cod_art  = '" & Getv(cod_art) & "'" & vbCrLf

                        cmd = DB_CommandCreate(sql)
                        DB_DataReaderExecute(dr, cmd)

                        While dr.Read

                            tot_ord += 1
                            anno_ord = CInt(DB_Dsv(dr("anno_ord"), 0))
                            nr_ord = CInt(DB_Dsv(dr("nr_ord"), 0))

                        End While

                        DB_DataReaderClose(dr, cmd)

                        'nessun ordine, NON FACCIO NIENTE
                        If tot_ord = 0 Then
                            Exit Sub

                            'un solo ordine, APRO DIRETTAMENT ORDFORN
                        ElseIf tot_ord = 1 Then
                            TaskCli_Start("ordforn.exe", "AUTO " & Getv(anno_ord) & " " & Getv(nr_ord))

                            'più ordini, APRO RICERCA ORDFORN
                        Else

                            f_dett_ordini.Data_Cons = data_cons
                            f_dett_ordini.Cod_Art = cod_art
                            f_dett_ordini.EditMask = EditMask

                            If f_dett_ordini.ShowDialog = Windows.Forms.DialogResult.OK Then

                                TaskCli_Start("ordforn.exe", "AUTO " & Getv(f_dett_ordini.Anno_Ord) & " " & Getv(f_dett_ordini.Nr_Ord))

                            End If

                        End If

                    End If

                End If

            End If

        Catch ex As Exception
            DB_DataReaderClose(dr, cmd)

            MsgErr(ex)

        Finally
            DB_DataReaderClose(dr, cmd)

        End Try

    End Sub

    Private Sub cmd_filtri_Click(sender As System.Object, e As System.EventArgs) Handles cmd_filtri.Click

        If stato_split = False Then
            split_filtri.SplitterPosition = 505
            da_data_cons_ord.Focus()
            stato_split = True
        Else
            split_filtri.SplitterPosition = 0
            stato_split = False
        End If

    End Sub

    Private Sub cod_art_pf_ord_da_ButtonClick(sender As System.Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs) Handles cod_art_pf_ord_da.ButtonClick, cod_art_pf_ord_a.ButtonClick
        Dim cod_art_obj As DevExpress.XtraEditors.ButtonEdit
        Dim des_art_obj As DevExpress.XtraEditors.TextEdit = Nothing

        cod_art_obj = sender

        Select Case UCase(cod_art_obj.Name.ToString)
            Case UCase("cod_art_pf_ord_da")
                des_art_obj = des_art_pf_ord_da
            Case UCase("cod_art_pf_ord_a")
                des_art_obj = des_art_pf_ord_a
        End Select

        r_anaart.ShowDialog()
        If Not Field_Null(r_anaart.cod_art_cerca) Then

            Setv(cod_art_obj, r_anaart.cod_art_cerca)
            Leggi_Anaart(cod_art_obj, des_art_obj)

        End If

        If r_anaart.Form_Is_Hidden = False Then
            r_anaart.Dispose()
        End If

    End Sub

    Private Sub cod_art_pf_ord_da_Enter(sender As Object, e As System.EventArgs) Handles cod_art_pf_ord_da.Enter, cod_art_pf_ord_a.Enter
        Dim cod_art_obj As DevExpress.XtraEditors.ButtonEdit

        cod_art_obj = sender

        Setv(Oldv1, Getv(cod_art_obj))

    End Sub

    Private Sub cod_art_pf_ord_da_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles cod_art_pf_ord_da.KeyDown, cod_art_pf_ord_a.KeyDown

        If Key_F1(e) Then
            cod_art_pf_ord_da_ButtonClick(sender, Nothing)
        End If

    End Sub

    Private Sub cod_art_pf_ord_da_Leave(sender As Object, e As System.EventArgs) Handles cod_art_pf_ord_da.Leave, cod_art_pf_ord_a.Leave
        Dim cod_art_obj As DevExpress.XtraEditors.ButtonEdit
        Dim des_art_obj As DevExpress.XtraEditors.TextEdit = Nothing

        cod_art_obj = sender

        Select Case UCase(cod_art_obj.Name.ToString)
            Case UCase("cod_art_pf_ord_da")
                des_art_obj = des_art_pf_ord_da
            Case UCase("cod_art_pf_ord_a")
                des_art_obj = des_art_pf_ord_a
        End Select

        If Oldv1 <> Getv(cod_art_obj) Then

            Setv(Oldv1, Getv(cod_art_obj))
            Leggi_Anaart(cod_art_obj, des_art_obj)

        End If

    End Sub

    Private Sub cmd_cerca_Click(sender As System.Object, e As System.EventArgs) Handles cmd_cerca.Click

        cmd_cerca.Focus()
        Application.DoEvents()

        If dt_grid_pianiprod_det Is Nothing Then
            Imposta_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det)
        End If

        If dt_grid_pianiprod_det_escl Is Nothing Then
            Imposta_Grid(grid_pianiprod_det_escl, grid_pianiprod_det_view_escl, dt_grid_pianiprod_det_escl)
        End If

        Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")
        Leggi_Grid(grid_pianiprod_det_escl, grid_pianiprod_det_view_escl, dt_grid_pianiprod_det_escl, "ESCL")

        If Not Field_Null(da_data_ord) Or _
            Not Field_Null(a_data_ord) Or _
               Not Field_Null(da_data_cons_ord) Or _
                   Not Field_Null(a_data_cons_ord) Or _
                       Not Field_Null(da_data_spedizione) Or _
                           Not Field_Null(a_data_spedizione) Or _
                               Not Field_Null(da_ora_spedizione) Or _
                                   Not Field_Null(a_ora_spedizione) Or _
                                        Not Field_Null(cod_art_pf_ord_da) Or _
                                            Not Field_Null(cod_art_pf_ord_a) Or _
                                                Not Field_Null(da_cod_cli) Or _
                                                    Not Field_Null(a_cod_cli) Then

            cmd_filtri.Appearance.ForeColor = Color.Red
        Else
            cmd_filtri.Appearance.ForeColor = Color.Black
        End If

    End Sub

    Private Sub cmd_elimina_Click(sender As System.Object, e As System.EventArgs) Handles cmd_elimina.Click

        cmd_elimina.Focus()
        Application.DoEvents()

        Container_Cls(grp_filtri)
        cmd_cerca.PerformClick()

    End Sub



    Private Sub cmd_sel_Click(sender As System.Object, e As System.EventArgs) Handles cmd_sel0.Click, cmd_sel2.Click

        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer
        Dim valore_selezione As Boolean = False
        Dim cnt_sel As Integer = 0

        If Not Timer_Refresh_Ordini Is Nothing Then
            Timer_Refresh_Ordini.Stop()
        End If

        Select Case tab_pp_pianipord_det.SelectedTabPageIndex

            Case 0

                ' *****************************************
                ' *****     ORDINI DA PIANIFICARE     *****
                ' *****************************************

                cmd_sel0.Focus()
                Application.DoEvents()

                For i As Integer = 0 To grid_pianiprod_det_view.RowCount - 1
                    If selezione = False Then
                        grid_pianiprod_det_view.SetRowCellValue(i, "sel", True)
                    Else
                        grid_pianiprod_det_view.SetRowCellValue(i, "sel", False)
                    End If
                Next

                dt_grid_pianiprod_det.AcceptChanges()

                selezione = Not selezione

            Case 2

                ' *****************************************
                ' *****     ARTICOLI DA MAGAZZINO     *****
                ' *****************************************

                cmd_sel2.Focus()
                Application.DoEvents()

                If gridview_artmag.SelectedRowsCount > 0 Then
                    GridRowHandle = gridview_artmag.GetSelectedRows(0)
                    DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)
                    valore_selezione = dt_artmag.Rows(DtRowHandle).Item("sel")
                Else
                    valore_selezione = False
                End If

                For i = 0 To dt_artmag.Rows.Count - 1
                    If Trim(DB_Dsv(dt_artmag.Rows(i).Item("qta_um"), "")) <> "" Then
                        dt_artmag.Rows(i).Item("sel") = Not valore_selezione
                        If valore_selezione = False Then
                            cnt_sel = cnt_sel + 1
                        End If
                    End If
                Next

                dt_artmag.AcceptChanges()

                If valore_selezione = False And cnt_sel = 0 Then
                    XtraMessageBox.Show("Nessuna selezione effettuata." & vbCrLf & vbCrLf & "Nota! Vengono selezionate solo le righe dove è stata inserita la 'Quantità da Produrre.'", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                End If

        End Select

        If Not Timer_Refresh_Ordini Is Nothing Then

            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End If

    End Sub

    ' seleziona/deseleziona tutti i campi all'interno dello stesso raggruppamento

    Private Sub Menu_Sel_All(sender As System.Object, e As System.EventArgs)
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer
        Dim Livello_Gruppo_Selezionato As Integer
        Dim cod_campo1_ord_rif As String = ""
        Dim cod_campo2_ord_rif As String = ""
        Dim cod_campo3_ord_rif As String = ""
        Dim cod_campo4_ord_rif As String = ""
        Dim cod_campo5_ord_rif As String = ""
        Dim cod_campo1_ord As String = ""
        Dim cod_campo2_ord As String = ""
        Dim cod_campo3_ord As String = ""
        Dim cod_campo4_ord As String = ""
        Dim cod_campo5_ord As String = ""
        Dim valore_selezione As Boolean

        GridRowHandle = grid_pianiprod_det_view.GetSelectedRows(0)
        DtRowHandle = grid_pianiprod_det_view.GetDataSourceRowIndex(GridRowHandle)

        Livello_Gruppo_Selezionato = grid_pianiprod_det_view.GetRowLevel(GridRowHandle)
        If grid_pianiprod_det_view.IsGroupRow(GridRowHandle) = False Then
            Livello_Gruppo_Selezionato = Livello_Gruppo_Selezionato - 1
        End If

        ' gruppo di appartenenza della riga di riferimento

        If Livello_Gruppo_Selezionato = 0 Then cod_campo1_ord_rif = Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo1_ord")) Else cod_campo1_ord_rif = ""
        If Livello_Gruppo_Selezionato = 1 Then cod_campo2_ord_rif = Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo2_ord")) Else cod_campo2_ord_rif = ""
        If Livello_Gruppo_Selezionato = 2 Then cod_campo3_ord_rif = Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo3_ord")) Else cod_campo3_ord_rif = ""
        If Livello_Gruppo_Selezionato = 3 Then cod_campo4_ord_rif = Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo4_ord")) Else cod_campo4_ord_rif = ""
        If Livello_Gruppo_Selezionato = 4 Then cod_campo5_ord_rif = Trim(dt_grid_pianiprod_det.Rows(DtRowHandle).Item("cod_campo5_ord")) Else cod_campo5_ord_rif = ""

        valore_selezione = dt_grid_pianiprod_det.Rows(DtRowHandle).Item("sel")

        For i = 0 To dt_grid_pianiprod_det.Rows.Count - 1

            If Livello_Gruppo_Selezionato = 0 Then cod_campo1_ord = Trim(dt_grid_pianiprod_det.Rows(i).Item("cod_campo1_ord")) Else cod_campo1_ord = ""
            If Livello_Gruppo_Selezionato = 1 Then cod_campo2_ord = Trim(dt_grid_pianiprod_det.Rows(i).Item("cod_campo2_ord")) Else cod_campo2_ord = ""
            If Livello_Gruppo_Selezionato = 2 Then cod_campo3_ord = Trim(dt_grid_pianiprod_det.Rows(i).Item("cod_campo3_ord")) Else cod_campo3_ord = ""
            If Livello_Gruppo_Selezionato = 3 Then cod_campo4_ord = Trim(dt_grid_pianiprod_det.Rows(i).Item("cod_campo4_ord")) Else cod_campo4_ord = ""
            If Livello_Gruppo_Selezionato = 4 Then cod_campo5_ord = Trim(dt_grid_pianiprod_det.Rows(i).Item("cod_campo5_ord")) Else cod_campo5_ord = ""

            ' se è nello stesso gruppo...
            If cod_campo1_ord_rif = cod_campo1_ord And _
               cod_campo2_ord_rif = cod_campo2_ord And _
               cod_campo3_ord_rif = cod_campo3_ord And _
               cod_campo4_ord_rif = cod_campo4_ord And _
               cod_campo5_ord_rif = cod_campo5_ord Then
                ' inverte la selezione
                dt_grid_pianiprod_det.Rows(i).Item("sel") = Not valore_selezione
            End If
        Next

        dt_grid_pianiprod_det.AcceptChanges()

    End Sub

    '-------------------------------------------------------------------

    Private Sub cmd_pian_sel_Click(sender As System.Object, e As System.EventArgs) Handles cmd_pian_sel0.Click, cmd_pian_sel2.Click

        Dim data_piano As Object
        Dim data_sped As Object
        Dim flag_err As Boolean = False
        Dim qta_um As Double
        Dim cnt_tot As Long
        Dim id_comp_agg As Long
        Dim nr_riga_comp_agg As Long
        Dim GridRowHandle As Integer

        cmd_pian_sel0.Focus()
        Application.DoEvents()

        Try

            If Not Timer_Refresh_Ordini Is Nothing Then

                Timer_Refresh_Ordini.Stop()

            End If

            Select Case tab_pp_pianipord_det.SelectedTabPageIndex

                Case 0

                    ' *****************************************
                    ' *****     ORDINI DA PIANIFICARE     *****
                    ' *****************************************

                    cmd_pian_sel0.Focus()
                    Application.DoEvents()

                    f_data_pian.Data_Pian_Max = a_data_pian.EditValue
                    f_data_pian.Data_Pian_Min = da_data_pian.EditValue

                    If f_data_pian.ShowDialog = Windows.Forms.DialogResult.Cancel Then
                        f_data_pian.Dispose()
                        Exit Sub
                    End If

                    data_piano = f_data_pian.Data_Pian

                    If Cerca_Data_Festivo_Piano(Ragg_Prod_Testata, data_piano) Then
                        XtraMessageBox.Show("Data Festiva. Selezionare un'altra data.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                        f_data_pian.Dispose()
                        Exit Sub
                    End If

                    WaitForm_Show(Me, SplashScreenManager2, "Pianificazione Ordini in corso...")

                    For Each r As DataRow In dt_grid_pianiprod_det.Rows

                        If DB_Dsv(r("sel"), False) = True Then

                            If IsDate(data_piano) AndAlso CDate(data_piano) < Now.Date Then
                                flag_err = True
                                Continue For
                                'XtraMessageBox.Show("Impossibile pianificare un ordine in una data inferiore ad oggi.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                                'Exit Sub
                            End If

                            data_sped = DB_Dsv(r("data_spedizione_ordcli"))

                            If Not Field_Null(data_sped) Then

                                If CDate(data_piano) > CDate(data_sped) Then
                                    flag_err = True
                                    Continue For
                                    'XtraMessageBox.Show("La data di spedizione (" & Getv(data_sped) & ") è inferiore alla data di pianificazione indicata (" & Getv(data_piano) & "). ", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                                    'Exit Sub
                                End If

                            End If


                            'su pp_pianiprod inserisco solamente la riga con quantità a ZERO
                            Aggiungi_Ordine_Pianificazione(Tipo_Art_Prod_Testata, r, data_piano, Object_Val(DB_Dsv(r("qta_rif_pian"), 0)))

                            flag_fatte_mod = True

                        End If

                    Next

                    If flag_fatte_mod = True Then
                        'Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)
                        Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian)

                        dt_grid_pianiprod_det.AcceptChanges()

                    End If

                    f_data_pian.Dispose()

                    WaitForm_Close(Me, SplashScreenManager2)

                    If flag_err = True Then
                        XtraMessageBox.Show("Alcuni ordini non sono stati pianificati poichè la data di spedizione non è compatibile con la data di pianificazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    End If

                Case 2

                    ' *****************************************
                    ' *****     ARTICOLI DA MAGAZZINO     *****
                    ' *****************************************

                    cmd_pian_sel2.Focus()
                    Application.DoEvents()


                    If dt_artmag Is Nothing Then
                        Exit Sub
                    End If

                    ' controlla se selezionata almeno una riga

                    cnt_tot = 0

                    For i = 0 To dt_artmag.Rows.Count - 1
                        If dt_artmag.Rows(i).Item("sel") = True Then
                            cnt_tot = cnt_tot + 1
                            Exit For
                        End If
                    Next

                    If cnt_tot = 0 Then
                        XtraMessageBox.Show("Nessun Articolo da Magazzino selezionato per la pianificazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                        Exit Sub
                    End If

                    ' chiede la data

                    f_data_pian.Data_Pian_Max = a_data_pian.EditValue
                    f_data_pian.Data_Pian_Min = da_data_pian.EditValue

                    If f_data_pian.ShowDialog = Windows.Forms.DialogResult.Cancel Then
                        f_data_pian.Dispose()
                        Exit Sub
                    End If

                    data_piano = f_data_pian.Data_Pian

                    ' scorre gli articoli selezionati

                    For i = 0 To dt_artmag.Rows.Count - 1

                        If dt_artmag.Rows(i).Item("sel") = True Then

                            GridRowHandle = gridview_artmag.GetRowHandle(i)
                            qta_um = DB_Dsv(dt_artmag.Rows(i).Item("qta_um"), 0)

                            If Math.Round(qta_um, 3) = 0 Then

                                XtraMessageBox.Show("Indicare la Quantità da Produrre per l'articolo " & Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_art"), "")) & ".", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                                gridview_artmag.FocusedRowHandle = GridRowHandle
                                gridview_artmag.FocusedColumn = gridview_artmag.Columns("qta_um")
                                gridview_artmag.ShowEditor()
                                Exit Sub

                            Else

                                If Esistono_Commesse(data_piano, Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_art"), "")), xx1) Then
                                    If azienda_agg.flag_aggcomm_pp <> "S" Then
                                        XtraMessageBox.Show("Articolo " & Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_art"), "")) & " già presente in commessa di produzione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                                        Exit Sub
                                    Else
                                        If XtraMessageBox.Show("Articolo " & Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_art"), "")) & " già presente in commessa di produzione." & vbCrLf & vbCrLf & "Si vuole continuare?", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.No Then
                                            Exit Sub
                                        End If
                                    End If
                                End If

                                pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_art"), "")), data_piano, Trim(DB_Dsv(dt_artmag.Rows(i).Item("ragg_prod"), "")), Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_linea_prod_pre"), "")),
                                                       Trim(DB_Dsv(dt_artmag.Rows(i).Item("cod_ass_prod_pre"), "")), "P", DB_Dsv(dt_artmag.Rows(i).Item("qta_um"), 0), DB_Dsv(dt_artmag.Rows(i).Item("qta_co"), 0), DB_Dsv(dt_artmag.Rows(i).Item("qta_cf"), 0), DB_Dsv(dt_artmag.Rows(i).Item("qta_pe"), 0),
                                                       DB_Dsv(dt_artmag.Rows(i).Item("qta_pz"), 0), id_comp_agg, nr_riga_comp_agg, DBNull.Value, Getv(cod_dep))

                                dt_grid_pianiprod_det.AcceptChanges()

                                flag_fatte_mod = True

                                Call dt_artmag_pulisci_riga(i)

                                Call dt_artmag_calcola_valori(i)

                                Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

                            End If

                        End If

                    Next

            End Select

            If Not Timer_Refresh_Ordini Is Nothing Then

                If Getv(flag_ordcli_auto_refresh) = "S" Then
                    Timer_Refresh_Ordini.Start()
                End If

            End If

        Catch ex As Exception
            WaitForm_Close(Me, SplashScreenManager2)

            MsgErr(ex)

        End Try

    End Sub

    Private Sub da_cod_cli_ButtonClick(sender As System.Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs) Handles da_cod_cli.ButtonClick

        r_anacli.tipo_cli_cerca = "PDC"
        r_anacli.ShowDialog()

        If Not IsDBNull(r_anacli.cod_cli_cerca) Then
            Setv(da_cod_cli, r_anacli.cod_cli_cerca)
            Leggi_Anacli(da_cod_cli, da_rag_soc)
            Setv(Oldv1, Getv(da_cod_cli))
        End If

        r_anacli.Dispose()

    End Sub

    Private Sub da_cod_cli_Enter(sender As Object, e As System.EventArgs) Handles da_cod_cli.Enter
        Setv(Oldv1, Getv(da_cod_cli))
    End Sub

    Private Sub da_cod_cli_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles da_cod_cli.KeyDown
        If Key_F1(e) Then
            da_cod_cli_ButtonClick(Nothing, Nothing)
        End If
    End Sub

    Private Sub da_cod_cli_Leave(sender As Object, e As System.EventArgs) Handles da_cod_cli.Leave

        If Oldv1 <> Getv(da_cod_cli) Then
            Leggi_Anacli(da_cod_cli, da_rag_soc)
            Setv(Oldv1, Getv(da_cod_cli))
        End If

    End Sub

    Private Sub a_cod_cli_ButtonClick(sender As System.Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs) Handles a_cod_cli.ButtonClick

        r_anacli.tipo_cli_cerca = "PDC"
        r_anacli.ShowDialog()

        If Not IsDBNull(r_anacli.cod_cli_cerca) Then
            Setv(a_cod_cli, r_anacli.cod_cli_cerca)
            Leggi_Anacli(a_cod_cli, a_rag_soc)
            Setv(Oldv1, Getv(a_cod_cli))
        End If

        r_anacli.Dispose()

    End Sub

    Private Sub a_cod_cli_Enter(sender As Object, e As System.EventArgs) Handles a_cod_cli.Enter
        Setv(Oldv1, Getv(a_cod_cli))
    End Sub

    Private Sub a_cod_cli_KeyDown(sender As Object, e As System.Windows.Forms.KeyEventArgs) Handles a_cod_cli.KeyDown
        If Key_F1(e) Then
            a_cod_cli_ButtonClick(Nothing, Nothing)
        End If
    End Sub

    Private Sub a_cod_cli_Leave(sender As Object, e As System.EventArgs) Handles a_cod_cli.Leave

        If Oldv1 <> Getv(a_cod_cli) Then
            Leggi_Anacli(a_cod_cli, a_rag_soc)
            Setv(Oldv1, Getv(a_cod_cli))
        End If

    End Sub

    Private Sub ord_data_ora_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles ord_data_ora.CheckedChanged, ord_cod_art.CheckedChanged, ord_cod_cli.CheckedChanged, ord_des_art.CheckedChanged, ord_rag_soc_cli.CheckedChanged
        'Dim msg As String = ""

        'If sender.checked = True Then
        '    If sender.name = "ord_cod_art" Or sender.name = "ord_des_art" Then
        '        If pp_modelli_rag.cod_mod <> "" Then
        '            Beep()
        '            msg = ""
        '            msg = msg & "****    NOTA    ****" & vbCrLf & vbCrLf
        '            msg = msg & "Sono presenti degli ordinamenti personalizzati per il modello "
        '            msg = msg & IIf(pp_modelli_rag.cod_mod <> COD_MOD_GENERICO, DES_MOD_PIANMRP, "generico")
        '            msg = msg & " e raggruppamento "
        '            msg = msg & IIf(pp_modelli_rag.ragg_prod <> RAGG_PROD_GENERICO, pp_modelli_rag.ragg_prod, "generico")
        '            msg = msg & "." & vbCrLf & vbCrLf
        '            msg = msg & "Si avvisa che questi avranno priorità rispetto all'ordinamento appena impostato."
        '            XtraMessageBox.Show(msg, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
        '        End If
        '    End If
        'End If

        cmd_cerca.PerformClick()

    End Sub

    Private Sub Query_Open()

        'estrazione delle quantita ORDINE FORNITORE, ORDINE CLIENTE, QUANTITA PRODOTTA, QUANTITA PIANIFICATA ORARIO

        sql_deposito_magazzino = Leggi_pp_modelli_mag_Sql(COD_MOD_PIANMRP, "movmag")
        Lista_Dep_Altri = Leggi_pp_modelli_mag_Sql_Depositi(COD_MOD_PIANMRP)
        Sql_Dep_Mag_Altri = Leggi_pp_modelli_mag_Sql(COD_MOD_PIANMRP, "movmag", "flag_esplodi_dist")

        DB_LookUp("cod_dep_in_sede, cod_mag_in_sede, cod_causpro_cap", "azienda", , _
                   cod_dep_in_sede, cod_mag_in_sede, cod_causpro_cap)

        DB_LookUp("azienda_agg.f_salva_pian_prod, azienda_agg.tipo_gia_pian_prod, azienda_agg.tipo_doc_ord_escl, azienda_agg.flag_calcolo_impr, azienda_agg.flag_qta_pian_prod, azienda_agg.flag_aggcomm_pp, azienda_agg.flag_pp_giacepar, azienda_agg.pp_sett_vendmed, azienda_agg.flag_tipo_data",
                  "azienda_agg", ,
                   azienda_agg.f_salva_pian_prod, azienda_agg.tipo_gia_pian_prod, azienda_agg.tipo_doc_ord_escl, azienda_agg.flag_calcolo_impr, azienda_agg.flag_qta_pian_prod, azienda_agg.flag_aggcomm_pp, azienda_agg.flag_pp_giacepar, azienda_agg.pp_sett_vendmed, azienda_agg.Flag_Tipo_Data)

        '
        'Cmd_Sel_Qta_Ordforn_Data
        '
        sql = ""
        sql = sql & "   SELECT SUM((NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0))) as qta " & vbCrLf
        sql = sql & "     FROM ordforndet " & vbCrLf
        sql = sql & "    WHERE ordforndet.cod_art   = ? " & vbCrLf
        sql = sql & "      AND ordforndet.data_cons = ?" & vbCrLf
        sql = sql & "      AND NVL(ordforndet.qta_ord,0) - NVL(ordforndet.qta_arr,0) > 0 " & vbCrLf

        Cmd_Sel_Qta_Ordforn_Data = DB_CommandCreate(sql)

        With Cmd_Sel_Qta_Ordforn_Data
            .Parameters.Clear()
            .Parameters.Add("cod_art", DB2Type.Char)
            .Parameters.Add("data", DB2Type.Date)

        End With

        '
        'Cmd_Sel_Qta_Ordc_Data
        '
        sql = ""
        sql = sql & "   SELECT SUM(ordclidet.qta_in_sped) as qta " & vbCrLf
        sql = sql & "     FROM ordclidet , ordcli " & vbCrLf
        sql = sql & "    WHERE ordclidet.anno_ord = ordcli.anno_ord " & vbCrLf
        sql = sql & "      AND ordclidet.nr_ord   = ordcli.nr_ord " & vbCrLf

        If sql_deposito_magazzino <> "" Then
            sql = sql & " AND " & sql_deposito_magazzino.Replace("movmag", "ordclidet") & vbCrLf
        End If

        sql = sql & "     AND ordclidet.flag_evaso = 'N' " & vbCrLf
        sql = sql & "     AND ordclidet.tipo_riga  = 'N' " & vbCrLf
        sql = sql & "     AND qta_in_sped IS NOT NULL " & vbCrLf
        sql = sql & "     AND ordclidet.cod_art                                = ? " & vbCrLf
        sql = sql & "     AND NVL(ordcli.data_spedizione, ordclidet.data_cons) = ? " & vbCrLf

        Cmd_Sel_Qta_Ordc_Data = DB_CommandCreate(sql)

        With Cmd_Sel_Qta_Ordc_Data
            .Parameters.Clear()
            .Parameters.Add("cod_art", DB2Type.Char)
            .Parameters.Add("data", DB2Type.Date)
        End With

        '
        'Cmd_Sel_Qta_Prod_Data
        '
        sql = ""
        sql = sql & "   SELECT SUM( DECODE(tipo_um, 'L', qta_co, 'C', qta_cf, 'P', qta_pz, 'K', qta_pe) * DECODE(effetto_esistenza, '+', 1, '-', -1, 0) ) AS qta " & vbCrLf
        sql = sql & "     FROM movmag, anaart, causmag, tabum " & vbCrLf
        Sql = Sql & "    WHERE movmag.cod_art  = ? " & vbCrLf
        If Getv(azienda_agg.Flag_Tipo_Data) = "D" Then
            Sql = Sql & "      AND movmag.data_doc = ? " & vbCrLf
        Else
            Sql = Sql & "      AND movmag.data_mov = ? " & vbCrLf
        End If
        Sql = Sql & "      AND anaart.cod_art = movmag.cod_art " & vbCrLf
        sql = sql & "      AND tabum.cod_um = anaart.cod_um " & vbCrLf
        sql = sql & "      AND causmag.cod_causmag = movmag.cod_causmag " & vbCrLf
        sql = sql & "      AND causmag.cod_causmag = '" & Getv(cod_causpro_cap) & "'" & vbCrLf

        'LUPI, 24/11/2015 Nova Funghi
        'If sql_deposito_magazzino <> "" Then
        '    sql = sql & "  AND " & sql_deposito_magazzino
        'End If

        Cmd_Sel_Qta_Prod_Data = DB_CommandCreate(sql)

        With Cmd_Sel_Qta_Prod_Data
            .Parameters.Clear()
            .Parameters.Add("cod_art", DB2Type.Char)
            .Parameters.Add("data", DB2Type.Date)
        End With

        '
        'Cmd_Sel_Qta_Pora_Data
        '
        sql = ""
        sql = sql & "   SELECT SUM(CASE tabum.tipo_um " & vbCrLf
        sql = sql & "              WHEN 'L' THEN pp_calend_ora_det.qta_pian_co " & vbCrLf
        sql = sql & "              WHEN 'C' THEN pp_calend_ora_det.qta_pian_cf " & vbCrLf
        sql = sql & "              WHEN 'P' THEN pp_calend_ora_det.qta_pian_pz " & vbCrLf
        sql = sql & "              WHEN 'K' THEN pp_calend_ora_det.qta_pian_pe " & vbCrLf
        sql = sql & "              ELSE          pp_calend_ora_det.qta_pian END) as qta  " & vbCrLf
        sql = sql & "     FROM pp_calend_ora_det, anaart, tabum" & vbCrLf
        sql = sql & "    WHERE pp_calend_ora_det.cod_art_pian = anaart.cod_art " & vbCrLf
        sql = sql & "      AND anaart.cod_um              = tabum.cod_um " & vbCrLf
        sql = sql & "      AND pp_calend_ora_det.cod_art_pian = ? " & vbCrLf
        Sql = Sql & "      AND pp_calend_ora_det.data_pian    = ? " & vbCrLf

        Cmd_Sel_Qta_Pora_Data = DB_CommandCreate(sql)

        With Cmd_Sel_Qta_Pora_Data
            .Parameters.Clear()
            .Parameters.Add("cod_art", DB2Type.Char)
            .Parameters.Add("data", DB2Type.Date)
        End With

        dbtempame_art_no_mod = DB_GetTempTableName("espla")
        sql = Crea_Sql_Distinta_Esplosa_Tot(dbtempame_art_no_mod)
        DB_SqlExecute(sql)

        Tab_Espl_Distinte = DB_GetTempTableName("esplo")
        Sql = Crea_Sql_Distinta_Esplosa(Tab_Espl_Distinte)
        DB_SqlExecute(Sql)
    End Sub

    Private Sub Query_Close()

        DB_DataReaderClose(Dr_Sel_Qta_Ordc_Data, Cmd_Sel_Qta_Ordc_Data)
        DB_DataReaderClose(Dr_Sel_Qta_Ordforn_Data, Cmd_Sel_Qta_Ordforn_Data)
        DB_DataReaderClose(Dr_Sel_Qta_Pora_Data, Cmd_Sel_Qta_Pora_Data)
        DB_DataReaderClose(Dr_Sel_Qta_Prod_Data, Cmd_Sel_Qta_Prod_Data)

        DB_TableDrop(dbtempame_art_no_mod)
        DB_TableDrop(Tab_Espl_Distinte)

    End Sub

    Private Sub cmd_info_Click(sender As System.Object, e As System.EventArgs) Handles cmd_info.Click

        cmd_info.Focus()
        Application.DoEvents()

        f_info.ShowDialog()

        f_info.Dispose()

    End Sub

    Private Sub imposta_gridview_artmag()

        Dim col As DataColumn = Nothing
        Dim sql As String
        Dim max_data_calc As String = ""
        Dim max_ora_calc As String = ""
        Dim i_vis As Integer
        Dim RowArray() As DataRow = Nothing
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing

        Try

            DB_DataTableClose(dt_artmag)

            sql = ""
            sql = sql & " data_spedizione_ordcli, string    ; "
            sql = sql & " cod_art               , string    ; "
            sql = sql & " des_art               , string    ; "
            sql = sql & " cod_um                , string    ; "
            sql = sql & " ragg_prod             , string    ; "
            sql = sql & " cod_linea_prod_pre    , string    ; "
            sql = sql & " cod_ass_prod_pre      , string    ; "

            For i = 0 To dt_colonne_pp_modelli_art.Rows.Count - 1
                sql = sql & " " & dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo") & " , " & dt_colonne_pp_modelli_art.Rows(i).Item("tip_campo") & " ; "
            Next

            sql = sql & " cod_campo1_ord        , string    ; "
            sql = sql & " cod_campo2_ord        , string    ; "
            sql = sql & " cod_campo3_ord        , string    ; "
            sql = sql & " cod_campo4_ord        , string    ; "
            sql = sql & " cod_campo5_ord        , string    ; "
            sql = sql & " des_campo1_ord        , string    ; "
            sql = sql & " des_campo2_ord        , string    ; "
            sql = sql & " des_campo3_ord        , string    ; "
            sql = sql & " des_campo4_ord        , string    ; "
            sql = sql & " des_campo5_ord        , string    ; "
            sql = sql & " tipo_um               , string    ; "
            sql = sql & " qta_co                , float     ; "
            sql = sql & " qta_cf                , float     ; "
            sql = sql & " qta_pz                , float     ; "
            sql = sql & " qta_pe                , float     ; "
            sql = sql & " qta_um                , float     ; "

            If DT_Create_Temp_DataTable(dt_artmag, sql, ";", ",") = False Then

            End If

            col = dt_artmag.Columns.Add
            col.ColumnName = "sel"
            col.DataType = GetType(Boolean)
            col.Caption = "Selezione"
            col.DefaultValue = False
            col.SetOrdinal(0)

            gridctrl_artmag.DataSource = dt_artmag

            With gridview_artmag
                .OptionsBehavior.Editable = True
                ' \\\\ opzioni per copia
                .OptionsBehavior.CopyToClipboardWithColumnHeaders = False
                .OptionsSelection.MultiSelect = True
                ' ////
                .OptionsCustomization.AllowFilter = False
                .OptionsCustomization.AllowSort = True
                .OptionsNavigation.UseTabKey = False
                .OptionsSelection.EnableAppearanceFocusedCell = False
                .OptionsView.ShowAutoFilterRow = True
                .OptionsView.ShowGroupPanel = False
                .OptionsView.ColumnAutoWidth = False
                .OptionsView.ShowIndicator = False
                .OptionsNavigation.EnterMoveNextColumn = True
                .ColumnPanelRowHeight = 54 ' 36
            End With

            '
            ' repository
            '
            gridview_artmag_flag_sel = New DevExpress.XtraEditors.Repository.RepositoryItemCheckEdit

            gridview_artmag_qta_um = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
            gridview_artmag_qta_um.Mask.UseMaskAsDisplayFormat = True
            gridview_artmag_qta_um.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
            gridview_artmag_qta_um.Buttons(0).IsLeft = True
            gridview_artmag_qta_um.Buttons(0).Tag = ""
            gridview_artmag_qta_um.Buttons(0).ToolTip = ""
            gridview_artmag_qta_um.Buttons(0).Image = img_small.Images(1)
            gridview_artmag_qta_um.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
            gridview_artmag_qta_um.EditFormat.FormatString = EditMask
            gridview_artmag_qta_um.AllowMouseWheel = False

            gridview_artmag_dbl_d = Grid_Get_RepositoryItemTextEdit_Double(EditMask)
            gridview_artmag_str_40 = Grid_Get_RepositoryItemTextEdit()

            ' campi double con pulsante

            gridview_artmag_giacenza_att = Grid_Get_RepositoryItemButtonEdit(10, Mask.MaskType.Numeric, EditMask)
            gridview_artmag_giacenza_att.Mask.UseMaskAsDisplayFormat = True
            gridview_artmag_giacenza_att.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
            gridview_artmag_giacenza_att.Buttons(0).IsLeft = True
            gridview_artmag_giacenza_att.Buttons(0).Tag = "vis_lot"
            gridview_artmag_giacenza_att.Buttons(0).ToolTip = "dettaglio lotti/scadenze"
            gridview_artmag_giacenza_att.Buttons(0).Image = img_small.Images(1)
            gridview_artmag_giacenza_att.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
            gridview_artmag_giacenza_att.EditFormat.FormatString = EditMask
            gridview_artmag_giacenza_att.AllowMouseWheel = False
            gridview_artmag_giacenza_att.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

            AddHandler gridview_artmag_giacenza_att.ButtonClick, AddressOf gridview_artmag_giacenza_att_ButtonClick

            For i = 0 To gridview_artmag.Columns.Count - 1
                gridview_artmag.Columns(i).Visible = False
            Next i

            gridview_artmag_det_query = Grid_Get_RepositoryItemButtonEdit(20)
            gridview_artmag_det_query.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
            gridview_artmag_det_query.Buttons(0).IsLeft = True
            gridview_artmag_det_query.Buttons(0).Tag = "vis_query"
            gridview_artmag_det_query.Buttons(0).ToolTip = "dettaglio query"
            gridview_artmag_det_query.Buttons(0).Image = img_small.Images(1)
            gridview_artmag_det_query.Buttons(0).Width = 20
            gridview_artmag_det_query.AllowMouseWheel = False
            gridview_artmag_det_query.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor

            AddHandler gridview_artmag_det_query.ButtonClick, AddressOf gridview_artmag_det_query_ButtonClick

            gridview_artmag_det_query_dbl = Grid_Get_RepositoryItemButtonEdit(20, Mask.MaskType.Numeric, EditMask)
            gridview_artmag_det_query_dbl.Mask.UseMaskAsDisplayFormat = True
            gridview_artmag_det_query_dbl.Buttons(0).Kind = DevExpress.XtraEditors.Controls.ButtonPredefines.Glyph
            gridview_artmag_det_query_dbl.Buttons(0).IsLeft = True
            gridview_artmag_det_query_dbl.Buttons(0).Tag = "vis_query"
            gridview_artmag_det_query_dbl.Buttons(0).ToolTip = "dettaglio query"
            gridview_artmag_det_query_dbl.Buttons(0).Image = img_small.Images(1)
            gridview_artmag_det_query_dbl.Buttons(0).Width = 20
            gridview_artmag_det_query_dbl.AllowMouseWheel = False
            gridview_artmag_det_query_dbl.EditFormat.FormatType = DevExpress.Utils.FormatType.Numeric
            gridview_artmag_det_query_dbl.EditFormat.FormatString = EditMask
            gridview_artmag_det_query_dbl.TextEditStyle = DevExpress.XtraEditors.Controls.TextEditStyles.DisableTextEditor


            AddHandler gridview_artmag_det_query_dbl.ButtonClick, AddressOf gridview_artmag_det_query_ButtonClick

            With gridview_artmag

                ' colonna di selezione riga

                .Columns("sel").Width = 60
                .Columns("sel").Caption = "Selezione"
                .Columns("sel").ColumnEdit = gridview_artmag_flag_sel
                .Columns("sel").AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center
                .Columns("sel").AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center
                .Columns("sel").OptionsColumn.AllowEdit = True

                ' colonna usata per identificare la griglia di provenienza nel Drag&Drop (viene impostata fissa a "ARTMAG")

                .Columns("data_spedizione_ordcli").Width = 100
                .Columns("data_spedizione_ordcli").Caption = "IDENTIF.ARTMAG."
                .Columns("data_spedizione_ordcli").OptionsColumn.AllowEdit = False

                ' dati articolo
                .Columns("cod_art").Width = 120
                .Columns("cod_art").Caption = "Cod. Articolo"
                .Columns("cod_art").AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near
                .Columns("cod_art").AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near
                .Columns("cod_art").OptionsColumn.AllowEdit = False

                .Columns("des_art").Width = 300
                .Columns("des_art").Caption = "Descrizione Articolo"
                .Columns("des_art").AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near
                .Columns("des_art").AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near
                .Columns("des_art").OptionsColumn.AllowEdit = False

                .Columns("cod_um").Width = 50
                .Columns("cod_um").Caption = "UM"
                .Columns("cod_um").AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near
                .Columns("cod_um").AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Near
                .Columns("cod_um").OptionsColumn.AllowEdit = False

                .Columns("ragg_prod").Width = 50
                .Columns("ragg_prod").Caption = "Ragg." & vbCrLf & "Prod."
                .Columns("ragg_prod").OptionsColumn.AllowEdit = False

                .Columns("cod_linea_prod_pre").Width = 50
                .Columns("cod_linea_prod_pre").Caption = "Linea" & vbCrLf & "Prod."
                .Columns("cod_linea_prod_pre").OptionsColumn.AllowEdit = False

                .Columns("cod_ass_prod_pre").Width = 50
                .Columns("cod_ass_prod_pre").Caption = "Assetto" & vbCrLf & "Prod."
                .Columns("cod_ass_prod_pre").OptionsColumn.AllowEdit = False

                ' campi da modello: campi fissi, query, formule

                For i = 0 To dt_colonne_pp_modelli_art.Rows.Count - 1

                    ' proprietà generali campo

                    If Trim(DB_Dsv(dt_colonne_pp_modelli_art.Rows(i).Item("wid_campo"), "")) <> "" Then
                        gridview_artmag.Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).Width = DB_Dsv(dt_colonne_pp_modelli_art.Rows(i).Item("wid_campo"), 0)
                    Else
                        .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).Width = 100
                    End If

                    .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).Caption = Replace(dt_colonne_pp_modelli_art.Rows(i).Item("des_campo"), "\n", vbCrLf)
                    .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
                    .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).AppearanceCell.TextOptions.HAlignment = HorzAlignment.Far
                    .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).OptionsColumn.AllowEdit = False

                    If dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo").ToString.Contains("query") Then
                        .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).OptionsColumn.AllowEdit = True

                        sql = ""
                        sql = sql & "SELECT cod_mod, tipo_art_prod, ragg_prod, nome_campo, nr_riga, testo_campo, testo_vis "
                        sql = sql & "  FROM pp_modelli_artdet " & vbCrLf
                        sql = sql & " WHERE cod_mod = '" & pp_modelli_art.cod_mod & "' " & vbCrLf
                        sql = sql & "   AND tipo_art_prod = '" & pp_modelli_art.tipo_art_prod & "' " & vbCrLf
                        sql = sql & "   AND ragg_prod = '" & pp_modelli_art.ragg_prod & "' " & vbCrLf
                        sql = sql & "   AND nome_campo = '" & dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo") & "' " & vbCrLf
                        sql = sql & "   AND NVL(testo_vis, '') <> '' " & vbCrLf
                        sql = sql & " ORDER BY nr_riga " & vbCrLf

                        Cmd = DB_CommandCreate(sql)
                        DB_DataReaderExecute(Dr, Cmd)

                        If Dr.HasRows Then
                            .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).Image = img_small.Images(9)

                            If dt_colonne_pp_modelli_art.Rows(i).Item("tip_campo") = "string" Then
                                .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).ColumnEdit = gridview_artmag_det_query
                            Else
                                .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).ColumnEdit = gridview_artmag_det_query_dbl
                            End If
                        Else
                            .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).OptionsColumn.AllowEdit = False
                        End If

                        DB_DataReaderClose(Dr, Cmd)

                    End If

                    ' tipo campo (string/double)

                    If Not dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo").ToString.Contains("query") Then

                        If dt_colonne_pp_modelli_art.Rows(i).Item("tip_campo") = "string" Then
                            .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).ColumnEdit = gridview_artmag_str_40
                        Else
                            .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).ColumnEdit = gridview_artmag_dbl_d
                        End If

                    End If

                    ' se previsto in azienda,  il campo "giacenza_att" viene preso dalla tabella "pp_giacepar" e mostra il pulsante con il dettaglio lotti

                    If azienda_agg.flag_pp_giacepar = "S" And dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo") = "giacenza_att" Then
                        DB_LookUp("MAX(data_calc), MAX(ora_calc)", "pp_giacepar", , max_data_calc, max_ora_calc)
                        If Trim(max_data_calc) <> "" Then
                            .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).Caption = "Giacenza al" & vbCrLf & max_data_calc & " " & Mid(max_ora_calc, 1, 5)
                        Else
                            .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).Caption = "Giacenza al" & vbCrLf & "(nessuno)"
                        End If
                        .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).OptionsColumn.AllowEdit = True
                        .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).ColumnEdit = gridview_artmag_giacenza_att
                    ElseIf dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo") = "giacenza_att" Then
                        ' BORT 04/11/2016 (2016/5537) >> pulsante giacenza (PP_GIACEPAR (se attiva gestione in azienda) oppure MOVMAG)
                        .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).OptionsColumn.AllowEdit = True
                        .Columns(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")).ColumnEdit = gridview_artmag_giacenza_att
                    End If

                Next

                ' \\\\ campi per gestione raggruppamento 

                .Columns("cod_campo1_ord").Width = 100
                .Columns("cod_campo1_ord").Caption = " "

                .Columns("des_campo1_ord").Width = 100
                .Columns("des_campo1_ord").Caption = " "
                If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo1_ord <> "" Then .Columns("des_campo1_ord").Group() Else .Columns("des_campo1_ord").UnGroup()

                .Columns("cod_campo2_ord").Width = 100
                .Columns("cod_campo2_ord").Caption = " "

                .Columns("des_campo2_ord").Width = 100
                .Columns("des_campo2_ord").Caption = " "
                If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo2_ord <> "" Then .Columns("des_campo2_ord").Group() Else .Columns("des_campo2_ord").UnGroup()

                .Columns("cod_campo3_ord").Width = 100
                .Columns("cod_campo3_ord").Caption = " "

                .Columns("des_campo3_ord").Width = 100
                .Columns("des_campo3_ord").Caption = " "
                If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo3_ord <> "" Then .Columns("des_campo3_ord").Group() Else .Columns("des_campo3_ord").UnGroup()

                .Columns("cod_campo4_ord").Width = 100
                .Columns("cod_campo4_ord").Caption = " "

                .Columns("des_campo4_ord").Width = 100
                .Columns("des_campo4_ord").Caption = " "
                If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo4_ord <> "" Then .Columns("des_campo4_ord").Group() Else .Columns("des_campo4_ord").UnGroup()

                .Columns("cod_campo5_ord").Width = 100
                .Columns("cod_campo5_ord").Caption = " "

                .Columns("des_campo5_ord").Width = 100
                .Columns("des_campo5_ord").Caption = " "
                If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo5_ord <> "" Then .Columns("des_campo5_ord").Group() Else .Columns("des_campo5_ord").UnGroup()

                ' ////

                ' campi di gestione 4 quantità

                .Columns("tipo_um").Width = 50
                .Columns("tipo_um").Caption = "Tipo UM"
                .Columns("tipo_um").OptionsColumn.AllowEdit = False

                .Columns("qta_co").Width = 100
                .Columns("qta_co").Caption = "Colli"
                .Columns("qta_co").OptionsColumn.AllowEdit = False

                .Columns("qta_cf").Width = 100
                .Columns("qta_cf").Caption = "Confezioni"
                .Columns("qta_cf").OptionsColumn.AllowEdit = False

                .Columns("qta_pz").Width = 100
                .Columns("qta_pz").Caption = "Pezzi"
                .Columns("qta_pz").OptionsColumn.AllowEdit = False

                .Columns("qta_pe").Width = 100
                .Columns("qta_pe").Caption = "Peso"
                .Columns("qta_pe").OptionsColumn.AllowEdit = False

                ' campo di inserimento delle quantità

                .Columns("qta_um").Width = 120
                .Columns("qta_um").Caption = "Quantità" & vbCrLf & "da Produrre"
                .Columns("qta_um").AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
                .Columns("qta_um").AppearanceHeader.ForeColor = Color.Blue
                .Columns("qta_um").AppearanceCell.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Far
                .Columns("qta_um").OptionsColumn.AllowEdit = True
                .Columns("qta_um").ColumnEdit = gridview_artmag_qta_um

                '
                ' visibilità delle colonne / ordinamento a video
                '

                i_vis = 0

                i_vis += 1 : .Columns("sel").VisibleIndex = i_vis
                i_vis += 1 : .Columns("cod_art").VisibleIndex = i_vis
                i_vis += 1 : .Columns("des_art").VisibleIndex = i_vis
                i_vis += 1 : .Columns("cod_um").VisibleIndex = i_vis

                RowArray = dt_colonne_pp_modelli_art.Select("scrivi_campo = 'S'", "ord_campo")

                For i_r = 0 To RowArray.GetUpperBound(0)
                    i_vis += 1
                    .Columns(RowArray(i_r)("nome_campo")).VisibleIndex = i_vis
                Next i_r

                i_vis += 1 : .Columns("qta_um").VisibleIndex = i_vis

            End With

        Catch ex As Exception

            DB_DataReaderClose(Dr, Cmd)
            MsgErr(ex)

        End Try

    End Sub

    Private Sub gridview_artmag_clear()

        Try

            dt_artmag.Rows.Clear()

        Catch Exc As Exception

            MsgErr(Exc)

        End Try

    End Sub

    Private Sub dt_artmag_pulisci_riga(ByVal DtRowHandle As Integer)
        Dim colname As String

        With dt_artmag.Rows(DtRowHandle)

            For j = 0 To dt_artmag.Columns.Count - 1

                colname = dt_artmag.Columns(j).ColumnName

                Select Case colname
                    Case "data_spedizione_ordcli"
                        .Item(colname) = "ARTMAG"
                    Case "sel"
                        .Item(colname) = False
                    Case "qta_um", "qta_co", "qta_cf", "qta_pz", "qta_pe"
                        .Item(colname) = DBNull.Value
                End Select

            Next

        End With

    End Sub

    Private Sub gridview_artmag_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles gridview_artmag.PopupMenuShowing
        Dim vw As DevExpress.XtraGrid.Views.Grid.GridView = Nothing
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer
        Dim s_sel_all As String
        Dim idx_image As Integer
        Dim Livello_Gruppo_Selezionato As Integer

        vw = DirectCast(sender, DevExpress.XtraGrid.Views.Grid.GridView)

        ' tasto dx su righe della griglia degli articoli di magazzino

        If e.MenuType = DevExpress.XtraGrid.Views.Grid.GridMenuType.Row Then

            e.Menu.Items.Clear()

            '
            ' menù seleziona tutto
            '

            GridRowHandle = gridview_artmag.GetSelectedRows(0)
            DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)

            If DtRowHandle >= 0 Then

                Livello_Gruppo_Selezionato = gridview_artmag.GetRowLevel(GridRowHandle)
                If gridview_artmag.IsGroupRow(GridRowHandle) = False Then
                    Livello_Gruppo_Selezionato = Livello_Gruppo_Selezionato - 1
                End If

                If dt_artmag.Rows(DtRowHandle).Item("sel") = True Then
                    s_sel_all = "Deseleziona Tutto"
                    idx_image = 7
                Else
                    s_sel_all = "Seleziona Tutto"
                    idx_image = 6
                End If

                If pp_modelli_rag.cod_mod <> "" Then

                    ' gestione del tasto dx con selezione di tutte le righe del gruppo selezionato

                    If Livello_Gruppo_Selezionato = 0 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo1_ord) & "  (" & Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo1_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 1 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo2_ord) & "  (" & Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo2_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 2 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo3_ord) & "  (" & Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo3_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 3 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo4_ord) & "  (" & Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo4_ord")) & ")"
                    ElseIf Livello_Gruppo_Selezionato = 4 Then
                        s_sel_all = Replace(s_sel_all, "Tutto", "") & leggi_descrizione_breve(pp_modelli_rag.campo5_ord) & "  (" & Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo5_ord")) & ")"
                    End If

                End If

                e.Menu.Items.Add(New DevExpress.Utils.Menu.DXMenuItem(s_sel_all, AddressOf Menu_Sel_All_ArtMag, img_small.Images(idx_image)))

            End If

        End If

    End Sub

    Private Sub Menu_Sel_All_ArtMag(sender As System.Object, e As System.EventArgs)
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer
        Dim Livello_Gruppo_Selezionato As Integer
        Dim cod_campo1_ord_rif As String = ""
        Dim cod_campo2_ord_rif As String = ""
        Dim cod_campo3_ord_rif As String = ""
        Dim cod_campo4_ord_rif As String = ""
        Dim cod_campo5_ord_rif As String = ""
        Dim cod_campo1_ord As String = ""
        Dim cod_campo2_ord As String = ""
        Dim cod_campo3_ord As String = ""
        Dim cod_campo4_ord As String = ""
        Dim cod_campo5_ord As String = ""
        Dim valore_selezione As Boolean
        Dim cnt_sel As Integer = 0

        GridRowHandle = gridview_artmag.GetSelectedRows(0)
        DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)

        Livello_Gruppo_Selezionato = gridview_artmag.GetRowLevel(GridRowHandle)
        If gridview_artmag.IsGroupRow(GridRowHandle) = False Then
            Livello_Gruppo_Selezionato = Livello_Gruppo_Selezionato - 1
        End If

        ' gruppo di appartenenza della riga di riferimento

        If Livello_Gruppo_Selezionato = 0 Then cod_campo1_ord_rif = Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo1_ord")) Else cod_campo1_ord_rif = ""
        If Livello_Gruppo_Selezionato = 1 Then cod_campo2_ord_rif = Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo2_ord")) Else cod_campo2_ord_rif = ""
        If Livello_Gruppo_Selezionato = 2 Then cod_campo3_ord_rif = Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo3_ord")) Else cod_campo3_ord_rif = ""
        If Livello_Gruppo_Selezionato = 3 Then cod_campo4_ord_rif = Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo4_ord")) Else cod_campo4_ord_rif = ""
        If Livello_Gruppo_Selezionato = 4 Then cod_campo5_ord_rif = Trim(dt_artmag.Rows(DtRowHandle).Item("cod_campo5_ord")) Else cod_campo5_ord_rif = ""

        valore_selezione = dt_artmag.Rows(DtRowHandle).Item("sel")

        For i = 0 To dt_artmag.Rows.Count - 1

            If Livello_Gruppo_Selezionato = 0 Then cod_campo1_ord = Trim(dt_artmag.Rows(i).Item("cod_campo1_ord")) Else cod_campo1_ord = ""
            If Livello_Gruppo_Selezionato = 1 Then cod_campo2_ord = Trim(dt_artmag.Rows(i).Item("cod_campo2_ord")) Else cod_campo2_ord = ""
            If Livello_Gruppo_Selezionato = 2 Then cod_campo3_ord = Trim(dt_artmag.Rows(i).Item("cod_campo3_ord")) Else cod_campo3_ord = ""
            If Livello_Gruppo_Selezionato = 3 Then cod_campo4_ord = Trim(dt_artmag.Rows(i).Item("cod_campo4_ord")) Else cod_campo4_ord = ""
            If Livello_Gruppo_Selezionato = 4 Then cod_campo5_ord = Trim(dt_artmag.Rows(i).Item("cod_campo5_ord")) Else cod_campo5_ord = ""

            If Trim(DB_Dsv(dt_artmag.Rows(i).Item("qta_um"), "")) <> "" Then
                ' se è nello stesso gruppo...
                If cod_campo1_ord_rif = cod_campo1_ord And _
                   cod_campo2_ord_rif = cod_campo2_ord And _
                   cod_campo3_ord_rif = cod_campo3_ord And _
                   cod_campo4_ord_rif = cod_campo4_ord And _
                   cod_campo5_ord_rif = cod_campo5_ord Then
                    dt_artmag.Rows(i).Item("sel") = Not valore_selezione
                    If valore_selezione = False Then
                        cnt_sel = cnt_sel + 1
                        Carica_Tab_Espl_Distinte(i)
                    Else
                        Delete_From_Tab_Espl_Distinte(i)
                    End If
                End If
            End If
        Next

        If valore_selezione = False And cnt_sel = 0 Then
            XtraMessageBox.Show("Nessuna selezione effettuata." & vbCrLf & vbCrLf & "Nota! Vengono selezionate solo le righe dove è stata inserita la 'Quantità da Produrre.'", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
        End If

        dt_artmag.AcceptChanges()

    End Sub

    Private Sub gridview_artmag_qta_um_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs) Handles gridview_artmag_qta_um.ButtonClick
        Dim TabDistinte As String = ""
        Dim dbtempname As String = ""
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer
        Dim Db_Conn_Crea As DB2Connection = Nothing
        Dim DB_Transaction_Crea As DB2Transaction = Nothing
        Dim Qta_Da_Produrre As DevExpress.XtraEditors.ButtonEdit = Nothing
        Dim Qta_Um As Double
        Dim Qta_Co As Double
        Dim Qta_Cf As Double
        Dim Qta_Pe As Double
        Dim Qta_Pz As Double
        Dim DtRow As DataRow
        Dim Parametri As String = ""
        Dim Flag_Result As String = ""
        Dim Cmd_Ins_TabDistinte As DB2Command = Nothing
        Dim Cmd_Upd_Dbtempname As DB2Command = Nothing
        Dim Cmd_Upd_Dbtempname_Altri_Dep As DB2Command = Nothing
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Cod_Art As String = ""
        Dim Tipo_Art_Prod As String = ""
        Dim Data_Cons As Object = Nothing
        Dim Data_Piano As Object = Nothing
        Dim Cod_Art_Padre As Object = Nothing
        Dim Lista_Dep As String = ""
     
        Try

            'Db_Conn_Crea = New DB2Connection(DB_ConnectionString_NET)
            'Db_Conn_Crea.Open()

            'se non ho la quantità da produrre allora non esco

            Qta_Da_Produrre = DirectCast(sender, DevExpress.XtraEditors.ButtonEdit)

            If Object_Val(Qta_Da_Produrre) = 0 Then

                XtraMessageBox.Show("Indicare la quantità da produrre.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                Exit Sub

            End If

            GridRowHandle = gridview_artmag.GetSelectedRows(0)
            DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)
            DtRow = dt_artmag.Rows(DtRowHandle)
            Setv(Cod_Art_Padre, DB_Dsv(DtRow("cod_art"), ""))

            'se non ho la distinta base dell'articolo allora non esco

            If Not DB_LookUp("cod_art", "distbase", " cod_art = '" & Getv(Cod_Art_Padre) & "' AND tipo_riga = 'N' AND nr_variante = " & Object_Val(pp_modelli_piano.Nr_Variante), xx1) Then

                XtraMessageBox.Show("Distinta base non presente per l'articolo selezionato.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
                Exit Sub

            End If

            WaitForm_Show(Me, SplashScreenManager2, "Lettura Articoli da Magazzino in corso...")

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
            
            'function start

            dbtempname = Esplosione_Distinta(Cod_Art_Padre, Object_Val(Qta_Da_Produrre), Qta_Um, Qta_Co, Qta_Cf, Qta_Pz, Qta_Pe)

            'function end
            WaitForm_Close(Me, SplashScreenManager2)

            f_info_artmag.Nome_Tabella_Espl_Distinta = dbtempname
            f_info_artmag.EditMask = EditMask
            If Getv(cod_dep) <> "" Then
                f_info_artmag.Flag_Depositi_Altri = True
            Else
                f_info_artmag.Flag_Depositi_Altri = False
            End If

            f_info_artmag.ShowDialog()

            f_info_artmag.Dispose()

        Catch ex As Exception

            'DB_RollbackTrans(DB_Transaction_Crea)
            WaitForm_Close(Me, SplashScreenManager2)

            MsgErr(ex)

        Finally

            WaitForm_Close(Me, SplashScreenManager2)

            'DB_CommandClose(Cmd_Ins_TabDistinte)
            'DB_CommandClose(Cmd_Upd_Dbtempname)
            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
            'DB_DataReaderClose(Dr, Cmd)

            'DB_TableDrop(TabDistinte, Db_Conn_Crea)
            DB_TableDrop(dbtempname, Db_Conn_Crea)

            '' chiusura connessione per creazione tabelle temporanee 
            'Db_Conn_Crea.Close()
            'Db_Conn_Crea.Dispose()

        End Try
    End Sub

    'creo la distinta base a seconda dell' articolo passato come parametro e la sua quantità
    Public Function Esplosione_Distinta(ByVal Cod_Art_Padre As Object, ByVal Qta_Da_Produrre As Double, ByRef Qta_Um As Double, ByRef Qta_Co As Double, ByRef Qta_Cf As Double, ByRef Qta_Pz As Double, ByRef Qta_Pe As Double)

        Dim TabDistinte As String = ""
        Dim dbtempname As String = ""
        Dim Db_Conn_Crea As DB2Connection = Nothing
        Dim DB_Transaction_Crea As DB2Transaction = Nothing
        Dim Parametri As String = ""
        Dim Nr_Proc As Integer
        Dim Flag_Result As String = ""
        Dim Cmd_Ins_TabDistinte As DB2Command = Nothing
        Dim Cmd_Upd_Dbtempname As DB2Command = Nothing
        Dim Cmd_Upd_Dbtempname_Altri_Dep As DB2Command = Nothing
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim Qta_Giacenza As Double
        Dim Impegnato_Prod As Double
        Dim Impegnato_Art As Double
        Dim Qta_Ordforn As Double
        Dim Tipo_Art_Prod As String = ""
        Dim Data_Cons As Object = Nothing
        Dim Data_Piano As Object = Nothing
        Dim Lista_Dep As String = ""
        Dim Cod_Art As String = ""

        Try

            Db_Conn_Crea = New DB2Connection(DB_ConnectionString_NET)
            Db_Conn_Crea.Open()

            DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
            Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Getv(Cod_Art_Padre)
            DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

            If Pianprod_Dr_Sel_Anaart.Read Then
                Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), Object_Val(Qta_Da_Produrre), Qta_Um, Qta_Co, Qta_Cf, Qta_Pz, Qta_Pe)
            End If

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            'esplosione distinta base

            DB_BeginTrans(Db_Conn_Crea, DB_Transaction_Crea)

            ' crea la tabella temporanea usata dal programma in C (di output)
            dbtempname = DB_GetTempTableName("esplo", Db_Conn_Crea, DB_Transaction_Crea)
            Sql = Crea_Sql_Distinta_Esplosa(dbtempname)
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' tabella di input di espldist in C
            TabDistinte = DB_GetTempTableName("gestprod", Db_Conn_Crea, DB_Transaction_Crea)
            Sql = Crea_Sql_Distinte_Da_Esplodere(TabDistinte)
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' nella tabella di input di espldist in C vengono aggiunti dei campi che servono poi per i lgeami tra padri e figli
            Sql = ""
            Sql = Sql & " ALTER TABLE " & TabDistinte & " ADD ( "
            Sql = Sql & " id_pp_pianiprod           INTEGER , " & vbCrLf
            Sql = Sql & " nr_riga_pp_pianiprod      INTEGER ,  " & vbCrLf
            Sql = Sql & " qta_co               FLOAT    , " & vbCrLf
            Sql = Sql & " qta_cf               FLOAT    , " & vbCrLf
            Sql = Sql & " qta_pe               FLOAT    , " & vbCrLf
            Sql = Sql & " qta_pz               FLOAT    ) " & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            Sql = ""
            Sql = Sql & " INSERT INTO " & TabDistinte & vbCrLf
            Sql = Sql & " ( cod_art              , tipo_variante   , nr_variante     " & vbCrLf
            Sql = Sql & " , qta                  , qta_co          , qta_cf          " & vbCrLf
            Sql = Sql & " , qta_pe               , qta_pz          , id_pp_pianiprod " & vbCrLf
            Sql = Sql & " , nr_riga_pp_pianiprod , data_prod       " & vbCrLf
            Sql = Sql & " ) " & vbCrLf
            Sql = Sql & " VALUES ( "
            Sql = Sql & "   ?, ?, ? " & vbCrLf
            Sql = Sql & " , ?, ?, ? " & vbCrLf
            Sql = Sql & " , ?, ?, ? " & vbCrLf
            Sql = Sql & " , ?, ? " & vbCrLf
            Sql = Sql & " ) " & vbCrLf
            Cmd_Ins_TabDistinte = DB_CommandCreate(Sql, Db_Conn_Crea)
            Cmd_Ins_TabDistinte.Parameters.Clear()
            Cmd_Ins_TabDistinte.Parameters.Add("cod_art", DB2Type.VarChar)
            Cmd_Ins_TabDistinte.Parameters.Add("tipo_variante", DB2Type.VarChar)
            Cmd_Ins_TabDistinte.Parameters.Add("nr_variante", DB2Type.Integer)
            Cmd_Ins_TabDistinte.Parameters.Add("qta", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_co", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_cf", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_pe", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_pz", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("id_pp_pianiprod", DB2Type.Integer)
            Cmd_Ins_TabDistinte.Parameters.Add("nr_riga_pp_pianiprod", DB2Type.Integer)
            Cmd_Ins_TabDistinte.Parameters.Add("data_prod", DB2Type.Date)

            DB_CommitTrans(DB_Transaction_Crea)

            Sql = ""
            Sql = Sql & " DELETE FROM " & dbtempname & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea)

            Sql = ""
            Sql = Sql & " DELETE FROM " & TabDistinte & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea)

            DB_CommandParametersReset(Cmd_Ins_TabDistinte)
            Cmd_Ins_TabDistinte.Parameters.Item("cod_art").Value = Getv(Cod_Art_Padre)
            Cmd_Ins_TabDistinte.Parameters.Item("tipo_variante").Value = "D"
            Cmd_Ins_TabDistinte.Parameters.Item("nr_variante").Value = Object_Val(pp_modelli_piano.Nr_Variante)
            Cmd_Ins_TabDistinte.Parameters.Item("qta").Value = Qta_Um
            Cmd_Ins_TabDistinte.Parameters.Item("qta_co").Value = Qta_Co
            Cmd_Ins_TabDistinte.Parameters.Item("qta_cf").Value = Qta_Cf
            Cmd_Ins_TabDistinte.Parameters.Item("qta_pe").Value = Qta_Pe
            Cmd_Ins_TabDistinte.Parameters.Item("qta_pz").Value = Qta_Pz
            Cmd_Ins_TabDistinte.Parameters.Item("id_pp_pianiprod").Value = DBNull.Value
            Cmd_Ins_TabDistinte.Parameters.Item("nr_riga_pp_pianiprod").Value = DBNull.Value
            Cmd_Ins_TabDistinte.Parameters.Item("data_prod").Value = DB_Sql_Date(Now)
            DB_CommandExecute(Cmd_Ins_TabDistinte)

            Parametri = ";"                                                        'rf(cod_art_padre, "@@@@@@@@@@@@@") & ";"
            Parametri = Parametri & "D;"                                           'rf(l_tipo_variante, "@") & ";"
            Parametri = Parametri & Object_Val(pp_modelli_piano.Nr_Variante) & ";" 'rf(nr_variante, "000000000") & ";"
            Parametri = Parametri & DB_Sql_Date(Now) & ";"
            Parametri = Parametri & "99;"                                          'rf(passa_livello, "00000") & ";"
            Parametri = Parametri & "N;"                                           'RigheDescrittive & ";"
            Parametri = Parametri & "N;"                                           'Livello_AF & ";"
            Parametri = Parametri & ";"                                            'sQuantita & ";"
            Parametri = Parametri & "T;"                                           'TipoOrdinamento & ";"
            Parametri = Parametri & dbtempname & ";"
            Parametri = Parametri & "S;"                                           ' dbtrans
            Parametri = Parametri & TabDistinte & ";"                              ' tmptabledistinte
            Parametri = Parametri & DB_Sql_Date(Now) & ";"                         ' s_data_prod_in

            TaskSrv_Start2("espldist", "Esplosione Distinta.", Parametri, Nr_Proc, True)
            TaskSrv_Status(Nr_Proc, Flag_Result)

            If Flag_Result = "R" Then

                WaitForm_Close(Me, SplashScreenManager2)
                XtraMessageBox.Show("Attenzione! Problema con Esplosione Distinta.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)

                Exit Function

            End If

            Sql = ""
            Sql = Sql & " ALTER TABLE " & dbtempname & " ADD ( "
            Sql = Sql & " qta_giace         FLOAT , " & vbCrLf
            Sql = Sql & " qta_imp_prod      FLOAT , " & vbCrLf
            Sql = Sql & " qta_imp_art       FLOAT , " & vbCrLf
            Sql = Sql & " qta_ordforn       FLOAT , " & vbCrLf
            Sql = Sql & " data_cons         DATE  ) " & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            Sql = ""
            Sql = Sql & " UPDATE " & dbtempname & vbCrLf
            Sql = Sql & " SET qta_giace    = ? " & vbCrLf
            Sql = Sql & "   , qta_imp_prod = ? " & vbCrLf
            Sql = Sql & "   , qta_imp_art  = ? " & vbCrLf
            Sql = Sql & "   , qta_ordforn  = ? " & vbCrLf
            Sql = Sql & "   , data_cons    = ? " & vbCrLf
            Sql = Sql & " WHERE cod_art    = ? " & vbCrLf
            Cmd_Upd_Dbtempname = DB_CommandCreate(Sql, Db_Conn_Crea)
            Cmd_Upd_Dbtempname.Parameters.Clear()
            Cmd_Upd_Dbtempname.Parameters.Add("qta_giace", DB2Type.Float)
            Cmd_Upd_Dbtempname.Parameters.Add("qta_imp_prod", DB2Type.Float)
            Cmd_Upd_Dbtempname.Parameters.Add("qta_imp_art", DB2Type.Float)
            Cmd_Upd_Dbtempname.Parameters.Add("qta_ordforn", DB2Type.Float)
            Cmd_Upd_Dbtempname.Parameters.Add("data_cons", DB2Type.Date)
            Cmd_Upd_Dbtempname.Parameters.Add("cod_art", DB2Type.VarChar)

            If Getv(cod_dep) <> "" Then

                Lista_Dep = "(" & "'" & Getv(cod_dep) & "'" & ")"

                Sql = ""
                Sql = Sql & " ALTER TABLE " & dbtempname & " ADD ( "
                Sql = Sql & " qta_giace_altri         FLOAT , " & vbCrLf
                Sql = Sql & " qta_imp_prod_altri      FLOAT , " & vbCrLf
                Sql = Sql & " qta_ordforn_altri       FLOAT ) " & vbCrLf
                DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

                Sql = ""
                Sql = Sql & " UPDATE " & dbtempname & vbCrLf
                Sql = Sql & " SET qta_giace_altri    = ? " & vbCrLf
                Sql = Sql & "   , qta_imp_prod_altri = ? " & vbCrLf
                Sql = Sql & "   , qta_ordforn_altri  = ? " & vbCrLf
                Sql = Sql & " WHERE cod_art    = ? " & vbCrLf
                Cmd_Upd_Dbtempname_Altri_Dep = DB_CommandCreate(Sql, Db_Conn_Crea)
                Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Clear()
                Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Add("qta_giace_altri", DB2Type.Float)
                Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Add("qta_imp_prod_altri", DB2Type.Float)
                Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Add("qta_ordforn_altri", DB2Type.Float)
                Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Add("cod_art", DB2Type.VarChar)

            End If

            Sql = ""
            Sql = Sql & " SELECT * " & vbCrLf
            Sql = Sql & " FROM " & dbtempname & vbCrLf
            DB_DataReaderClose(Dr, Cmd)
            Cmd = DB_CommandCreate(Sql)
            DB_DataReaderExecute(Dr, Cmd)

            Do While Dr.Read

                Cod_Art = DB_Dsv(Dr("cod_art"), "")
                Tipo_Art_Prod = DB_Dsv(Dr("tipo_art_prod"), "")
                Setv(Data_Piano, Now)
                Data_Cons = Nothing

                Qta_Giacenza = Leggi_Giacenza("ATT", False, Tipo_Art_Prod, Data_Piano, Cod_Art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr)
                Impegnato_Prod = Leggi_Impegnato_Produzione(Cod_Art, Data_Piano, Lista_Dep)
                Impegnato_Art = Leggi_Impegnato_Articolo(Cod_Art, Cod_Art_Padre)
                Qta_Ordforn = Leggi_Ordini_Fornitore("ATT", Cod_Art, Data_Piano, Data_Cons, Lista_Dep)

                DB_CommandParametersReset(Cmd_Upd_Dbtempname)
                Cmd_Upd_Dbtempname.Parameters.Item("qta_giace").Value = Qta_Giacenza
                Cmd_Upd_Dbtempname.Parameters.Item("qta_imp_prod").Value = Impegnato_Prod
                Cmd_Upd_Dbtempname.Parameters.Item("qta_imp_art").Value = Impegnato_Art
                Cmd_Upd_Dbtempname.Parameters.Item("qta_ordforn").Value = Qta_Ordforn
                Cmd_Upd_Dbtempname.Parameters.Item("data_cons").Value = DB_Dsv(Data_Cons, DBNull.Value)
                Cmd_Upd_Dbtempname.Parameters.Item("cod_art").Value = Cod_Art
                DB_CommandExecute(Cmd_Upd_Dbtempname)

                If Getv(cod_dep) <> "" Then

                    Qta_Giacenza = Leggi_Giacenza("ATT", False, Tipo_Art_Prod, Data_Piano, Cod_Art, Sql_Dep_Mag_Altri, azienda_agg.flag_calcolo_impr)
                    Impegnato_Prod = Leggi_Impegnato_Produzione(Cod_Art, Data_Piano, Lista_Dep_Altri)
                    Qta_Ordforn = Leggi_Ordini_Fornitore("ATT", Cod_Art, Data_Piano, Data_Cons, Lista_Dep_Altri)

                    DB_CommandParametersReset(Cmd_Upd_Dbtempname_Altri_Dep)
                    Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Item("qta_giace_altri").Value = Qta_Giacenza
                    Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Item("qta_imp_prod_altri").Value = Impegnato_Prod
                    Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Item("qta_ordforn_altri").Value = Qta_Ordforn
                    Cmd_Upd_Dbtempname_Altri_Dep.Parameters.Item("cod_art").Value = Cod_Art
                    DB_CommandExecute(Cmd_Upd_Dbtempname_Altri_Dep)
                End If

            Loop

            DB_DataReaderClose(Dr, Cmd)

            DB_CommitTrans(DB_Transaction_Crea)

            Return dbtempname 'ritorno il nome della tabella temporanea che sarà gestito dalla classe f_info_artmag

        Catch ex As Exception

            DB_RollbackTrans(DB_Transaction_Crea)
            MsgErr(ex)

        Finally

            'WaitForm_Close(Me, SplashScreenManager2) commentato perchè in fase di pianificazione elimina il dialog 

            DB_CommandClose(Cmd_Ins_TabDistinte)
            DB_CommandClose(Cmd_Upd_Dbtempname)
            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
            DB_DataReaderClose(Dr, Cmd)

            DB_TableDrop(TabDistinte, Db_Conn_Crea)
            'DB_TableDrop(dbtempname, Db_Conn_Crea)

            ' chiusura connessione per creazione tabelle temporanee 
            Db_Conn_Crea.Close()
            Db_Conn_Crea.Dispose()
        End Try

    End Function


    Private Sub gridview_artmag_qta_um_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles gridview_artmag_qta_um.Enter

        SyncLock Obj_Lock
            ArtMag_Qta_Um_In_Editing = True
        End SyncLock

    End Sub

    Private Sub gridview_artmag_qta_um_Validating(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles gridview_artmag_qta_um.Validating
        Dim cod_campo As Object = CType(sender, TextEdit)
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer

        GridRowHandle = gridview_artmag.GetSelectedRows(0)
        DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)

        Call artmag_qta_um_modificata(Getv(sender), DtRowHandle)

        SyncLock Obj_Lock
            ArtMag_Qta_Um_In_Editing = False
        End SyncLock
        Carica_Tab_Espl_Distinte(DtRowHandle)

    End Sub

    Private Sub gridview_piano_gia_att_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer

        If grid_piano_view.SelectedRowsCount <= 0 Then
            Exit Sub
        End If

        GridRowHandle = grid_piano_view.GetSelectedRows(0)
        DtRowHandle = grid_piano_view.GetDataSourceRowIndex(GridRowHandle)

        Select Case e.Button.Tag

            Case "vis_lot"

                f_pp_lotti.Cod_Art_In = RTrim(DB_Dsv(dt_piano.Rows(DtRowHandle).Item("cod_art"), ""))
                f_pp_lotti.Sql_Dep_Mag_In = sql_deposito_magazzino
                f_pp_lotti.Da_Data_Pian_In = Getv(da_data_pian)
                If azienda_agg.flag_pp_giacepar = "S" Then
                    f_pp_lotti.Flag_Leggi_Movmag_In = False
                Else
                    f_pp_lotti.Flag_Leggi_Movmag_In = True
                End If
                f_pp_lotti.EditMask = EditMask

                f_pp_lotti.ShowDialog()
                f_pp_lotti.Dispose()

        End Select

    End Sub

    Private Sub gridview_artmag_giacenza_att_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer

        If gridview_artmag.SelectedRowsCount <= 0 Then
            Exit Sub
        End If

        GridRowHandle = gridview_artmag.GetSelectedRows(0)
        DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)

        Select Case e.Button.Tag

            Case "vis_lot"

                f_pp_lotti.Cod_Art_In = RTrim(DB_Dsv(dt_artmag.Rows(DtRowHandle).Item("cod_art"), ""))
                f_pp_lotti.Sql_Dep_Mag_In = sql_deposito_magazzino
                f_pp_lotti.Da_Data_Pian_In = Format(Now, "dd/MM/yyyy")
                If azienda_agg.flag_pp_giacepar = "S" Then
                    f_pp_lotti.Flag_Leggi_Movmag_In = False
                Else
                    f_pp_lotti.Flag_Leggi_Movmag_In = True
                End If
                f_pp_lotti.EditMask = EditMask

                f_pp_lotti.ShowDialog()
                f_pp_lotti.Dispose()

        End Select

    End Sub

    ' articoli da magazzino: ricalcola le quantità a dettaglio

    Private Sub artmag_qta_um_modificata(qta_letta As Object, DtRowHandle As Integer)
        Dim qta_lt As Double = 0 ' qta letta
        Dim qta_um As Double = 0
        Dim qta_co As Double = 0
        Dim qta_cf As Double = 0
        Dim qta_pz As Double = 0
        Dim qta_pe As Double = 0

        Try

            qta_lt = Math.Round(Object_Val(qta_letta), 3)

            If qta_lt <> 0 Then

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = dt_artmag.Rows(DtRowHandle).Item("cod_art")
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then
                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), qta_lt, qta_um, qta_co, qta_cf, qta_pz, qta_pe)
                End If

            End If

            If qta_um <> 0 Then dt_artmag.Rows(DtRowHandle).Item("qta_um") = qta_um Else dt_artmag.Rows(DtRowHandle).Item("qta_um") = DBNull.Value
            If qta_co <> 0 Then dt_artmag.Rows(DtRowHandle).Item("qta_co") = qta_co Else dt_artmag.Rows(DtRowHandle).Item("qta_co") = DBNull.Value
            If qta_cf <> 0 Then dt_artmag.Rows(DtRowHandle).Item("qta_cf") = qta_cf Else dt_artmag.Rows(DtRowHandle).Item("qta_cf") = DBNull.Value
            If qta_pz <> 0 Then dt_artmag.Rows(DtRowHandle).Item("qta_pz") = qta_pz Else dt_artmag.Rows(DtRowHandle).Item("qta_pz") = DBNull.Value
            If qta_pe <> 0 Then dt_artmag.Rows(DtRowHandle).Item("qta_pe") = qta_pe Else dt_artmag.Rows(DtRowHandle).Item("qta_pe") = DBNull.Value

            If qta_um <> 0 Then dt_artmag.Rows(DtRowHandle).Item("sel") = True Else dt_artmag.Rows(DtRowHandle).Item("sel") = False

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Sub

    Private Sub cmd_proponi_artmag_Click(sender As System.Object, e As System.EventArgs) Handles cmd_proponi_artmag.Click

        ' Fermo il timer se è già stato inizializzato
        If Not Timer_Refresh_Magazzino Is Nothing Then
            Timer_Refresh_Magazzino.Stop()
        End If

        If Field_Null(Tipo_Art_Prod_Testata) Then
            XtraMessageBox.Show("Indicare il Tipo Articolo / Raggruppamento di Produzione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)
            tipo_ragg_prod_art_sel.Focus()
            Exit Sub
        End If

        Leggi_Dati_ArtMag()

        ' Imposto il timer per generare il refresh automatico dei dati di magazzino
        Timer_Refresh_Magazzino = New Timer()
        Timer_Refresh_Magazzino.Interval = Getv(min_artmag_auto_refresh) * 60 * 1000
        AddHandler Timer_Refresh_Magazzino.Tick, AddressOf Handler_Timer_Refresh_Magazzino

        If Getv(flag_artmag_auto_refresh) = "S" Then
            Timer_Refresh_Magazzino.Start()
        End If

        Delete_From_Tab_Espl_Distinte()

    End Sub

    ' Se ho specificato un articolo, aggiorno solamente i dati di quell'articolo
    ' in questo caso, assumo che il datatable sia già popolato e la riga dell'articolo presente
    Public Sub Leggi_Dati_ArtMag(Optional Cod_Art As String = "")

        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim NewRow As DataRow
        Dim sql As String
        Dim elimina_riga As Boolean
        Dim cnt As Long
        Dim cnt_tot As Long
        Dim Cod_Dep_Linea As Object = Nothing
        Dim Cod_Linea_Prod As String = ""
        Dim Cod_Ass_Prod As String = ""

        Try

            If Flag_AutoRead Then
                ' Inibisco l'aggiornamento se ho eseguito un refresh totale che di conseguenza cambia la riga selezionata
                Flag_AutoRead = False
                Exit Sub
            End If

            If Field_Null(Cod_Art) Then

                Flag_AutoRead = True
                imposta_gridview_artmag()
                gridview_artmag_clear()

            End If

            WaitForm_Show(Me, SplashScreenManager2, "Lettura Articoli in corso...")

            sql = ""
            sql = sql & "SELECT anaart.cod_art, anaart.des_art, anaart.cod_um, anaart.ragg_prod, anaart.cod_linea_prod_pre, anaart.cod_ass_prod_pre, tabum.tipo_um AS tabum_tipo_um " & vbCrLf

            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo1_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo1_ord & ",'')) AS cod_campo1_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo1_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo2_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo2_ord & ",'')) AS cod_campo2_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo2_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo3_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo3_ord & ",'')) AS cod_campo3_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo3_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo4_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo4_ord & ",'')) AS cod_campo4_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo4_ord " & vbCrLf
            If pp_modelli_rag.cod_mod <> "" And pp_modelli_rag.campo5_ord <> "" Then sql = sql & " , TRIM(NVL(" & pp_modelli_rag.campo5_ord & ",'')) AS cod_campo5_ord " & vbCrLf Else sql = sql & ", '' AS cod_campo5_ord " & vbCrLf

            sql = sql & "  FROM anaart, " & vbCrLf
            sql = sql & "       OUTER tabum " & vbCrLf
            sql = sql & " WHERE NVL(anaart.flag_bloccato,'') <> 'S' " & vbCrLf
            sql = sql & "   AND anaart.flag_pc = 'P' " & vbCrLf ' solo articoli PRODOTTI (no articoli commercializzati o altro)
            sql = sql & "   AND anaart.tipo_art_prod = '" & Tipo_Art_Prod_Testata & "' " & vbCrLf

            If Not Field_Null(Ragg_Prod_Testata) Then
                sql = sql & "   AND anaart.ragg_prod = '" & Ragg_Prod_Testata & "' " & vbCrLf
            End If

            sql = sql & "   AND anaart.cod_um = tabum.cod_um " & vbCrLf

            If Not Field_Null(Cod_Art) Then
                sql = sql & " AND cod_art = '" & Cod_Art & "'"
            End If

            'AppFiltri
            If Where_AppFiltri <> "" AndAlso Tipo_Art_Prod_Testata = "PF" Then
                sql = sql & Where_AppFiltri & vbCrLf
            End If

            sql = sql & " ORDER BY anaart.cod_art " & vbCrLf

            Cmd = DB_CommandCreate(sql)
            DB_DataReaderExecute(Dr, Cmd)

            ' \\\\ conteggio dei records per progressbar

            sql = ""
            sql = sql & "       NVL(anaart.flag_bloccato,'') <> 'S' " & vbCrLf
            sql = sql & "   AND anaart.flag_pc = 'P' " & vbCrLf ' solo articoli PRODOTTI (no articoli commercializzati o altro)
            sql = sql & "   AND anaart.tipo_art_prod = '" & Tipo_Art_Prod_Testata & "' " & vbCrLf

            If Not Field_Null(Ragg_Prod_Testata) Then
                sql = sql & "   AND anaart.ragg_prod = '" & Ragg_Prod_Testata & "'" & vbCrLf
            End If

            If Not Field_Null(Cod_Art) Then
                sql = sql & " AND cod_art = '" & Cod_Art & "'"
            End If

            'AppFiltri
            If Where_AppFiltri <> "" AndAlso Tipo_Art_Prod_Testata = "PF" Then
                sql = sql & Where_AppFiltri & vbCrLf
            End If

            DB_LookUp("COUNT(*)", "anaart", sql, cnt_tot)
            cnt = 0
            pb.Visible = True

            ' ////

            While Dr.Read

                If Field_Null(Cod_Art) Then

                    NewRow = dt_artmag.NewRow()

                    cnt = cnt + 1
                    pb.EditValue = (cnt / cnt_tot) * 100
                    pb.Refresh()

                    NewRow("sel") = False
                    NewRow("data_spedizione_ordcli") = "ARTMAG"

                    ' dati articolo

                    NewRow("cod_art") = Dr.Item("cod_art")
                    NewRow("des_art") = RTrim(DB_Dsv(Dr.Item("des_art"), ""))
                    NewRow("cod_um") = Dr.Item("cod_um")
                    NewRow("tipo_um") = Dr.Item("tabum_tipo_um")
                    NewRow("ragg_prod") = Dr.Item("ragg_prod")

                    NewRow("cod_linea_prod_pre") = Dr.Item("cod_linea_prod_pre")
                    NewRow("cod_ass_prod_pre") = Dr.Item("cod_ass_prod_pre")

                    If Getv(cod_dep) <> "" Then

                        DB_LookUp("cod_dep_linea", "pp_tabpzora", "cod_linea_prod = '" & DB_Dsv(Dr.Item("cod_linea_prod_pre"), "") & "' AND cod_ass_prod = '" & DB_Dsv(Dr.Item("cod_ass_prod_pre"), "") & "' AND nr_riga = 1", Cod_Dep_Linea)

                        If Getv(Cod_Dep_Linea) <> Getv(cod_dep) Then
                            Cerca_Linea_Veloce(Dr.Item("cod_art"), Getv(cod_dep), Cod_Linea_Prod, Cod_Ass_Prod)
                            NewRow("cod_linea_prod_pre") = Cod_Linea_Prod
                            NewRow("cod_ass_prod_pre") = Cod_Ass_Prod
                        End If

                    End If

                    '  campi per gestione raggruppamento 

                    NewRow("cod_campo1_ord") = Dr.Item("cod_campo1_ord")
                    NewRow("cod_campo2_ord") = Dr.Item("cod_campo2_ord")
                    NewRow("cod_campo3_ord") = Dr.Item("cod_campo3_ord")
                    NewRow("cod_campo4_ord") = Dr.Item("cod_campo4_ord")
                    NewRow("cod_campo5_ord") = Dr.Item("cod_campo5_ord")

                    If pp_modelli_rag.campo1_ord <> "" Then NewRow.Item("des_campo1_ord") = "(" & Trim(DB_Dsv(NewRow.Item("cod_campo1_ord"), "")) & ") " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo1_ord, NewRow.Item("cod_campo1_ord"))
                    If pp_modelli_rag.campo2_ord <> "" Then NewRow.Item("des_campo2_ord") = "(" & Trim(DB_Dsv(NewRow.Item("cod_campo2_ord"), "")) & ") " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo2_ord, NewRow.Item("cod_campo2_ord"))
                    If pp_modelli_rag.campo3_ord <> "" Then NewRow.Item("des_campo3_ord") = "(" & Trim(DB_Dsv(NewRow.Item("cod_campo3_ord"), "")) & ") " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo3_ord, NewRow.Item("cod_campo3_ord"))
                    If pp_modelli_rag.campo4_ord <> "" Then NewRow.Item("des_campo4_ord") = "(" & Trim(DB_Dsv(NewRow.Item("cod_campo4_ord"), "")) & ") " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo4_ord, NewRow.Item("cod_campo4_ord"))
                    If pp_modelli_rag.campo5_ord <> "" Then NewRow.Item("des_campo5_ord") = "(" & Trim(DB_Dsv(NewRow.Item("cod_campo5_ord"), "")) & ") " & leggi_descrizione(pp_modelli_rag.tipo_classe, pp_modelli_rag.campo5_ord, NewRow.Item("cod_campo5_ord"))

                    dt_artmag.Rows.Add(NewRow)

                    dt_artmag_calcola_valori(dt_artmag.Rows.Count - 1)

                    ' scorre tutte le colonne appena calcolate, se sono tutte vuote --> elimina la riga

                    elimina_riga = True

                    For i = 0 To dt_colonne_pp_modelli_art.Rows.Count - 1
                        If dt_colonne_pp_modelli_art.Rows(i).Item("scrivi_campo") = "S" Then
                            If Trim(DB_Dsv(dt_artmag.Rows(dt_artmag.Rows.Count - 1).Item(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")), "")) <> "" Then
                                elimina_riga = False
                                Exit For
                            End If
                        End If
                    Next

                    If elimina_riga = True Then
                        dt_artmag.Rows.RemoveAt(dt_artmag.Rows.Count - 1)
                    End If

                Else

                    For i As Integer = 0 To dt_artmag.Rows.Count - 1

                        If dt_artmag.Rows(i)("cod_art") = Cod_Art Then

                            dt_artmag_calcola_valori(i)
                            Exit For

                        End If

                    Next

                End If

            End While

            DB_DataReaderClose(Dr, Cmd)

            ' gestione raggruppamento 

            If Field_Null(Cod_Art) Then

                gridview_artmag.CollapseAllGroups()

                If pp_modelli_rag.cod_mod <> "" Then
                    If pp_modelli_rag.campo1_ord <> "" And pp_modelli_rag.campo1_ord_flagesp = "S" Then gridview_artmag.ExpandGroupLevel(0)
                    If pp_modelli_rag.campo2_ord <> "" And pp_modelli_rag.campo2_ord_flagesp = "S" Then gridview_artmag.ExpandGroupLevel(1)
                    If pp_modelli_rag.campo3_ord <> "" And pp_modelli_rag.campo3_ord_flagesp = "S" Then gridview_artmag.ExpandGroupLevel(2)
                    If pp_modelli_rag.campo4_ord <> "" And pp_modelli_rag.campo4_ord_flagesp = "S" Then gridview_artmag.ExpandGroupLevel(3)
                    If pp_modelli_rag.campo5_ord <> "" And pp_modelli_rag.campo5_ord_flagesp = "S" Then gridview_artmag.ExpandGroupLevel(4)
                End If

                If dt_artmag.Rows.Count > 0 Then
                    gridview_artmag.SelectRow(gridview_artmag.GetRowHandle(0))
                End If

            End If

        Catch ex As Exception

            WaitForm_Close(Me, SplashScreenManager2)
            Mouse_Default()

            MsgErr(ex)

        Finally

            pb.Visible = False
            WaitForm_Close(Me, SplashScreenManager2)
            Mouse_Default()

        End Try

    End Sub

    Private Sub Handler_Timer_Refresh_Magazzino(sender As Object, e As EventArgs)

        Dim Flag_Dati_In_Modifica As Boolean = False

        SyncLock Obj_Lock

            ' Durante la gestione del refresh, devo fermare e riavviare il timer.
            Timer_Refresh_Magazzino.Stop()

            ' Verifico se l'utente è in modifica sulla colonna qta_um
            If ArtMag_Qta_Um_In_Editing Then
                Flag_Dati_In_Modifica = True
            Else

                gridview_artmag.OptionsBehavior.ReadOnly = True

                ' Verifico se l'utente ha previsto delle quantità da produrre non ancora salvate
                For Each row As DataRow In dt_artmag.Rows

                    If DB_Dsv(row("qta_um"), 0) <> 0 Then
                        Flag_Dati_In_Modifica = True
                        Exit For
                    End If

                Next

            End If

            If Not Flag_Dati_In_Modifica Then

                ' Se i dati non sono in modifica, aggiorno la griglia
                cmd_proponi_artmag.PerformClick()

            End If

            ' Riavvio il timer
            If Getv(flag_artmag_auto_refresh) = "S" Then
                Timer_Refresh_Magazzino.Start()
            End If

            gridview_artmag.OptionsBehavior.ReadOnly = False

        End SyncLock

    End Sub

    Private Sub dt_artmag_calcola_valori(ByVal DtRowHandle As Integer)
        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim cod_art As String = ""
        Dim tipo_um As String = ""
        Dim valore As Double
        Dim str_valore As String = ""
        Dim formula As String = ""
        Dim flag_result As Boolean
        Dim scrivi_valore As Boolean
        Dim ometti As Boolean
        Dim idx_con As Integer
        Dim str_con As String
        Dim str_val As String
        Dim dbl_val As Double


        cod_art = Trim(DB_Dsv(dt_artmag.Rows(DtRowHandle).Item("cod_art"), ""))
        tipo_um = Trim(DB_Dsv(dt_artmag.Rows(DtRowHandle).Item("tipo_um"), ""))

        ' scorre il datatable con le colonne 

        For i = 0 To dt_colonne_pp_modelli_art.Rows.Count - 1

            ' campo da scrivere a video S/N

            If dt_colonne_pp_modelli_art.Rows(i).Item("scrivi_campo") = "S" Then

                valore = 0
                str_valore = ""

                If InStr(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo"), "formula") > 0 Then

                    '
                    ' CAMPI FORMULA
                    '
                    ' 1°) compone la formula              (es: formula = "<giacenza_prec> + <carichi_prec> - <scarichi_prec>")
                    ' 2°) sostituisce i nomi con i valori (es: formula = "1500 + 640 - 480")
                    ' 3°) risolve l'espressione formula   (es: formula = 1660)
                    '

                    ' 1°)  compone la formula
                    formula = leggi_formula_pp_modelli_artdet(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo"))

                    If Trim(Replace(formula, vbCrLf, "")) <> "" Then

                        formula = formula.ToLower

                        For k = 0 To dt_colonne_pp_modelli_art.Rows.Count - 1
                            ' 2°) sostituisce i nomi con i valori
                            If InStr(formula, "<" & dt_colonne_pp_modelli_art.Rows(k).Item("nome_campo") & ">") > 0 Then
                                str_valore = leggi_valore_pp_modelli_artdet(dt_colonne_pp_modelli_art.Rows(k).Item("tip_campo"), dt_colonne_pp_modelli_art.Rows(k).Item("nome_campo"), cod_art, tipo_um)
                                If IsNumeric(str_valore) Then
                                    valore = CDbl(Replace(str_valore, ".", ","))
                                Else
                                    valore = 0
                                End If
                                formula = Replace(formula, "<" & dt_colonne_pp_modelli_art.Rows(k).Item("nome_campo") & ">", Replace(valore.ToString, ".", ","))
                            End If
                        Next
                        ' 3°) risolve l'espressione formula 
                        flag_result = Expression_Val(formula, valore)
                        str_valore = valore.ToString
                        If flag_result = False Then
                            valore = 0
                            str_valore = ""
                        End If
                    End If

                Else

                    '
                    ' CAMPI FISSI + QUERY
                    '

                    str_valore = leggi_valore_pp_modelli_artdet(dt_colonne_pp_modelli_art.Rows(i).Item("tip_campo"), dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo"), cod_art, tipo_um)

                End If

                ' scrive il campo a video

                If dt_colonne_pp_modelli_art.Rows(i).Item("tip_campo") = "string" Then

                    '
                    ' campi TESTO
                    '

                    If str_valore <> "" Then
                        dt_artmag.Rows(DtRowHandle).Item(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")) = str_valore
                    Else
                        dt_artmag.Rows(DtRowHandle).Item(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")) = DBNull.Value
                    End If

                Else

                    '
                    ' campi NUMERO
                    '

                    If IsNumeric(str_valore) Then
                        valore = CDbl(Replace(str_valore, ".", ","))
                    Else
                        valore = 0
                    End If

                    ' CONDIZIONE + OMETTI: controlla se il valore deve essere scritto solo a certe condizioni inserite nel modello (es: valore > 100, valore < 0, ...)

                    str_con = Trim(DB_Dsv(dt_colonne_pp_modelli_art.Rows(i).Item("con_campo"), ""))

                    scrivi_valore = True

                    If str_con <> "" And Trim(DB_Dsv(dt_colonne_pp_modelli_art.Rows(i).Item("ome_campo"), "")) = "S" Then

                        ometti = False

                        idx_con = 0
                        str_val = ""

                        If InStr(str_con, ">=") > 0 Then
                            idx_con = 1
                            str_val = Replace(str_con, ">=", "")
                        ElseIf InStr(str_con, "<=") > 0 Then
                            idx_con = 2
                            str_val = Replace(str_con, "<=", "")
                        ElseIf InStr(str_con, ">") > 0 Then
                            idx_con = 3
                            str_val = Replace(str_con, ">", "")
                        ElseIf InStr(str_con, "<") > 0 Then
                            idx_con = 4
                            str_val = Replace(str_con, "<", "")
                        ElseIf InStr(str_con, "=") > 0 Then
                            idx_con = 5
                            str_val = Replace(str_con, "=", "")
                        End If

                        If IsNumeric(str_val) Then
                            dbl_val = CDbl(str_val)
                            Select Case idx_con
                                Case 1 : If valore >= dbl_val Then ometti = True
                                Case 2 : If valore <= dbl_val Then ometti = True
                                Case 3 : If valore > dbl_val Then ometti = True
                                Case 4 : If valore < dbl_val Then ometti = True
                                Case 5 : If Math.Round(valore, 3) = Math.Round(dbl_val, 3) Then ometti = True
                            End Select
                        End If

                        If ometti = True Then
                            scrivi_valore = False
                        End If

                    End If

                    If scrivi_valore = True Then
                        If valore <> 0 Then
                            dt_artmag.Rows(DtRowHandle).Item(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")) = str_valore
                        Else
                            dt_artmag.Rows(DtRowHandle).Item(dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")) = DBNull.Value
                        End If
                    End If

                End If

            End If

        Next

    End Sub

    Private Function leggi_valore_pp_modelli_artdet(tipo_campo As String, nome_campo As String, cod_art As String, tipo_um As String) As String

        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim sql As String = ""
        Dim data0 As Date
        Dim data1 As Date
        Dim valore As Double = 0
        Dim str_valore As String = ""
        Dim sql_colqta As String = ""
        Dim sql_colonn As String = ""
        Dim sql_qta As String = ""

        leggi_valore_pp_modelli_artdet = ""

        Select Case nome_campo

            Case "giacenza_prec"

                valore = Math.Round(Leggi_Giacenza("INI", False, Tipo_Art_Prod_Testata, Getv(da_data_pian), cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)

            Case "carichi_prec"

                ' giorno prima
                If IsDate(Getv(da_data_pian)) Then
                    data1 = DateAdd(DateInterval.Day, -1, CDate(Getv(da_data_pian)))
                Else
                    data1 = DateAdd(DateInterval.Day, -1, Now)
                End If
                ' anno prima
                data0 = DateAdd(DateInterval.Year, -1, data1)

                sql = ""
                sql = sql & "SELECT SUM(movmag.qta_co) AS qta_co, " & vbCrLf
                sql = sql & "       SUM(movmag.qta_cf) AS qta_cf, " & vbCrLf
                sql = sql & "       SUM(movmag.qta_pz) AS qta_pz, " & vbCrLf
                sql = sql & "       SUM(movmag.qta_pe) AS qta_pe  " & vbCrLf
                sql = sql & "  FROM movmag, causmag " & vbCrLf
                sql = sql & " WHERE movmag.cod_causmag = causmag.cod_causmag " & vbCrLf
                sql = sql & "   AND causmag.effetto_esistenza = '+' " & vbCrLf
                sql = sql & "   AND movmag.cod_art = '" & cod_art & "' " & vbCrLf
                sql = sql & "   AND movmag.data_mov >= '" & Format(data0, "dd/MM/yyyy") & "' " & vbCrLf
                sql = sql & "   AND movmag.data_mov <= '" & Format(data1, "dd/MM/yyyy") & "' " & vbCrLf
                If Trim(sql_deposito_magazzino) <> "" Then
                    sql = sql & "   AND  " & sql_deposito_magazzino & vbCrLf
                End If
                sql = sql & " GROUP BY causmag.effetto_esistenza " & vbCrLf

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    Select Case tipo_um
                        Case "L" : valore = DB_Dsv(Dr.Item("qta_co"), 0)
                        Case "C" : valore = DB_Dsv(Dr.Item("qta_cf"), 0)
                        Case "P" : valore = DB_Dsv(Dr.Item("qta_pz"), 0)
                        Case "K" : valore = DB_Dsv(Dr.Item("qta_pe"), 0)
                    End Select
                    valore = Math.Round(valore, 3)
                End If

                DB_DataReaderClose(Dr, Cmd)

            Case "scarichi_prec"

                ' giorno prima
                If IsDate(Getv(da_data_pian)) Then
                    data1 = DateAdd(DateInterval.Day, -1, CDate(Getv(da_data_pian)))
                Else
                    data1 = DateAdd(DateInterval.Day, -1, Now)
                End If
                ' anno prima
                data0 = DateAdd(DateInterval.Year, -1, data1)

                sql = ""
                sql = sql & "SELECT SUM(movmag.qta_co) AS qta_co, " & vbCrLf
                sql = sql & "       SUM(movmag.qta_cf) AS qta_cf, " & vbCrLf
                sql = sql & "       SUM(movmag.qta_pz) AS qta_pz, " & vbCrLf
                sql = sql & "       SUM(movmag.qta_pe) AS qta_pe  " & vbCrLf
                sql = sql & "  FROM movmag, causmag " & vbCrLf
                sql = sql & " WHERE movmag.cod_causmag = causmag.cod_causmag " & vbCrLf
                sql = sql & "   AND causmag.effetto_esistenza = '-' " & vbCrLf
                sql = sql & "   AND movmag.cod_art = '" & cod_art & "' " & vbCrLf
                sql = sql & "   AND movmag.data_mov >= '" & Format(data0, "dd/MM/yyyy") & "' " & vbCrLf
                sql = sql & "   AND movmag.data_mov <= '" & Format(data1, "dd/MM/yyyy") & "' " & vbCrLf
                If Trim(sql_deposito_magazzino) <> "" Then
                    sql = sql & "   AND  " & sql_deposito_magazzino & vbCrLf
                End If
                sql = sql & " GROUP BY causmag.effetto_esistenza " & vbCrLf

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    Select Case tipo_um
                        Case "L" : valore = DB_Dsv(Dr.Item("qta_co"), 0)
                        Case "C" : valore = DB_Dsv(Dr.Item("qta_cf"), 0)
                        Case "P" : valore = DB_Dsv(Dr.Item("qta_pz"), 0)
                        Case "K" : valore = DB_Dsv(Dr.Item("qta_pe"), 0)
                    End Select
                    valore = Math.Round(valore, 3)
                End If

                DB_DataReaderClose(Dr, Cmd)

            Case "giacenza_att"

                valore = Math.Round(Leggi_Giacenza("ATT", False, Tipo_Art_Prod_Testata, da_data_pian, cod_art, sql_deposito_magazzino, azienda_agg.flag_calcolo_impr), 3)

            Case "qta_vend_sett"

                If azienda_agg.pp_sett_vendmed = 0 Then azienda_agg.pp_sett_vendmed = 52

                data1 = CDate(Getv(da_data_pian))
                data1 = DateAdd(DateInterval.Day, -1, data1)
                data0 = DateAdd(DateInterval.Day, azienda_agg.pp_sett_vendmed * -7, data1)

                sql_colqta = "NVL(t1.stat_agg_qta, t2.stat_agg_qta) "
                sql_colonn = "NVL(t1.stat_agg_colonna, t2.stat_agg_colonna) "

                sql_qta = ""
                sql_qta = sql_qta & " CASE WHEN " & sql_colqta & " = '1' AND " & sql_colonn & " = '1' THEN ordspedet.qta_in_sped *  1 " & vbCrLf
                sql_qta = sql_qta & "      WHEN " & sql_colqta & " = '2' AND " & sql_colonn & " = '1' THEN ordspedet.qta_in_sped * -1 " & vbCrLf
                sql_qta = sql_qta & "      WHEN " & sql_colqta & " = '1' AND " & sql_colonn & " = '2' THEN ordspedet.qta_in_sped * -1 " & vbCrLf
                sql_qta = sql_qta & "      WHEN " & sql_colqta & " = '2' AND " & sql_colonn & " = '2' THEN ordspedet.qta_in_sped *  1 ELSE 0 END " & vbCrLf

                sql = ""
                sql = sql & "SELECT SUM(" & sql_qta & ") AS qta_um " & vbCrLf
                sql = sql & "  FROM ordspedet, " & vbCrLf
                sql = sql & "       ordspe, " & vbCrLf
                sql = sql & "       OUTER(tipidocfisc AS t1, tipidocfisc AS t2) " & vbCrLf
                sql = sql & " WHERE ordspedet.cod_art = '" & cod_art & "' " & vbCrLf
                sql = sql & "   AND NVL(ordspedet.data_sped, ordspe.data_reg) >= '" & Format(data0, "dd/MM/yyyy") & "'" & vbCrLf
                sql = sql & "   AND NVL(ordspedet.data_sped, ordspe.data_reg) <= '" & Format(data1, "dd/MM/yyyy") & "'" & vbCrLf
                sql = sql & "   AND ordspe.anno_reg  = ordspedet.anno_reg " & vbCrLf
                sql = sql & "   AND ordspe.nr_reg = ordspedet.nr_reg " & vbCrLf
                sql = sql & "   AND ordspe.tipo_doc_fisc_diff = t1.tipo_doc_fisc " & vbCrLf
                sql = sql & "   AND t1.tipo_doc_fisc_diff = t2.tipo_doc_fisc " & vbCrLf

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    valore = DB_Dsv(Dr.Item("qta_um"), 0) / azienda_agg.pp_sett_vendmed
                    valore = Math.Round(valore, 0)
                End If

                DB_DataReaderClose(Dr, Cmd)

            Case "qta_prom_sett"

                If azienda_agg.pp_sett_vendmed = 0 Then azienda_agg.pp_sett_vendmed = 52

                data1 = CDate(Getv(da_data_pian))
                data1 = DateAdd(DateInterval.Day, -1, data1)
                data0 = DateAdd(DateInterval.Day, azienda_agg.pp_sett_vendmed * -7, data1)

                sql_colqta = "NVL(t1.stat_agg_qta, t2.stat_agg_qta) "
                sql_colonn = "NVL(t1.stat_agg_colonna, t2.stat_agg_colonna) "

                sql_qta = ""
                sql_qta = sql_qta & " CASE WHEN " & sql_colqta & " = '1' AND " & sql_colonn & " = '1' THEN ordspedet.qta_in_sped *  1 " & vbCrLf
                sql_qta = sql_qta & "      WHEN " & sql_colqta & " = '2' AND " & sql_colonn & " = '1' THEN ordspedet.qta_in_sped * -1 " & vbCrLf
                sql_qta = sql_qta & "      WHEN " & sql_colqta & " = '1' AND " & sql_colonn & " = '2' THEN ordspedet.qta_in_sped * -1 " & vbCrLf
                sql_qta = sql_qta & "      WHEN " & sql_colqta & " = '2' AND " & sql_colonn & " = '2' THEN ordspedet.qta_in_sped *  1 ELSE 0 END " & vbCrLf

                sql = ""
                sql = sql & "SELECT SUM(" & sql_qta & ") AS qta_um " & vbCrLf
                sql = sql & "  FROM ordspedet, " & vbCrLf
                sql = sql & "       ordspe, " & vbCrLf
                sql = sql & "       OUTER(tipidocfisc AS t1, tipidocfisc AS t2) " & vbCrLf
                sql = sql & " WHERE ordspedet.cod_art = '" & cod_art & "' " & vbCrLf
                sql = sql & "   AND NVL(ordspedet.data_sped, ordspe.data_reg) >= '" & Format(data0, "dd/MM/yyyy") & "'" & vbCrLf
                sql = sql & "   AND NVL(ordspedet.data_sped, ordspe.data_reg) <= '" & Format(data1, "dd/MM/yyyy") & "'" & vbCrLf
                sql = sql & "   AND ordspe.anno_reg  = ordspedet.anno_reg " & vbCrLf
                sql = sql & "   AND ordspe.nr_reg = ordspedet.nr_reg " & vbCrLf
                sql = sql & "   AND ordspe.tipo_doc_fisc_diff = t1.tipo_doc_fisc " & vbCrLf
                sql = sql & "   AND t1.tipo_doc_fisc_diff = t2.tipo_doc_fisc " & vbCrLf
                sql = sql & "   AND ((ordspedet.cod_prom is not null AND ordspedet.sco_promozione >0) OR (ordspedet.cod_prom is not null AND ordspedet.omaggio IS NOT NULL)) " & vbCrLf


                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    valore = DB_Dsv(Dr.Item("qta_um"), 0) / azienda_agg.pp_sett_vendmed
                    valore = Math.Round(valore, 0)
                End If

                DB_DataReaderClose(Dr, Cmd)

            Case "impe_ord_cli"

                sql = ""
                sql = sql & "SELECT SUM(NVL(impegnato_ord_cli,0)) impegnato_ord_cli  " & vbCrLf ' 01/06/2018
                sql = sql & "  FROM giace " & vbCrLf
                sql = sql & " WHERE cod_art = '" & cod_art & "' " & vbCrLf
                If Trim(sql_deposito_magazzino) <> "" Then
                    sql = sql & "   AND  " & Replace(sql_deposito_magazzino, "movmag.", "giace.") & vbCrLf
                End If

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    valore = DB_Dsv(Dr.Item("impegnato_ord_cli"), 0)
                    valore = Math.Round(valore, 3)
                End If

                DB_DataReaderClose(Dr, Cmd)

            Case "flag_esi_prom"

                data0 = CDate(Getv(da_data_pian))
                data1 = CDate(Getv(a_data_pian))

                sql = ""
                sql = sql & "SELECT COUNT(*) AS cnt " & vbCrLf
                sql = sql & "  FROM promocli, promodet " & vbCrLf
                sql = sql & " WHERE promocli.cod_prom = promodet.cod_prom " & vbCrLf
                sql = sql & "   AND promodet.cod_art = '" & cod_art & "' " & vbCrLf
                sql = sql & "   AND((promocli.da_data  BETWEEN '" & Format(data0, "dd/MM/yyyy") & "' AND '" & Format(data1, "dd/MM/yyyy") & "') " & vbCrLf
                sql = sql & "    OR (promocli.a_data   BETWEEN '" & Format(data0, "dd/MM/yyyy") & "' AND '" & Format(data1, "dd/MM/yyyy") & "') " & vbCrLf
                sql = sql & "    OR ('" & Format(data0, "dd/MM/yyyy") & "' BETWEEN promocli.da_data AND promocli.a_data )  " & vbCrLf
                sql = sql & "    OR ('" & Format(data1, "dd/MM/yyyy") & "' BETWEEN promocli.da_data AND promocli.a_data )      " & vbCrLf
                sql = sql & "      ) " & vbCrLf

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                If Dr.Read Then
                    If DB_Dsv(Dr.Item("cnt"), 0) <> 0 Then
                        str_valore = "S"
                    End If
                End If

                DB_DataReaderClose(Dr, Cmd)

            Case "query1", "query2", "query3", "query4", "query5", "query6", "query7", "query8", "query9", "query10", "query11", "query12", "query13", "query14", "query15", "query16", "query17", "query18", "query19", "query20"

                ' compone il testo della query

                sql = ""
                sql = sql & "SELECT cod_mod, tipo_art_prod, ragg_prod, nome_campo, nr_riga, testo_campo, testo_vis "
                sql = sql & "  FROM pp_modelli_artdet " & vbCrLf
                sql = sql & " WHERE cod_mod = '" & pp_modelli_art.cod_mod & "' " & vbCrLf
                sql = sql & "   AND tipo_art_prod = '" & pp_modelli_art.tipo_art_prod & "' " & vbCrLf
                sql = sql & "   AND ragg_prod = '" & pp_modelli_art.ragg_prod & "' " & vbCrLf
                sql = sql & "   AND nome_campo = '" & nome_campo & "' " & vbCrLf
                sql = sql & " ORDER BY nr_riga " & vbCrLf

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                sql = ""

                While Dr.Read
                    sql = sql & Replace(RTrim(DB_Dsv(Dr("testo_campo"), "")), "§", vbCrLf)
                End While

                DB_DataReaderClose(Dr, Cmd)

                ' esegue la query appena composta

                If Trim(Replace(sql, vbCrLf, "")) <> "" Then

                    ' controlla nel caso l'utente abbia inserito le parole chiave tra gli apici oppure in minuscolo

                    sql = Replace(sql, "'<cod_art>'", "§cod_art§")
                    sql = Replace(sql, "<cod_art>", "§cod_art§")
                    sql = Replace(sql, "'<da_data_pian>'", "§da_data_pian§")
                    sql = Replace(sql, "<da_data_pian>", "§da_data_pian§")
                    sql = Replace(sql, "'<a_data_pian>'", "§a_data_pian§")
                    sql = Replace(sql, "<a_data_pian>", "§a_data_pian§")
                    sql = Replace(sql, "'<cod_dep>'", "§cod_dep§")
                    sql = Replace(sql, "<cod_dep>", "§cod_dep§")
                    sql = Replace(sql, "'<COD_ART>'", "§cod_art§")
                    sql = Replace(sql, "<COD_ART>", "§cod_art§")
                    sql = Replace(sql, "'<DA_DATA_PIAN>'", "§da_data_pian§")
                    sql = Replace(sql, "<DA_DATA_PIAN>", "§da_data_pian§")
                    sql = Replace(sql, "'<A_DATA_PIAN>'", "§a_data_pian§")
                    sql = Replace(sql, "<A_DATA_PIAN>", "§a_data_pian§")
                    sql = Replace(sql, "'<COD_DEP>'", "§cod_dep§")
                    sql = Replace(sql, "<COD_DEP>", "§cod_dep§")


                    ' sostituisce le parole chiave con i codici effettivi 

                    sql = Replace(sql, "§cod_art§", "'" & cod_art & "'")
                    sql = Replace(sql, "§da_data_pian§", "DATE('" & Getv(da_data_pian) & "')")
                    sql = Replace(sql, "§a_data_pian§", "DATE('" & Getv(a_data_pian) & "')")
                    sql = Replace(sql, "§cod_dep§", "'" & Getv(cod_dep) & "'")

                    Cmd = DB_CommandCreate(sql)
                    DB_DataReaderExecute(Dr, Cmd)

                    If Dr.Read Then

                        Select Case tipo_campo
                            Case "float"
                                valore = DB_Dsv(Dr.Item(0), 0)
                                valore = Math.Round(valore, 3)
                            Case "string"
                                str_valore = RTrim(DB_Dsv(Dr.Item(0), ""))
                        End Select
                    End If

                    DB_DataReaderClose(Dr, Cmd)

                End If

        End Select

        Select Case tipo_campo
            Case "float"
                leggi_valore_pp_modelli_artdet = valore.ToString
            Case "string"
                leggi_valore_pp_modelli_artdet = str_valore
        End Select

    End Function

    Private Function leggi_formula_pp_modelli_artdet(nome_campo As String) As String

        Dim Dr As DB2DataReader = Nothing
        Dim Cmd As DB2Command = Nothing
        Dim sql As String = ""
        Dim formula As String = ""

        leggi_formula_pp_modelli_artdet = ""

        Select Case nome_campo

            Case "formula1", "formula2", "formula3", "formula4", "formula5", "formula6", "formula7", "formula8", "formula9", "formula10"

                ' compone il testo della formula

                sql = ""
                sql = sql & "SELECT cod_mod, tipo_art_prod, ragg_prod, nome_campo, nr_riga, testo_campo "
                sql = sql & "  FROM pp_modelli_artdet " & vbCrLf
                sql = sql & " WHERE cod_mod = '" & pp_modelli_art.cod_mod & "' " & vbCrLf
                sql = sql & "   AND tipo_art_prod = '" & pp_modelli_art.tipo_art_prod & "' " & vbCrLf
                sql = sql & "   AND ragg_prod = '" & pp_modelli_art.ragg_prod & "' " & vbCrLf
                sql = sql & "   AND nome_campo = '" & nome_campo & "' " & vbCrLf
                sql = sql & " ORDER BY nr_riga " & vbCrLf

                Cmd = DB_CommandCreate(sql)
                DB_DataReaderExecute(Dr, Cmd)

                formula = ""

                While Dr.Read
                    formula = formula & Replace(RTrim(DB_Dsv(Dr("testo_campo"), "")), "§", vbCrLf)
                End While

                DB_DataReaderClose(Dr, Cmd)

        End Select

        leggi_formula_pp_modelli_artdet = formula

    End Function

    Private Sub imposta_lab_pp_giacepar()

        Dim max_data_calc As String = ""
        Dim max_ora_calc As String = ""

        If azienda_agg.flag_pp_giacepar = "S" Then
            DB_LookUp("MAX(data_calc), MAX(ora_calc)", "pp_giacepar", , max_data_calc, max_ora_calc)
            If Trim(max_data_calc) <> "" Then
                lab_pp_giacepar.Text = "Ultimo Ricalcolo: " & max_data_calc & "  " & Mid(max_ora_calc, 1, 5)
            Else
                lab_pp_giacepar.Text = "Ultimo Ricalcolo: (nessuno)"
            End If
        Else
            lab_pp_giacepar.Text = ""
        End If

    End Sub

    Private Sub cmd_pp_giacepar_Click(sender As System.Object, e As System.EventArgs) Handles cmd_pp_giacepar.Click

        Dim sql As String = ""
        Dim Db_Conn_Crea As DB2Connection = Nothing
        Dim DB_Transaction_Crea As DB2Transaction = Nothing
        Dim data_calc As String = Format(Now, "dd/MM/yyyy")
        Dim ora_calc As String = Format(Now, "HH:mm:ss")

        Try

            If XtraMessageBox.Show("Ricalcolo Giacenze Articoli al " & data_calc & ", ore " & Mid(ora_calc, 1, 5) & "." & vbCrLf & vbCrLf & "Procedere?", Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.No Then
                Mouse_Default()
                Exit Sub
            End If

            Mouse_HourGlass()

            WaitForm_Show(Me, SplashScreenManager2, "Ricalcolo giacenze in corso...")

            Db_Conn_Crea = New DB2Connection(DB_ConnectionString_NET)
            Db_Conn_Crea.Open()

            DB_BeginTrans(Db_Conn_Crea, DB_Transaction_Crea)

            ' 1) cancella i dati esistenti

            DB_SqlExecute("DELETE FROM pp_giacepar", Db_Conn_Crea, DB_Transaction_Crea)
            DB_SqlExecute("DELETE FROM pp_ordpartdet", Db_Conn_Crea, DB_Transaction_Crea)

            ' 2) inserisce i nuovi dati

            sql = ""
            sql = sql & "INSERT INTO pp_giacepar  " & vbCrLf
            sql = sql & "      (cod_dep         , " & vbCrLf
            sql = sql & "       cod_mag         , " & vbCrLf
            sql = sql & "       cod_art         , " & vbCrLf
            sql = sql & "       anno_partita    , " & vbCrLf
            sql = sql & "       nr_partita      , " & vbCrLf
            sql = sql & "       data_calc       , " & vbCrLf
            sql = sql & "       ora_calc        , " & vbCrLf
            sql = sql & "       esistenza_att_co, " & vbCrLf
            sql = sql & "       esistenza_att_cf, " & vbCrLf
            sql = sql & "       esistenza_att_pz, " & vbCrLf
            sql = sql & "       esistenza_att_pe) " & vbCrLf
            sql = sql & "SELECT movmag.cod_dep, " & vbCrLf
            sql = sql & "       movmag.cod_mag, " & vbCrLf
            sql = sql & "       movmag.cod_art, " & vbCrLf
            sql = sql & "       NVL(movmag.anno_partita,0) AS anno_partita, " & vbCrLf
            sql = sql & "       NVL(movmag.nr_partita,0)   AS nr_partita  , " & vbCrLf
            sql = sql & "       '" & data_calc & "', " & vbCrLf
            sql = sql & "       '" & ora_calc & "' , " & vbCrLf
            sql = sql & "       SUM(movmag.qta_co * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0)) AS esistenza_att_co, " & vbCrLf
            sql = sql & "       SUM(movmag.qta_cf * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0)) AS esistenza_att_cf, " & vbCrLf
            sql = sql & "       SUM(movmag.qta_pz * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0)) AS esistenza_att_pz, " & vbCrLf
            sql = sql & "       SUM(movmag.qta_pe * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0)) AS esistenza_att_pe " & vbCrLf
            sql = sql & "  FROM movmag, " & vbCrLf
            sql = sql & "       causmag, " & vbCrLf
            sql = sql & "       anaart, " & vbCrLf
            sql = sql & "       pp_tabtipiart " & vbCrLf
            sql = sql & " WHERE movmag.cod_causmag = causmag.cod_causmag " & vbCrLf
            sql = sql & "   AND movmag.cod_art = anaart.cod_art " & vbCrLf
            sql = sql & "   AND NVL(anaart.flag_bloccato,'') <> 'S' " & vbCrLf
            sql = sql & "   AND anaart.tipo_art_prod = pp_tabtipiart.tipo_art_prod " & vbCrLf
            sql = sql & "   AND pp_tabtipiart.flag_sel = 'S' " & vbCrLf
            sql = sql & "   AND movmag.data_mov <= '" & data_calc & "' " & vbCrLf
            sql = sql & " GROUP BY 1,2,3,4,5,6,7 " & vbCrLf
            sql = sql & "HAVING(ABS(SUM(movmag.qta_co * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0))) >= 0.001  " & vbCrLf
            sql = sql & "    OR ABS(SUM(movmag.qta_cf * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0))) >= 0.001  " & vbCrLf
            sql = sql & "    OR ABS(SUM(movmag.qta_pz * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0))) >= 0.001  " & vbCrLf
            sql = sql & "    OR ABS(SUM(movmag.qta_pe * DECODE(NVL(causmag.effetto_esistenza,''),'+',1,'-',-1,0))) >= 0.001) " & vbCrLf

            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' 3) va tolto l'impegnato negli ordini clienti

            sql = ""
            sql = sql & "UPDATE pp_giacepar " & vbCrLf
            sql = sql & "   SET esistenza_att_co = NVL(esistenza_att_co, 0) - NVL((SELECT SUM(ordpartdet.qta_co) " & vbCrLf
            sql = sql & "                                                            FROM ordpartdet, ordclidet " & vbCrLf
            sql = sql & "                                                           WHERE ordpartdet.anno_ord     = ordclidet.anno_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_ord       = ordclidet.nr_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_riga      = ordclidet.nr_riga_ord " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_dep       = pp_giacepar.cod_dep " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_mag       = pp_giacepar.cod_mag " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.anno_partita = pp_giacepar.anno_partita " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_partita   = pp_giacepar.nr_partita " & vbCrLf
            sql = sql & "                                                          ), 0) " & vbCrLf
            sql = sql & "      ,esistenza_att_cf = NVL(esistenza_att_cf, 0) - NVL((SELECT SUM(ordpartdet.qta_cf) " & vbCrLf
            sql = sql & "                                                            FROM ordpartdet, ordclidet " & vbCrLf
            sql = sql & "                                                           WHERE ordpartdet.anno_ord     = ordclidet.anno_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_ord       = ordclidet.nr_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_riga      = ordclidet.nr_riga_ord " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_dep       = pp_giacepar.cod_dep " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_mag       = pp_giacepar.cod_mag " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.anno_partita = pp_giacepar.anno_partita " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_partita   = pp_giacepar.nr_partita " & vbCrLf
            sql = sql & "                                                          ), 0) " & vbCrLf
            sql = sql & "      ,esistenza_att_pz = NVL(esistenza_att_pz, 0) - NVL((SELECT SUM(ordpartdet.qta_pz) " & vbCrLf
            sql = sql & "                                                            FROM ordpartdet, ordclidet " & vbCrLf
            sql = sql & "                                                           WHERE ordpartdet.anno_ord     = ordclidet.anno_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_ord       = ordclidet.nr_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_riga      = ordclidet.nr_riga_ord " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_dep       = pp_giacepar.cod_dep " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_mag       = pp_giacepar.cod_mag " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.anno_partita = pp_giacepar.anno_partita " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_partita   = pp_giacepar.nr_partita " & vbCrLf
            sql = sql & "                                                          ), 0) " & vbCrLf
            sql = sql & "      ,esistenza_att_pe = NVL(esistenza_att_pe, 0) - NVL((SELECT SUM(ordpartdet.qta_pe) " & vbCrLf
            sql = sql & "                                                            FROM ordpartdet, ordclidet " & vbCrLf
            sql = sql & "                                                           WHERE ordpartdet.anno_ord     = ordclidet.anno_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_ord       = ordclidet.nr_ord " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_riga      = ordclidet.nr_riga_ord " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_dep       = pp_giacepar.cod_dep " & vbCrLf
            sql = sql & "                                                             AND ordclidet.cod_mag       = pp_giacepar.cod_mag " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.anno_partita = pp_giacepar.anno_partita " & vbCrLf
            sql = sql & "                                                             AND ordpartdet.nr_partita   = pp_giacepar.nr_partita " & vbCrLf
            sql = sql & "                                                          ), 0) " & vbCrLf

            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' 4) toglie le righe comletamente senza giacenza

            sql = ""
            sql = sql & "DELETE FROM pp_giacepar " & vbCrLf
            sql = sql & " WHERE(ABS(ROUND(esistenza_att_co, 3)) < 0.001 " & vbCrLf
            sql = sql & "   AND ABS(ROUND(esistenza_att_cf, 3)) < 0.001 " & vbCrLf
            sql = sql & "   AND ABS(ROUND(esistenza_att_pz, 3)) < 0.001 " & vbCrLf
            sql = sql & "   AND ABS(ROUND(esistenza_att_pe, 3)) < 0.001) " & vbCrLf

            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' 5) memorizza gli impegnati in una seconda tabella 

            sql = ""
            sql = sql & "INSERT INTO pp_ordpartdet        " & vbCrLf
            sql = sql & "      (anno_ord                , " & vbCrLf
            sql = sql & "       nr_ord                  , " & vbCrLf
            sql = sql & "       nr_riga                 , " & vbCrLf
            sql = sql & "       anno_partita            , " & vbCrLf
            sql = sql & "       nr_partita              , " & vbCrLf
            sql = sql & "       qta_co                  , " & vbCrLf
            sql = sql & "       qta_cf                  , " & vbCrLf
            sql = sql & "       qta_pz                  , " & vbCrLf
            sql = sql & "       qta_pe                  , " & vbCrLf
            sql = sql & "       data_calc               , " & vbCrLf
            sql = sql & "       ora_calc                ) " & vbCrLf
            sql = sql & "SELECT ordpartdet.anno_ord     , " & vbCrLf
            sql = sql & "       ordpartdet.nr_ord       , " & vbCrLf
            sql = sql & "       ordpartdet.nr_riga      , " & vbCrLf
            sql = sql & "       ordpartdet.anno_partita , " & vbCrLf
            sql = sql & "       ordpartdet.nr_partita   , " & vbCrLf
            sql = sql & "       ordpartdet.qta_co       , " & vbCrLf
            sql = sql & "       ordpartdet.qta_cf       , " & vbCrLf
            sql = sql & "       ordpartdet.qta_pz       , " & vbCrLf
            sql = sql & "       ordpartdet.qta_pe       , " & vbCrLf
            sql = sql & "       '" & data_calc & "'     , " & vbCrLf
            sql = sql & "       '" & ora_calc & "'        " & vbCrLf
            sql = sql & "  FROM ordpartdet, ordclidet, ordcli " & vbCrLf
            sql = sql & " WHERE ordpartdet.anno_ord    = ordclidet.anno_ord " & vbCrLf
            sql = sql & "   AND ordpartdet.nr_ord      = ordclidet.nr_ord " & vbCrLf
            sql = sql & "   AND ordpartdet.nr_riga     = ordclidet.nr_riga_ord " & vbCrLf
            sql = sql & "   AND ordclidet.anno_ord     = ordcli.anno_ord " & vbCrLf
            sql = sql & "   AND ordclidet.nr_ord       = ordcli.nr_ord " & vbCrLf


            DB_SqlExecute(sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' 6) aggiorna le statistiche

            DB_SqlExecute("UPDATE STATISTICS FOR TABLE pp_giacepar", Db_Conn_Crea, DB_Transaction_Crea)
            DB_SqlExecute("UPDATE STATISTICS FOR TABLE pp_ordpartdet", Db_Conn_Crea, DB_Transaction_Crea)

            ' 7) fine procedura

            DB_CommitTrans(DB_Transaction_Crea)

            imposta_lab_pp_giacepar()

            WaitForm_Close(Me, SplashScreenManager2)

            Mouse_Default()

            cmd_leggi.PerformClick()

            XtraMessageBox.Show("Ricalcolo effettuato.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)

        Catch ex As Exception

            DB_RollbackTrans(DB_Transaction_Crea)

            WaitForm_Close(Me, SplashScreenManager2)

            Mouse_Default()

            MsgErr(ex)

        End Try

    End Sub

    Private Sub gridview_artmag_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles gridview_artmag.RowCellStyle

        row_cell_style_artmag(sender, e)

    End Sub

    Private Sub gridview_exp_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles gridview_exp_artmag.RowCellStyle

        row_cell_style_artmag(sender, e)

    End Sub


    Private Sub row_cell_style_artmag(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs)

        Dim sql As String
        Dim MyColor As Color
        Dim colora_cella As Boolean
        Dim idx_con As Integer
        Dim str_con As String
        Dim str_val As String
        Dim dbl_val As Double
        Dim valore As Double
        Dim RowArray() As DataRow = Nothing

        ' \\\\ campi esclusi dal controllo sul colore della cella (+ veloce)

        sql = ""
        sql = sql & ",data_spedizione_ordcli,cod_art,des_art,cod_um,ragg_prod,cod_linea_prod_pre"
        sql = sql & ",cod_campo1_ord,cod_campo2_ord,cod_campo3_ord,cod_campo4_ord,cod_campo5_ord"
        sql = sql & ",des_campo1_ord,des_campo2_ord,des_campo3_ord,des_campo4_ord,des_campo5_ord"
        sql = sql & ",sel,tipo_um,qta_co,qta_cf,qta_pz,qta_pe,qta_um,cod_ass_prod_pre,"

        If InStr(sql, "," & Trim(e.Column.FieldName) & ",") > 0 Then
            Exit Sub
        End If

        ' ////

        RowArray = dt_colonne_pp_modelli_art.Select("scrivi_campo = 'S'")

        For i_r = 0 To RowArray.GetUpperBound(0)

            If RowArray(i_r)("nome_campo") = e.Column.FieldName Then

                If Trim(DB_Dsv(RowArray(i_r)("col_campo"), "")) <> "" Then

                    colora_cella = True

                    If IsNumeric(e.CellValue) Then
                        valore = CDbl(e.CellValue)
                    Else
                        valore = 0
                    End If

                    ' CONDIZIONE + COLORE: controlla se la cella deve essere colorata solo a certe condizioni inserite nel modello (es: valore > 100, valore < 0, ...)

                    str_con = Trim(DB_Dsv(RowArray(i_r)("con_campo"), ""))

                    If RowArray(i_r)("tip_campo") = "float" And str_con <> "" Then

                        colora_cella = False

                        idx_con = 0
                        str_val = ""

                        If InStr(str_con, ">=") > 0 Then
                            idx_con = 1
                            str_val = Replace(str_con, ">=", "")
                        ElseIf InStr(str_con, "<=") > 0 Then
                            idx_con = 2
                            str_val = Replace(str_con, "<=", "")
                        ElseIf InStr(str_con, ">") > 0 Then
                            idx_con = 3
                            str_val = Replace(str_con, ">", "")
                        ElseIf InStr(str_con, "<") > 0 Then
                            idx_con = 4
                            str_val = Replace(str_con, "<", "")
                        ElseIf InStr(str_con, "=") > 0 Then
                            idx_con = 5
                            str_val = Replace(str_con, "=", "")
                        End If

                        If IsNumeric(str_val) Then
                            dbl_val = CDbl(str_val)
                            Select Case idx_con
                                Case 1 : If valore >= dbl_val Then colora_cella = True
                                Case 2 : If valore <= dbl_val Then colora_cella = True
                                Case 3 : If valore > dbl_val Then colora_cella = True
                                Case 4 : If valore < dbl_val Then colora_cella = True
                                Case 5 : If Math.Round(valore, 3) = Math.Round(dbl_val, 3) Then colora_cella = True
                            End Select
                        End If

                    End If

                    If colora_cella = True Then
                        MyColor = ColorTranslator.FromWin32(DB_Dsv(RowArray(i_r)("col_campo"), 0))
                        e.Appearance.BackColor = MyColor
                        e.Appearance.ForeColor = SystemColors.WindowText
                    End If

                End If

                Exit For

            End If

        Next

    End Sub

    Private Sub cmd_excel0_Click(sender As System.Object, e As System.EventArgs) Handles cmd_excel0.Click

        Dim save As New SaveFileDialog
        Dim optXlsx As New DevExpress.XtraPrinting.XlsxExportOptions()
        Dim optXls As New DevExpress.XtraPrinting.XlsExportOptions()
        Dim grid_exp As New GridControl
        Dim dt_exp As DataTable

        If Not Timer_Refresh_Ordini Is Nothing Then

            Timer_Refresh_Ordini.Stop()

        End If

        grid_exp.ViewCollection.Add(gridview_exp_pianiprod_det)
        grid_exp.MainView = gridview_exp_pianiprod_det
        grid_exp.BindingContext = New BindingContext

        gridview_exp_pianiprod_det.OptionsBehavior.Editable = False
        gridview_exp_pianiprod_det.OptionsCustomization.AllowFilter = False
        gridview_exp_pianiprod_det.OptionsCustomization.AllowSort = False
        gridview_exp_pianiprod_det.OptionsNavigation.UseTabKey = False
        gridview_exp_pianiprod_det.OptionsSelection.EnableAppearanceFocusedCell = False
        gridview_exp_pianiprod_det.OptionsView.ShowGroupPanel = False
        gridview_exp_pianiprod_det.OptionsView.ColumnAutoWidth = True

        If grid_pianiprod_det_view.DataSource Is Nothing Then
            Exit Sub
        End If

        dt_exp = grid_pianiprod_det.DataSource
        grid_exp.DataSource = grid_pianiprod_det_view.DataSource

        gridview_exp_pianiprod_det.PopulateColumns()
        grid_exp.ForceInitialize()

        For Each col As GridColumn In grid_pianiprod_det_view.Columns
            If Not gridview_exp_pianiprod_det.Columns(col.FieldName) Is Nothing Then
                gridview_exp_pianiprod_det.Columns(col.FieldName).Caption = col.Caption.Replace(vbCrLf, " ")
                gridview_exp_pianiprod_det.Columns(col.FieldName).Visible = col.Visible
                gridview_exp_pianiprod_det.Columns(col.FieldName).VisibleIndex = col.VisibleIndex
                gridview_exp_pianiprod_det.Columns(col.FieldName).Fixed = col.Fixed
                gridview_exp_pianiprod_det.Columns(col.FieldName).DisplayFormat.FormatType = col.DisplayFormat.FormatType
                gridview_exp_pianiprod_det.Columns(col.FieldName).DisplayFormat.FormatString = col.DisplayFormat.FormatString
                gridview_exp_pianiprod_det.Columns(col.FieldName).SortIndex = col.SortIndex
                gridview_exp_pianiprod_det.Columns(col.FieldName).SortMode = col.SortMode
                gridview_exp_pianiprod_det.Columns(col.FieldName).SortOrder = col.SortOrder

                If dt_exp.Columns(col.FieldName).DataType = GetType(Boolean) Then
                    gridview_exp_pianiprod_det.Columns(col.FieldName).MinWidth = 75
                End If

            End If
        Next

        gridview_exp_pianiprod_det.OptionsView.ColumnAutoWidth = False
        gridview_exp_pianiprod_det.OptionsView.RowAutoHeight = True
        gridview_exp_pianiprod_det.OptionsPrint.AutoWidth = False
        gridview_exp_pianiprod_det.BestFitColumns()

        save.InitialDirectory = My.Computer.FileSystem.SpecialDirectories.MyDocuments
        save.Filter = "Foglio Excel" & " (*.xlsx)|*.xlsx|" & "Foglio Excel" & " (97-2003) (*.xls)|*.xls"

        If save.ShowDialog() = Windows.Forms.DialogResult.OK Then

            Try

                If save.FileName.Substring(save.FileName.Length - 1, 1).ToUpper = "X" Then
                    optXlsx.ShowGridLines = True
                    optXlsx.TextExportMode = DevExpress.XtraPrinting.TextExportMode.Value

                    grid_exp.ExportToXlsx(save.FileName, optXlsx)
                Else
                    optXls.ShowGridLines = True
                    optXls.TextExportMode = DevExpress.XtraPrinting.TextExportMode.Value
                    ' dà msg warning 
                    'grid_exp.ExportToXls(save.FileName, True)
                    grid_exp.ExportToXls(save.FileName, optXls)
                    '

                End If

                If File.Exists(save.FileName) Then
                    If XtraMessageBox.Show("Esportazione eseguita con successo. Aprire il file?", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
                        Doc_Start(save.FileName)
                    End If
                End If

            Catch ex As Exception
                MsgErr(ex)
            End Try

        End If

        If Not Timer_Refresh_Ordini Is Nothing Then

            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End If

    End Sub

    Private Sub cmd_excel2_Click(sender As System.Object, e As System.EventArgs) Handles cmd_excel2.Click

        Dim save As New SaveFileDialog
        Dim optXlsx As New DevExpress.XtraPrinting.XlsxExportOptions()
        Dim optXls As New DevExpress.XtraPrinting.XlsExportOptions()
        Dim grid_exp As New GridControl
        Dim dt_exp As DataTable

        grid_exp.ViewCollection.Add(gridview_exp_artmag)
        grid_exp.MainView = gridview_exp_artmag
        grid_exp.BindingContext = New BindingContext

        gridview_exp_artmag.OptionsBehavior.Editable = False
        gridview_exp_artmag.OptionsCustomization.AllowFilter = False
        gridview_exp_artmag.OptionsCustomization.AllowSort = False
        gridview_exp_artmag.OptionsNavigation.UseTabKey = False
        gridview_exp_artmag.OptionsSelection.EnableAppearanceFocusedCell = False
        gridview_exp_artmag.OptionsView.ShowGroupPanel = False
        gridview_exp_artmag.OptionsView.ColumnAutoWidth = True
        gridview_exp_artmag.AppearancePrint.HeaderPanel.TextOptions.WordWrap = WordWrap.Wrap
        gridview_exp_artmag.ColumnPanelRowHeight = 30

        If gridview_artmag.DataSource Is Nothing Then
            Exit Sub
        End If

        dt_exp = gridctrl_artmag.DataSource
        grid_exp.DataSource = gridview_artmag.DataSource

        gridview_exp_artmag.PopulateColumns()
        grid_exp.ForceInitialize()

        For Each col As GridColumn In gridview_artmag.Columns
            If Not gridview_exp_artmag.Columns(col.FieldName) Is Nothing Then
                gridview_exp_artmag.Columns(col.FieldName).Caption = col.Caption
                gridview_exp_artmag.Columns(col.FieldName).Visible = col.Visible
                gridview_exp_artmag.Columns(col.FieldName).VisibleIndex = col.VisibleIndex
                gridview_exp_artmag.Columns(col.FieldName).Fixed = col.Fixed
                gridview_exp_artmag.Columns(col.FieldName).DisplayFormat.FormatType = col.DisplayFormat.FormatType
                gridview_exp_artmag.Columns(col.FieldName).DisplayFormat.FormatString = col.DisplayFormat.FormatString
                gridview_exp_artmag.Columns(col.FieldName).SortIndex = col.SortIndex
                gridview_exp_artmag.Columns(col.FieldName).SortMode = col.SortMode
                gridview_exp_artmag.Columns(col.FieldName).SortOrder = col.SortOrder

                If dt_exp.Columns(col.FieldName).DataType = GetType(Boolean) Then
                    gridview_exp_artmag.Columns(col.FieldName).MinWidth = 75
                End If

            End If
        Next

        gridview_exp_artmag.OptionsView.ColumnAutoWidth = False
        gridview_exp_artmag.OptionsView.RowAutoHeight = True
        gridview_exp_artmag.OptionsPrint.AutoWidth = False
        gridview_exp_artmag.BestFitColumns()

        save.InitialDirectory = My.Computer.FileSystem.SpecialDirectories.MyDocuments
        save.Filter = "Foglio Excel" & " (*.xlsx)|*.xlsx|" & "Foglio Excel" & " (97-2003) (*.xls)|*.xls"

        If save.ShowDialog() = Windows.Forms.DialogResult.OK Then

            Try

                If save.FileName.Substring(save.FileName.Length - 1, 1).ToUpper = "X" Then
                    optXlsx.ShowGridLines = True
                    optXlsx.TextExportMode = DevExpress.XtraPrinting.TextExportMode.Value

                    grid_exp.ExportToXlsx(save.FileName, optXlsx)
                Else
                    optXls.ShowGridLines = True
                    optXls.TextExportMode = DevExpress.XtraPrinting.TextExportMode.Value
                    ' dà msg warning 
                    'grid_exp.ExportToXls(save.FileName, True)
                    grid_exp.ExportToXls(save.FileName, optXls)
                    '

                End If

                If File.Exists(save.FileName) Then
                    If XtraMessageBox.Show("Esportazione eseguita con successo. Aprire il file?", My.Application.Info.Title, MessageBoxButtons.YesNo, MessageBoxIcon.Question) = Windows.Forms.DialogResult.Yes Then
                        Doc_Start(save.FileName)
                    End If
                End If

            Catch ex As Exception
                MsgErr(ex)
            End Try

        End If

    End Sub

    Private Sub grid_piano_view_cod_linea_prod_ButtonClick(ByVal sender As System.Object, ByVal e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs) Handles grid_piano_view_cod_linea_prod.ButtonClick
        Dim DtSelectedRowHandle As Integer
        Dim Edit As DevExpress.XtraEditors.ButtonEdit = Nothing
        Dim des_linea_prod As String = ""

        r_tabgen.Tipo_Tab_Filtro = "LPR"

        r_tabgen.ShowDialog(Me)

        If Not Field_Null(r_tabgen.Cod_Tab_Cerca) Then

            DB_LookUp("des_cod", "tabgen", "tipo_tab='LPR' AND cod_tab='" & DB_Getv(r_tabgen.Cod_Tab_Cerca, "") & "'", des_linea_prod)

            If Not Field_Null(des_linea_prod) Then

                Edit = CType(sender, DevExpress.XtraEditors.ButtonEdit)
                Setv(Edit, r_tabgen.Cod_Tab_Cerca)

                DtSelectedRowHandle = grid_piano_view.GetDataSourceRowIndex(grid_piano_view.GetSelectedRows(0))
                dt_piano.Rows(DtSelectedRowHandle).Item(grid_piano_view.FocusedColumn.FieldName) = Getv(r_tabgen.Cod_Tab_Cerca)
                dt_piano.Rows(DtSelectedRowHandle).Item(grid_piano_view.FocusedColumn.FieldName.Replace("cod", "des")) = des_linea_prod

            End If

        End If

        r_tabgen.Dispose()

    End Sub

    Private Sub grid_piano_view_cod_linea_prod_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles grid_piano_view_cod_linea_prod.KeyDown

        If Key_F1(e) Then
            grid_piano_view_cod_linea_prod_ButtonClick(sender, Nothing)
        End If

    End Sub

    Private Sub grid_piano_view_cod_linea_prod_Leave(sender As System.Object, e As System.EventArgs) Handles grid_piano_view_cod_linea_prod.Leave
        Dim DtSelectedRowHandle As Integer
        Dim Edit As DevExpress.XtraEditors.ButtonEdit = Nothing
        Dim cod_linea_prod As String = ""
        Dim des_linea_prod As String = ""

        Edit = CType(sender, DevExpress.XtraEditors.ButtonEdit)
        DtSelectedRowHandle = grid_piano_view.GetDataSourceRowIndex(grid_piano_view.GetSelectedRows(0))
        DB_LookUp("cod_tab,des_cod", "tabgen", "tipo_tab='LPR' AND cod_tab='" & DB_Getv(Edit, "") & "'", cod_linea_prod, des_linea_prod)

        If Not Field_Null(cod_linea_prod) AndAlso Not Field_Null(des_linea_prod) Then

            dt_piano.Rows(DtSelectedRowHandle).Item(grid_piano_view.FocusedColumn.FieldName) = cod_linea_prod
            dt_piano.Rows(DtSelectedRowHandle).Item(grid_piano_view.FocusedColumn.FieldName.Replace("cod", "des")) = des_linea_prod

        Else

            Setv(Edit, "")
            dt_piano.Rows(DtSelectedRowHandle).Item(grid_piano_view.FocusedColumn.FieldName) = ""
            dt_piano.Rows(DtSelectedRowHandle).Item(grid_piano_view.FocusedColumn.FieldName.Replace("cod", "des")) = ""

        End If

        Dim row As DataRow
        Dim col As GridColumn
        Dim qta_um As Double
        Dim qta_co As Double
        Dim qta_cf As Double
        Dim qta_pe As Double
        Dim qta_pz As Double

        Dim qta_pian_art As Double
        Dim qta_pian_oraria As Double

        Dim id As Object = Nothing
        Dim nr_riga As Object = Nothing

        Dim pref_cmp As String

        If Field_Null(Edit.EditValue) And Not Field_Null(Oldv1) Then

            If grid_piano_view.GetFocusedDataSourceRowIndex >= 0 Then

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                col = grid_piano_view.FocusedColumn
                last_column_edit = col

                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                id = DB_Dsv(row(pref_cmp & "id"))

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    'se id nullo significa che sto aggiungendo una nuova pianificazione
                    If Field_Null(id) Then

                        'in pp_pianiprod aggiungo una riga con qta pianificata e impr a zero
                        pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                               DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, Getv(Edit), Getv(cod_dep))

                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    Else

                        pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, DBNull.Value, id, nr_riga, Getv(Edit), Getv(cod_dep))

                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    End If

                    flag_fatte_mod = True

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            End If

        ElseIf (Not Field_Null(Edit.EditValue) And Field_Null(Oldv1)) Or (Object_Val(Edit.EditValue) <> Object_Val(Oldv1)) Then

            If grid_piano_view.GetFocusedDataSourceRowIndex >= 0 Then

                row = dt_piano.Rows(grid_piano_view.GetFocusedDataSourceRowIndex)
                col = grid_piano_view.FocusedColumn
                last_column_edit = col

                pref_cmp = Cerca_Lista_Date_Prefisso(col.Tag)

                id = DB_Dsv(row(pref_cmp & "id"))

                qta_pian_art = DB_Dsv(row(pref_cmp & "qta_pian_data"))
                qta_pian_oraria = DB_Dsv(row(pref_cmp & "qta_pian_ora_data"))
                cod_linea_prod = DB_Dsv(row(pref_cmp & "cod_linea_prod"))

                'If Object_Val(qta_pian_art) < Object_Val(qta_pian_oraria) Then
                '    XtraMessageBox.Show("Impossibile diminuire la quantità in quanto è già stata pianificata nella pianificazione oraria.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Error)
                '    Setv(txt, Oldv1)
                '    Exit Sub
                'End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                If Pianprod_Dr_Sel_Anaart.Read Then

                    Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""),
                                  Math.Round(qta_pian_art, 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                    'se id nullo significa che sto aggiungendo una nuova pianificazione
                    If Field_Null(id) Then

                        pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                               DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))

                        row(pref_cmp & "id") = id
                        row(pref_cmp & "lista_righe_pian") = "|0|"

                    Else

                        pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), CDate(col.Tag), DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                    DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, id, nr_riga, Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), "")), Getv(cod_dep))

                        row(pref_cmp & "lista_righe_pian") = "|0|"


                    End If

                    DB_CommandParametersReset(qdf_upd_pp_pianiprod_det_linea)

                    qdf_upd_pp_pianiprod_det_linea.Parameters.Item("cod_linea_prod_pre").Value = Trim(DB_Dsv(row(pref_cmp & "cod_linea_prod"), ""))
                    qdf_upd_pp_pianiprod_det_linea.Parameters.Item("id_pianiprod").Value = id
                    qdf_upd_pp_pianiprod_det_linea.Parameters.Item("nr_riga_pianiprod").Value = DB_Dsv(nr_riga, 0)
                    If Getv(cod_dep) <> "" Then
                        qdf_upd_pp_pianiprod_det_linea.Parameters.Item("cod_dep").Value = Getv(cod_dep)
                    End If
                    DB_CommandExecute(qdf_upd_pp_pianiprod_det_linea)


                    flag_fatte_mod = True

                End If

                DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            End If

            End If

    End Sub

    Private Sub grid_piano_view_cod_linea_prod_Enter(sender As Object, e As System.EventArgs)

        Oldv1 = TryCast(sender, ButtonEdit).EditValue

        TryCast(sender, ButtonEdit).SelectAll()

    End Sub

    Private Sub gridview_artmag_det_query_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs)
        Dim GridRowHandle As Integer
        Dim DtRowHandle As Integer

        If gridview_artmag.SelectedRowsCount <= 0 Then
            Exit Sub
        End If

        GridRowHandle = gridview_artmag.GetSelectedRows(0)
        DtRowHandle = gridview_artmag.GetDataSourceRowIndex(GridRowHandle)

        Select Case e.Button.Tag

            Case "vis_query"

                f_pp_artmag_vis_query.Cod_Art_In = RTrim(DB_Dsv(dt_artmag.Rows(DtRowHandle).Item("cod_art"), ""))

                f_pp_artmag_vis_query.Nome_Campo_In = ""
                f_pp_artmag_vis_query.Nome_Campo_Vis_In = ""
                For i As Integer = 0 To dt_colonne_pp_modelli_art.Rows.Count - 1

                    If gridview_artmag.FocusedColumn.FieldName = dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo") Then
                        f_pp_artmag_vis_query.Nome_Campo_In = dt_colonne_pp_modelli_art.Rows(i).Item("nome_campo")
                        f_pp_artmag_vis_query.Nome_Campo_Vis_In = gridview_artmag.FocusedColumn.GetTextCaption
                        Exit For
                    End If

                Next

                f_pp_artmag_vis_query.EditMask = EditMask
                f_pp_artmag_vis_query.Cod_Dep_In = Getv(cod_dep)

                If Not Field_Null(f_pp_artmag_vis_query.Nome_Campo_In) Then
                    f_pp_artmag_vis_query.ShowDialog()
                    f_pp_artmag_vis_query.Dispose()
                End If

        End Select

    End Sub

    Private Sub min_auto_refresh_Leave(sender As Object, e As EventArgs) Handles min_artmag_auto_refresh.Leave

        If Not Timer_Refresh_Magazzino Is Nothing Then

            Timer_Refresh_Magazzino.Stop()
            Timer_Refresh_Magazzino.Interval = Getv(min_artmag_auto_refresh) * 60 * 1000

            If Getv(flag_artmag_auto_refresh) = "S" Then
                Timer_Refresh_Magazzino.Start()
            End If

        End If

    End Sub

    Private Sub flag_auto_refresh_CheckedChanged(sender As Object, e As EventArgs) Handles flag_artmag_auto_refresh.CheckedChanged

        If Not Timer_Refresh_Magazzino Is Nothing Then

            Timer_Refresh_Magazzino.Stop()

            If Getv(flag_artmag_auto_refresh) = "S" Then
                Timer_Refresh_Magazzino.Start()
            End If

        End If

    End Sub

    Private Sub gridview_artmag_SelectionChanged(sender As Object, e As DevExpress.Data.SelectionChangedEventArgs) Handles gridview_artmag.SelectionChanged

        Dim selected_rows As Integer() = gridview_artmag.GetSelectedRows()
        Dim datasource_row_index As Integer = -1

        If Not selected_rows Is Nothing AndAlso selected_rows.Length > 0 AndAlso Flag_AutoRead = False Then
            datasource_row_index = gridview_artmag.GetDataSourceRowIndex(selected_rows(0))

            SyncLock (Obj_Lock)
                If DB_Dsv(dt_artmag.Rows(datasource_row_index)("qta_um"), 0) = 0 Then
                    Leggi_Dati_ArtMag(dt_artmag.Rows(datasource_row_index)("cod_art"))
                End If

            End SyncLock

        End If

        Flag_AutoRead = False

    End Sub

    
    Private Sub cmd_pp_pianifica_Click(sender As System.Object, e As System.EventArgs) Handles cmd_pp_pianifica.Click

        Dim ini_pian As Date = Now
        Dim tipo_art As String = Getv(tipo_ragg_prod_art_sel)
        Dim da_data As Date = Getv(da_data_pian)
        Dim a_data As Date = Getv(a_data_pian)
        Dim form As f_pianificazione = New f_pianificazione()
        Dim errori As List(Of String) = New List(Of String)
        Dim pian_linee As List(Of Pianificazione_Linea) = New List(Of Pianificazione_Linea)

        form.ShowDialog()

        If IsNothing(form.peso_art) Then Exit Sub

        If Field_Null(tipo_art) Then
            XtraMessageBox.Show("Specificare la tipologia di articoli.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Exit Sub
        End If
        If Field_Null(da_data) Then
            XtraMessageBox.Show("Specificare la data di inizio della pianificazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Exit Sub
        End If
        If Field_Null(a_data) Then
            XtraMessageBox.Show("Specificare la data di fine della pianificazione.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            Exit Sub
        End If

        If Not IsNothing(dt_artmag) Then
            For Each row In dt_artmag.Rows
                If Getv(row.Item("sel")) = True AndAlso (Field_Null(row.Item("qta_pz")) OrElse Getv(row.Item("qta_pz")) = 0) Then
                    XtraMessageBox.Show("Specificare la quantità di tutti gli ordini magazzino.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                    Exit Sub
                End If
            Next
        End If

        WaitForm_Show(Me, SplashScreenManager2, "Lettura Pianificazione in corso...")

        'Dim distinta_base As String
        'distinta_base = Esplosione_Distinta()

        'Lettura dati input pianificazione
        'Dim path_file As String = pianificazione(dt_grid_pianiprod_det, dt_artmag, tipo_art, da_data, a_data)

        WaitForm_Message(Me, SplashScreenManager2, "Pianificazione Produzione in corso...")

        'Calcolo soluzione ottima
        'Dim sol_path As String = Ottieni_Soluzione_Json(path_file, ini_pian.AddMinutes(form.t_max), form)

        Dim sol_path As String = Ottieni_Soluzione_Json("c:\pp_pianprod\novafunghi\Prodotti Finiti_21-10-2019_27-10-2019_inp.json", ini_pian.AddMinutes(form.t_max), form)

        'Lettura soluzione ottima
        Leggi_Soluzione_Json(sol_path, errori, pian_linee)

        WaitForm_Message(Me, SplashScreenManager2, "Salvataggio Pianificazione in corso...")

        sql = ""
        sql = "delete from pp_calend_ora; delete from pp_calend_ora_det; delete from pp_pianiprod; delete from pp_pianiprod_det"

        DB_SqlExecute(sql) 'Cancello pianificazione precedente nello stesso periodo

        'Salvattaggio pianificazione nel database
        Salva_Pianificazione(pian_linee, errori, da_data, a_data)

    End Sub

    Public Function Ottieni_Soluzione_Json(ByVal input_path As String, ByVal f_pian As Date, ByRef form As f_pianificazione)

        Dim Giacenze_mag As Giacenze_Magazzino = New Giacenze_Magazzino
        Dim lavorazione_semilav As Giacenze_Magazzino = New Giacenze_Magazzino
        Dim Ordini_Clienti As List(Of Ordine) = New List(Of Ordine)
        Dim Ordini_Semilavorati As List(Of Ordine) = New List(Of Ordine)
        Dim Ordini_Fornitori As Ordini_Fornitori = New Ordini_Fornitori
        Dim Linee_Produzione As List(Of Linea) = New List(Of Linea)
        Dim Articoli_Magazzino As List(Of Articolo_Magazzino) = New List(Of Articolo_Magazzino)
        Dim Calendario As List(Of Giorno) = New List(Of Giorno)
        Dim tipo_articolo As String = Nothing
        Dim da__data As Date = Nothing
        Dim a__data As Date = Nothing
        Dim soluzione As Soluzione = Nothing
        Dim pian_prec_fissata As Boolean = False
        Dim soluzione_vuota As Soluzione = Nothing

        'Verifico se è selezionato il flag Ripianifica e in caso lo sia ripianifico
        If (form.ripian.ToString = "S") Then
            pian_prec_fissata = True
        End If

        'Leggo i dati in input e li salvo nelle apposite strutture dati
        Parsing_File_Input(input_path, Ordini_Clienti, Linee_Produzione, Articoli_Magazzino, Calendario, tipo_articolo, da__data, a__data, Giacenze_mag, Ordini_Semilavorati, Ordini_Fornitori)

        'Costruisco la soluzione iniziale vuota
        soluzione_vuota = New Soluzione(Linee_Produzione, Ordini_Clienti, Calendario, form.peso_art, form.peso_occ, form.peso_tempo)

        'soluzione_vuota.Aggiungi_Art_Mag(Articoli_Magazzino) 'Aggiungo gli articoli magazzino agli ordine

        For Each lin In soluzione_vuota.Linee 'Aggiungo le sequenze generiche alle sequenze linea di ciascuna linea
            If lin.cod_linea_prod <> "" Then
                For Each seq In soluzione_vuota.Linee(soluzione_vuota.Linee.Count - 1).sequenze_linea
                    lin.sequenze_linea.Add(seq)
                Next
            End If
        Next

        soluzione_vuota.Linee.RemoveAt(soluzione_vuota.Linee.Count - 1) 'Elimino la linea contentente le sequenze generiche dalla lista di linee

        soluzione_vuota.Aggiungi_Pian_Gia_Presente(pian_prec_fissata, Getv(cod_dep)) 'Aggiungo la pianificazione precedente, se è fissata, la blocco in modo da considerala non modificabile

        Dim strFile1 As String = "c:\pp_pianprod\timefile.txt"
        Dim fileExists1 As Boolean = File.Exists(strFile1)
        Using sw1 As New StreamWriter(File.Open(strFile1, FileMode.OpenOrCreate))

            Dim inizio_greedy As Date = Now
            sw1.WriteLine("Ora inizio algoritmo greedy: " & inizio_greedy)

            soluzione = Soluzione_Iniziale(soluzione_vuota, Giacenze_mag, Ordini_Semilavorati, Ordini_Fornitori) 'Applico l'algoritmo greedy per trovare la soluzione iniziale

            Dim inizio_ts As Date = Now
            sw1.WriteLine("Durata algoritmo greedy: " & (inizio_ts.TimeOfDay - inizio_greedy.TimeOfDay).ToString)
            sw1.WriteLine("ora inizio tabu search: " & inizio_ts)

            soluzione = Ottimizza_Soluzione(soluzione, Ordini_Clienti, f_pian, Giacenze_mag, Ordini_Semilavorati, Ordini_Fornitori, sw1) 'Applico la tabu_search alla soluzione iniziale ottenuta dall'algorimto greedy

            sw1.WriteLine("Durata tabu search: " & (Now.TimeOfDay - inizio_ts.TimeOfDay).ToString)
            sw1.WriteLine("Durata totale: " & (Now.TimeOfDay - inizio_greedy.TimeOfDay).ToString)
        End Using

        Return soluzione.Pianificazione_To_Json() 'Ritorno il percorso del file JSON sul quale salvo la soluzione finale
    End Function


    Public Sub Salva_Pianificazione(ByRef pian_linee As List(Of Pianificazione_Linea), ByRef errori As List(Of String), ByVal da_data As Date, ByVal a_data As Date)


        Dim qta_um As Double = 0
        Dim qta_co As Double = 0
        Dim qta_cf As Double = 0
        Dim qta_pe As Double = 0
        Dim qta_pz As Double = 0

        Try

            Application.DoEvents()

            For Each linea In pian_linee

                For Each pian In linea.pianificazione

                    If pian.vincolo = "N" Then

                        Dim t As DataTable = New DataTable()
                        t.Columns.Add("cod_art")
                        t.Columns.Add("nr_ord")
                        t.Columns.Add("anno_ord")
                        t.Columns.Add("nr_riga_ord")
                        t.Columns.Add("qta_rif_pian")
                        t.Rows.Add(pian.cod_art, pian.nr_ord, pian.anno_ord, pian.nr_riga_ord, pian.qta_pz)

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                        DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                        Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(pian.cod_art)
                        DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                        If Pianprod_Dr_Sel_Anaart.Read Then

                            Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, "P", "P", pian.qta_pz, qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                        End If

                        If Not pian.anno_ord = 0 Then

                            Aggiungi_Ordine_Pianificazione(Tipo_Art_Prod_Testata, t.Rows(0), pian.giorno, pian.qta_pz)
                            pp_calend_ora_Insert(0, pian.anno_ord, pian.nr_ord, pian.nr_riga_ord, linea.cod_linea_prod, pian.giorno, pian.ora_inizio, pian.cod_art, pian.qta_pz, qta_co,
                                                 qta_cf, qta_pz, qta_pe, pian.Durata(), pian.giorno, pian.ora_fine, pian.cod_seq, , , , , , , , Getv(cod_dep))

                            pp_calend_ora_Det_Insert(0, pian.anno_ord, pian.nr_ord, pian.nr_riga_ord, linea.cod_linea_prod, pian.giorno, pian.ora_inizio, pian.cod_art, pian.qta_pz, qta_co,
                                                 qta_cf, qta_pz, qta_pe, pian.Durata(), pian.cod_seq, , , , , , , , Getv(cod_dep))
                        Else
                            pp_pianiprod_Aggiungi(Tipo_Art_Prod_Testata, Trim(DB_Dsv(t.Rows(0).Item("cod_art"), "")), pian.giorno, "", "",
                                                       "", "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, New Long, New Long, DBNull.Value, Getv(cod_dep)) 'ToCheck
                            pp_calend_ora_Insert(0, 0, 0, 0, linea.cod_linea_prod, pian.giorno, pian.ora_inizio, pian.cod_art, pian.qta_pz, qta_co,
                                                qta_cf, qta_pz, qta_pe, pian.Durata(), pian.giorno, pian.ora_fine, pian.cod_seq, , , , , , , , Getv(cod_dep))
                            pp_calend_ora_Det_Insert(0, 0, 0, 0, linea.cod_linea_prod, pian.giorno, pian.ora_inizio, pian.cod_art, pian.qta_pz, qta_co,
                                                 qta_cf, qta_pz, qta_pe, pian.Durata(), pian.cod_seq, , , , , , , , Getv(cod_dep))
                        End If


                        flag_fatte_mod = True
                    Else
                        pp_calend_ora_Insert(0, 0, 0, 0, linea.cod_linea_prod, pian.giorno, pian.ora_inizio, pian.cod_art, 0, 0,
                                                0, 0, 0, pian.Durata(), pian.giorno, pian.ora_fine, pian.cod_seq, , , , , , , , Getv(cod_dep))
                        pp_calend_ora_Det_Insert(0, 0, 0, 0, linea.cod_linea_prod, pian.giorno, pian.ora_inizio, pian.cod_art, 0, 0,
                                             0, 0, 0, pian.Durata(), pian.cod_seq, , , , , , , , Getv(cod_dep))
                    End If
                Next
            Next

            If flag_fatte_mod = True Then

                Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

                dt_grid_pianiprod_det.AcceptChanges()

            End If

            Dim data As Date = da_data

            While data <= a_data

                Dim pref As String = Cerca_Lista_Date_Prefisso(CDate(data))

                For Each row As DataRow In dt_piano.Rows

                    If Object_Val(row(pref & "qta_pian_data")) = 0 And Not Field_Null(row(pref & "qta_pian_ord_data")) Then

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
                        DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
                        Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Trim(DB_Dsv(row("cod_art"), ""))
                        DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

                        If Pianprod_Dr_Sel_Anaart.Read Then

                            Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), _
                                          Math.Round(row(pref & "qta_pian_ord_data"), 3), qta_um, qta_co, qta_cf, qta_pz, qta_pe)

                            pp_pianiprod_Modifica(Tipo_Art_Prod_Testata, Trim(DB_Dsv(row("cod_art"), "")), data, DB_Dsv(Pianprod_Dr_Sel_Anaart("ragg_prod")), DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_linea_prod_pre")),
                                            DB_Dsv(Pianprod_Dr_Sel_Anaart("cod_ass_prod_pre")), "P", qta_um, qta_co, qta_cf, qta_pe, qta_pz, New Integer, New Integer, Trim(DB_Dsv(row(pref & "cod_linea_prod"), "")), Getv(cod_dep))

                            flag_fatte_mod = True


                        End If

                        DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

                    End If
                Next
                data = data.AddDays(1)
            End While

            If flag_fatte_mod = True Then

                Leggi_Dati_Piano(Tipo_Art_Prod_Testata, Ragg_Prod_Testata, dt_piano, grid_piano_view, da_data_pian, a_data_pian, True)

                dt_grid_pianiprod_det.AcceptChanges()

            End If

            WaitForm_Close(Me, SplashScreenManager2)

            Dim str As String = "Errori riscontrati: " & vbCrLf

            For Each errore In errori
                str = str & errore & vbCrLf
            Next

            If errori.Count > 0 Then
                XtraMessageBox.Show(str, My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
            End If


        Catch ex As Exception
            WaitForm_Close(Me, SplashScreenManager2)

            MsgErr(ex)

        End Try
    End Sub

    Private Sub Handler_Timer_Refresh_Ordcli(sender As Object, e As EventArgs)

        Dim Flag_Dati_In_Modifica As Boolean = False

        SyncLock Obj_Lock

            ' Durante la gestione del refresh, devo fermare e riavviare il timer.
            Timer_Refresh_Ordini.Stop()

            If OrdCli_Sel_In_Editing Then

                Flag_Dati_In_Modifica = True

            Else

                ' Verifico se l'utente ha selezionato delle righe
                For Each row As DataRow In dt_grid_pianiprod_det.Rows

                    If DB_Dsv(row("sel"), False) = True Then
                        Flag_Dati_In_Modifica = True
                        Exit For
                    End If

                Next

            End If

            If Not Flag_Dati_In_Modifica Then

                WaitForm_Show(Me, SplashScreenManager2, "Lettura Ordini Clienti in corso...")
                ' Se i dati non sono in modifica, aggiorno la griglia
                Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")
                WaitForm_Close(Me, SplashScreenManager2)

            End If

            ' Riavvio il timer
            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End SyncLock

    End Sub

    Private Sub min_ordcli_auto_refresh_Leave(sender As Object, e As EventArgs) Handles min_ordcli_auto_refresh.Leave

        If Not Timer_Refresh_Ordini Is Nothing Then

            Timer_Refresh_Ordini.Stop()
            Timer_Refresh_Ordini.Interval = Getv(min_ordcli_auto_refresh) * 60 * 1000

            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End If

    End Sub

    Private Sub flag_ordcli_auto_refresh_CheckedChanged(sender As Object, e As EventArgs) Handles flag_ordcli_auto_refresh.CheckedChanged

        If Not Timer_Refresh_Ordini Is Nothing Then

            Timer_Refresh_Ordini.Stop()

            If Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End If

    End Sub

    Private Sub grid_pianiprod_det_view_CellValueChanging(sender As Object, e As Views.Base.CellValueChangedEventArgs) Handles grid_pianiprod_det_view.CellValueChanging

        SyncLock Obj_Lock
            OrdCli_Sel_In_Editing = True
        End SyncLock

    End Sub

    Private Sub grid_pianiprod_det_view_CellValueChanged(sender As Object, e As Views.Base.CellValueChangedEventArgs) Handles grid_pianiprod_det_view.CellValueChanged

        SyncLock Obj_Lock
            OrdCli_Sel_In_Editing = False
        End SyncLock

    End Sub

    Private Sub cmd_agg_ordcli_Click(sender As Object, e As EventArgs) Handles cmd_agg_ordcli.Click

        SyncLock Obj_Lock

            If Not Timer_Refresh_Ordini Is Nothing Then
                Timer_Refresh_Ordini.Stop()
            End If

            If Not dt_grid_pianiprod_det Is Nothing Then
                WaitForm_Show(Me, SplashScreenManager2, "Lettura Ordini Clienti in corso...")
                ' Se i dati non sono in modifica, aggiorno la griglia
                Leggi_Grid(grid_pianiprod_det, grid_pianiprod_det_view, dt_grid_pianiprod_det, "NO ESCL")
                WaitForm_Close(Me, SplashScreenManager2)
            End If

            ' Riavvio il timer
            If Not Timer_Refresh_Ordini Is Nothing AndAlso Getv(flag_ordcli_auto_refresh) = "S" Then
                Timer_Refresh_Ordini.Start()
            End If

        End SyncLock

    End Sub

    Private Sub Carica_Tab_Espl_Distinte(ByVal DtRowHandle As Integer)
        Dim TabDistinte As String = ""
        Dim Tab_Espl_Distinte_Temp As String = ""
        Dim Db_Conn_Crea As DB2Connection = Nothing
        Dim DB_Transaction_Crea As DB2Transaction = Nothing
        Dim Qta_Da_Produrre As Double
        Dim Qta_Um As Double
        Dim Qta_Co As Double
        Dim Qta_Cf As Double
        Dim Qta_Pe As Double
        Dim Qta_Pz As Double
        Dim DtRow As DataRow
        Dim Parametri As String = ""
        Dim Nr_Proc As Integer
        Dim Flag_Result As String = ""
        Dim Cmd_Ins_TabDistinte As DB2Command = Nothing
        Dim Cod_Art As Object = Nothing

        Try

            Db_Conn_Crea = New DB2Connection(DB_ConnectionString_NET)
            Db_Conn_Crea.Open()

            DtRow = dt_artmag.Rows(DtRowHandle)

            Setv(Cod_Art, DB_Dsv(DtRow("cod_art"), ""))
            Qta_Da_Produrre = Object_Val(DtRow("qta_um"))

            If Not DB_LookUp("cod_art", "distbase", " cod_art = '" & Getv(Cod_Art) & "' AND tipo_riga = 'N'", xx1) Then

                Exit Sub

            End If

            Delete_From_Tab_Espl_Distinte(DtRowHandle)

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)
            DB_CommandParametersReset(Pianprod_Cmd_Sel_Anaart)
            Pianprod_Cmd_Sel_Anaart.Parameters.Item("cod_art").Value = Getv(Cod_Art)
            DB_DataReaderExecute(Pianprod_Dr_Sel_Anaart, Pianprod_Cmd_Sel_Anaart)

            If Pianprod_Dr_Sel_Anaart.Read Then
                Calcola_4_Quantita(Pianprod_Dr_Sel_Anaart, DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), DB_Dsv(Pianprod_Dr_Sel_Anaart("tipo_um"), ""), Qta_Da_Produrre, Qta_Um, Qta_Co, Qta_Cf, Qta_Pz, Qta_Pe)
            End If

            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            DB_BeginTrans(Db_Conn_Crea, DB_Transaction_Crea)

            ' crea la tabella temporanea usata dal programma in C (di output)
            Tab_Espl_Distinte_Temp = DB_GetTempTableName("esplo", Db_Conn_Crea, DB_Transaction_Crea)
            Sql = Crea_Sql_Distinta_Esplosa(Tab_Espl_Distinte_Temp)
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' tabella di input di espldist in C
            TabDistinte = DB_GetTempTableName("gestprod", Db_Conn_Crea, DB_Transaction_Crea)
            Sql = Crea_Sql_Distinte_Da_Esplodere(TabDistinte)
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            ' nella tabella di input di espldist in C vengono aggiunti dei campi che servono poi per i lgeami tra padri e figli
            Sql = ""
            Sql = Sql & " ALTER TABLE " & TabDistinte & " ADD ( "
            Sql = Sql & " id_pp_pianiprod           INTEGER , " & vbCrLf
            Sql = Sql & " nr_riga_pp_pianiprod      INTEGER ,  " & vbCrLf
            Sql = Sql & " qta_co               FLOAT    , " & vbCrLf
            Sql = Sql & " qta_cf               FLOAT    , " & vbCrLf
            Sql = Sql & " qta_pe               FLOAT    , " & vbCrLf
            Sql = Sql & " qta_pz               FLOAT    ) " & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea, DB_Transaction_Crea)

            Sql = ""
            Sql = Sql & " INSERT INTO " & TabDistinte & vbCrLf
            Sql = Sql & " ( cod_art              , tipo_variante   , nr_variante     " & vbCrLf
            Sql = Sql & " , qta                  , qta_co          , qta_cf          " & vbCrLf
            Sql = Sql & " , qta_pe               , qta_pz          , id_pp_pianiprod " & vbCrLf
            Sql = Sql & " , nr_riga_pp_pianiprod , data_prod       " & vbCrLf
            Sql = Sql & " ) " & vbCrLf
            Sql = Sql & " VALUES ( "
            Sql = Sql & "   ?, ?, ? " & vbCrLf
            Sql = Sql & " , ?, ?, ? " & vbCrLf
            Sql = Sql & " , ?, ?, ? " & vbCrLf
            Sql = Sql & " , ?, ? " & vbCrLf
            Sql = Sql & " ) " & vbCrLf
            Cmd_Ins_TabDistinte = DB_CommandCreate(Sql, Db_Conn_Crea)
            Cmd_Ins_TabDistinte.Parameters.Clear()
            Cmd_Ins_TabDistinte.Parameters.Add("cod_art", DB2Type.VarChar)
            Cmd_Ins_TabDistinte.Parameters.Add("tipo_variante", DB2Type.VarChar)
            Cmd_Ins_TabDistinte.Parameters.Add("nr_variante", DB2Type.Integer)
            Cmd_Ins_TabDistinte.Parameters.Add("qta", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_co", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_cf", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_pe", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("qta_pz", DB2Type.Float)
            Cmd_Ins_TabDistinte.Parameters.Add("id_pp_pianiprod", DB2Type.Integer)
            Cmd_Ins_TabDistinte.Parameters.Add("nr_riga_pp_pianiprod", DB2Type.Integer)
            Cmd_Ins_TabDistinte.Parameters.Add("data_prod", DB2Type.Date)

            DB_CommitTrans(DB_Transaction_Crea)

            Sql = ""
            Sql = Sql & " DELETE FROM " & Tab_Espl_Distinte_Temp & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea)

            Sql = ""
            Sql = Sql & " DELETE FROM " & TabDistinte & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea)

            DB_CommandParametersReset(Cmd_Ins_TabDistinte)
            Cmd_Ins_TabDistinte.Parameters.Item("cod_art").Value = Getv(Cod_Art)
            Cmd_Ins_TabDistinte.Parameters.Item("tipo_variante").Value = "D"
            Cmd_Ins_TabDistinte.Parameters.Item("nr_variante").Value = Object_Val(pp_modelli_piano.Nr_Variante)
            Cmd_Ins_TabDistinte.Parameters.Item("qta").Value = Qta_Um
            Cmd_Ins_TabDistinte.Parameters.Item("qta_co").Value = Qta_Co
            Cmd_Ins_TabDistinte.Parameters.Item("qta_cf").Value = Qta_Cf
            Cmd_Ins_TabDistinte.Parameters.Item("qta_pe").Value = Qta_Pe
            Cmd_Ins_TabDistinte.Parameters.Item("qta_pz").Value = Qta_Pz
            Cmd_Ins_TabDistinte.Parameters.Item("id_pp_pianiprod").Value = DBNull.Value
            Cmd_Ins_TabDistinte.Parameters.Item("nr_riga_pp_pianiprod").Value = DBNull.Value
            Cmd_Ins_TabDistinte.Parameters.Item("data_prod").Value = DB_Sql_Date(Now)
            DB_CommandExecute(Cmd_Ins_TabDistinte)

            Parametri = ";"                                                        'rf(cod_art_padre, "@@@@@@@@@@@@@") & ";"
            Parametri = Parametri & "D;"                                           'rf(l_tipo_variante, "@") & ";"
            Parametri = Parametri & Object_Val(pp_modelli_piano.Nr_Variante) & ";" 'rf(nr_variante, "000000000") & ";"
            Parametri = Parametri & DB_Sql_Date(Now) & ";"
            Parametri = Parametri & "99;"                                          'rf(passa_livello, "00000") & ";"
            Parametri = Parametri & "N;"                                           'RigheDescrittive & ";"
            Parametri = Parametri & "N;"                                           'Livello_AF & ";"
            Parametri = Parametri & ";"                                            'sQuantita & ";"
            Parametri = Parametri & "T;"                                           'TipoOrdinamento & ";"
            Parametri = Parametri & Tab_Espl_Distinte_Temp & ";"
            Parametri = Parametri & "S;"                                           ' dbtrans
            Parametri = Parametri & TabDistinte & ";"                              ' tmptabledistinte
            Parametri = Parametri & DB_Sql_Date(Now) & ";"                         ' s_data_prod_in

            TaskSrv_Start2("espldist", "Esplosione Distinta.", Parametri, Nr_Proc, True)
            TaskSrv_Status(Nr_Proc, Flag_Result)

            If Flag_Result = "R" Then

                WaitForm_Close(Me, SplashScreenManager2)
                XtraMessageBox.Show("Attenzione! Problema con Esplosione Distinta.", My.Application.Info.Title, MessageBoxButtons.OK, MessageBoxIcon.Information)

                Exit Sub

            End If

            Sql = ""
            Sql = Sql & " INSERT INTO " & Tab_Espl_Distinte & vbCrLf
            Sql = Sql & " SELECT * FROM " & Tab_Espl_Distinte_Temp & vbCrLf
            DB_SqlExecute(Sql, Db_Conn_Crea)

        Catch ex As Exception

            DB_RollbackTrans(DB_Transaction_Crea)

            MsgErr(ex)

        Finally

            DB_CommandClose(Cmd_Ins_TabDistinte)
            DB_DataReaderClose(Pianprod_Dr_Sel_Anaart)

            DB_TableDrop(TabDistinte, Db_Conn_Crea)
            DB_TableDrop(Tab_Espl_Distinte_Temp, Db_Conn_Crea)

            Db_Conn_Crea.Close()
            Db_Conn_Crea.Dispose()

        End Try

    End Sub

    Private Sub gridview_artmag_flag_sel_CheckedChanged(sender As Object, e As System.EventArgs) Handles gridview_artmag_flag_sel.CheckedChanged
        Dim DtRowHandle As Integer
        Dim flag_sel As DevExpress.XtraEditors.CheckEdit = Nothing

        Try

            flag_sel = CType(sender, DevExpress.XtraEditors.CheckEdit)

            If gridview_artmag.GetSelectedRows().Length = 0 Then Exit Sub

            DtRowHandle = gridview_artmag.GetDataSourceRowIndex(gridview_artmag.GetSelectedRows(0))

            If flag_sel.Checked = True Then

                If Object_Val(dt_artmag.Rows(DtRowHandle).Item("qta_um")) > 0 Then
                    Carica_Tab_Espl_Distinte(DtRowHandle)
                End If

            Else

                Delete_From_Tab_Espl_Distinte(DtRowHandle)

            End If

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Sub

    Private Sub Delete_From_Tab_Espl_Distinte(Optional ByVal DtRowHandle As Integer = -1)
        Dim Db_Conn_Crea As DB2Connection = Nothing

        Try

            Db_Conn_Crea = New DB2Connection(DB_ConnectionString_NET)
            Db_Conn_Crea.Open()

            Sql = ""
            Sql = Sql & " DELETE FROM " & Tab_Espl_Distinte & vbCrLf

            If DtRowHandle > -1 Then
                Sql = Sql & " WHERE dis_cod_art = '" & DB_Dsv(dt_artmag.Rows(DtRowHandle).Item("cod_art"), "") & "' " & vbCrLf
            End If

            DB_SqlExecute(Sql, Db_Conn_Crea)

            Db_Conn_Crea.Close()
            Db_Conn_Crea.Dispose()

        Catch ex As Exception

            MsgErr(ex)

        End Try

    End Sub

    Private Sub cod_des_dep_EditValueChanged(sender As Object, e As System.EventArgs) Handles cod_des_dep.EditValueChanged

        Setv(cod_dep, Trim(Getv(cod_des_dep).Split("-")(0)))

        Dim index As Integer

        index = tipo_ragg_prod_art_sel.SelectedIndex

        If index = -1 Then Exit Sub

        ' #pianificazioneproduzione
        If index <= dt_tipo_ragg_art_ins.Rows.Count - 1 Then
            Tipo_Art_Prod_Testata = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("tipo_art_sel"), ""))
            Ragg_Prod_Testata = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("ragg_prod"), ""))
            tipo_art_prod_sel.SelectedItem = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("des_tipo_art_sel"), ""))
            tipo_visualizzazione.SelectedItem = Trim(DB_Dsv(dt_tipo_ragg_art_ins.Rows(index).Item("des_ragg_prod"), ""))
        Else
            Tipo_Art_Prod_Testata = ""
            Ragg_Prod_Testata = ""
            tipo_art_prod_sel.SelectedItem = ""
            tipo_visualizzazione.SelectedItem = ""
        End If

        leggi_pp_modelli_col(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)

        If Not dt_artmag Is Nothing Then
            gridview_artmag_clear()
            leggi_pp_modelli_rag(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)
            leggi_pp_modelli_art(COD_MOD_PIANMRP, Tipo_Art_Prod_Testata, Ragg_Prod_Testata)
            imposta_gridview_artmag()
        End If

        Pp_Pianiprod_Cancella_Lock(Getv(Cod_Dep_Old), "", "")
        Setv(Cod_Dep_Old, Getv(cod_dep))

        Flag_Mostra_Messaggio = True
        cmd_leggi.PerformClick()
        Flag_Mostra_Messaggio = False

    End Sub

    Private Sub Sistema_Query_Open()

        Sql = ""
        Sql = Sql & "   SELECT SUM(CASE tabum.tipo_um " & vbCrLf
        Sql = Sql & "              WHEN 'L' THEN pp_calend_ora_det.qta_pian_co " & vbCrLf
        Sql = Sql & "              WHEN 'C' THEN pp_calend_ora_det.qta_pian_cf " & vbCrLf
        Sql = Sql & "              WHEN 'P' THEN pp_calend_ora_det.qta_pian_pz " & vbCrLf
        Sql = Sql & "              WHEN 'K' THEN pp_calend_ora_det.qta_pian_pe " & vbCrLf
        Sql = Sql & "              ELSE          pp_calend_ora_det.qta_pian END) as qta  " & vbCrLf
        Sql = Sql & "     FROM pp_calend_ora_det, anaart, tabum" & vbCrLf
        Sql = Sql & "    WHERE pp_calend_ora_det.cod_art_pian = anaart.cod_art " & vbCrLf
        Sql = Sql & "      AND anaart.cod_um              = tabum.cod_um " & vbCrLf
        Sql = Sql & "      AND pp_calend_ora_det.cod_art_pian = ? " & vbCrLf
        Sql = Sql & "      AND pp_calend_ora_det.data_pian    = ? " & vbCrLf
        Sql = Sql & "      AND pp_calend_ora_det.cod_dep      = ? " & vbCrLf

        Cmd_Sel_Qta_Pora_Data = DB_CommandCreate(Sql)

        With Cmd_Sel_Qta_Pora_Data
            .Parameters.Clear()
            .Parameters.Add("cod_art", DB2Type.Char)
            .Parameters.Add("data", DB2Type.Date)
            .Parameters.Add("cod_dep", DB2Type.Char)
        End With

    End Sub

    Private Sub Leggi_Appfiltri()
        Dim des_tipo_clsart As String = ""

        listaControlli.Clear()
        FindControlRecursive(listaControlli, f_appfiltri)

        Appfiltri_Leggi(Me, v_incesc, v_sincesc, COD_MOD_PIANMRP, listaControlli)

        If Getv(f_appfiltri.l_tipo_classe) = "G" Then
            des_tipo_clsart = "gest"
        Else
            des_tipo_clsart = "comm"
        End If

        Where_AppFiltri = ""

        ' tipo articolo
        If Not Field_Null(f_appfiltri.cod_Da_Tipo_Art) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.tipo_art >= '" & Getv(f_appfiltri.cod_Da_Tipo_Art) & "'" & vbCrLf
        End If
        If Not Field_Null(f_appfiltri.cod_A_Tipo_Art) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.tipo_art <= '" & Getv(f_appfiltri.cod_A_Tipo_Art) & "'" & vbCrLf
        End If
        If Trim(v_incesc(9)) <> "" Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.tipo_art " & Trim(v_sincesc(9)) & " ( " & Trim(v_incesc(9)) & " ) " & vbCrLf
        End If

        ' Linea
        If Not Field_Null(f_appfiltri.cod_Da_Linea) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_linea_" & des_tipo_clsart & " >= '" & Getv(f_appfiltri.cod_Da_Linea) & "'" & vbCrLf
        End If
        If Not Field_Null(f_appfiltri.cod_A_Linea) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_linea_" & des_tipo_clsart & " <= '" & Getv(f_appfiltri.cod_A_Linea) & "'" & vbCrLf
        End If
        If Trim(v_incesc(10)) <> "" Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_linea_" & des_tipo_clsart & " " & Trim(v_sincesc(10)) & " ( " & Trim(v_incesc(10)) & " ) " & vbCrLf
        End If

        ' Settore
        If Not Field_Null(f_appfiltri.cod_Da_Settore) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_sett_" & des_tipo_clsart & " >= '" & Getv(f_appfiltri.cod_Da_Settore) & "'" & vbCrLf
        End If
        If Not Field_Null(f_appfiltri.cod_A_Settore) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_sett_" & des_tipo_clsart & " <= '" & Getv(f_appfiltri.cod_A_Settore) & "'" & vbCrLf
        End If
        If Trim(v_incesc(11)) <> "" Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_sett_" & des_tipo_clsart & " " & Trim(v_sincesc(11)) & " ( " & Trim(v_incesc(11)) & " ) " & vbCrLf
        End If

        ' Famiglia
        If Not Field_Null(f_appfiltri.cod_Da_Famiglia) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_fam_" & des_tipo_clsart & " >= '" & Getv(f_appfiltri.cod_Da_Famiglia) & "'" & vbCrLf
        End If
        If Not Field_Null(f_appfiltri.cod_A_Famiglia) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_fam_" & des_tipo_clsart & " <= '" & Getv(f_appfiltri.cod_A_Famiglia) & "'" & vbCrLf
        End If
        If Trim(v_incesc(12)) <> "" Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_fam_" & des_tipo_clsart & " " & Trim(v_sincesc(12)) & " ( " & Trim(v_incesc(12)) & " ) " & vbCrLf
        End If

        ' Sottofamiglia
        If Not Field_Null(f_appfiltri.cod_Da_Sottofamiglia) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_sott_" & des_tipo_clsart & " >= '" & Getv(f_appfiltri.cod_Da_Sottofamiglia) & "'" & vbCrLf
        End If
        If Not Field_Null(f_appfiltri.cod_A_Sottofamiglia) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_sott_" & des_tipo_clsart & " <= '" & Getv(f_appfiltri.cod_A_Sottofamiglia) & "'" & vbCrLf
        End If
        If Trim(v_incesc(13)) <> "" Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_sott_" & des_tipo_clsart & " " & Trim(v_sincesc(13)) & " ( " & Trim(v_incesc(13)) & " ) " & vbCrLf
        End If

        ' articolo
        If Not Field_Null(f_appfiltri.cod_Da_Articolo) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_art >= '" & Getv(f_appfiltri.cod_Da_Articolo) & "'" & vbCrLf
        End If
        If Not Field_Null(f_appfiltri.cod_A_Articolo) Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_art <= '" & Getv(f_appfiltri.cod_A_Articolo) & "'" & vbCrLf
        End If
        If Trim(v_incesc(14)) <> "" Then
            Where_AppFiltri = Where_AppFiltri & " AND anaart.cod_art " & Trim(v_sincesc(14)) & " ( " & Trim(v_incesc(14)) & " ) " & vbCrLf
        End If

    End Sub

    'ricorsivamente, creo una lista contenente tutti i controlli presenti all'interno del form (inclusi i controlli figli)
    'utilizzata nelle funzioni di salvataggio e lettura dei filtri

    Public Sub FindControlRecursive(ByRef list As List(Of Control), ByRef parent As Control)
        Try

            If parent Is Nothing Then Exit Sub
            list.Add(parent)
            For Each child As Control In parent.Controls
                FindControlRecursive(list, child)
            Next

        Catch ex As Exception
            MsgErr(ex)
        End Try

    End Sub

    Private Sub f_pianmrp_Shown(sender As Object, e As System.EventArgs) Handles Me.Shown

        cmd_info.ToolTip = App_GetInformation()

    End Sub

    Private Sub tipo_ragg_prod_art_sel_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles tipo_ragg_prod_art_sel.SelectedIndexChanged

    End Sub
End Class



